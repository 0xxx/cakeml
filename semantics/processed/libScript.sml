(*Generated by Lem from lib.lem.*)
open HolKernel Parse boolLib bossLib;
open pervasives_extraTheory;

val _ = numLib.prefer_num();



val _ = new_theory "lib"

(*open import Pervasives_extra*)

(* TODO: look for these in the built-in library *)


(*
val i : num -> Int.int
let inline {hol} i = Hol.(&)

val int_to_num : int -> num
let inline {hol} int_to_num = Hol.Num

val num_to_string : num -> string
let inline {hol} num_to_string = Hol.num_to_dec_string

val neg : int -> int
let inline {hol} neg = Hol.int_neg
*)

(*val all_distinct : forall 'a. list 'a -> bool*)

(*val rtc : forall 'a. ('a -> 'a -> bool) -> ('a -> 'a -> bool)*)

(*val count_list : nat -> list nat*)

(*val option_map : forall 'a 'b. ('a -> 'b) -> maybe 'a -> maybe 'b*)
val _ = Define `
 (option_map f x =  
 ((case x of
      (NONE) => (NONE)
    | (SOME y) => (SOME (f y))
  )))`;


(* Change the nth element in the list to 'a *)
(*val LUPDATE : forall 'a. 'a -> nat -> list 'a -> list 'a*)


(* Environments *)
val _ = type_abbrev((* ( 'a, 'b) *) "env" , ``: ('a#'b) list``);

(*val emp : forall 'a 'b. env 'a 'b*)
val _ = Define `
 (emp = ([]))`;


(*val lookup : forall 'a 'b. Eq 'a => 'a -> env 'a 'b -> maybe 'b*)
 val _ = Define `

(lookup dict_Basic_classes_Eq_a n [] = (NONE))`;

(* TODO: put back
and
lookup n ((n',v)::e) =
  if n' = n then
    Just v
  else
    lookup n e
*)

(*val bind : forall 'a 'b. 'a -> 'b -> env 'a 'b -> env 'a 'b*)
val _ = Define `
 (bind n v e = ((n,v)::e))`;


(*val merge : forall 'a 'b. env 'a 'b -> env 'a 'b -> env 'a 'b*)
val _ = Define `
 (merge e1 e2 = (e1 ++ e2))`;


val _ = export_theory()

