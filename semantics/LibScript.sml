(*Generated by Lem from lib.lem.*)
open bossLib Theory Parse res_quanTheory
open fixedPointTheory finite_mapTheory listTheory pairTheory pred_setTheory
open integerTheory set_relationTheory sortingTheory stringTheory wordsTheory

val _ = numLib.prefer_num();



val _ = new_theory "Lib"

(*val i : num -> Int.int*)

(*val all_distinct : forall 'a. list 'a -> bool*)

(*val rtc : forall 'a. ('a -> 'a -> bool) -> ('a -> 'a -> bool)*)

(*val count_list : num -> list num*)

(*val option_map : forall 'a 'b. ('a -> 'b) -> option 'a -> option 'b*)
val _ = Define `
 (option_map f x =  
 ((case x of
      NONE => NONE
    | SOME y => SOME (f y)
  )))`;


(* Change the nth element in the list to 'a *)
(*val LUPDATE : forall 'a. 'a -> num -> list 'a -> list 'a*)


(* Environments *)
val _ = type_abbrev((* ( 'a, 'b) *) "env" , ``: ('a#'b) list``);

(*val emp : forall 'a 'b. env 'a 'b*)
val _ = Define `
 emp = ([])`;


(*val lookup : forall 'a 'b. 'a -> env 'a 'b -> option 'b*)
 val lookup_defn = Hol_defn "lookup" `

(lookup n [] = NONE)
/\
(lookup n ((n',v)::e) =  
(if n' = n then
    SOME v
  else
    lookup n e))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn lookup_defn;

(*val bind : forall 'a 'b. 'a -> 'b -> env 'a 'b -> env 'a 'b*)
val _ = Define `
 (bind n v e = ((n,v) ::e))`;


(*val merge : forall 'a 'b. env 'a 'b -> env 'a 'b -> env 'a 'b*)
val _ = Define `
 (merge e1 e2 = (e1 ++ e2))`;


val _ = export_theory()

