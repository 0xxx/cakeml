open import Pervasives
open import Ast
open import SemanticPrimitives
open import Ffi
open import Namespace
open import Lib
open import Evaluate

val prim_types_program : prog
let prim_types_program =
  [Tdec  (Dexn unknown_loc "Bind" []);
   Tdec  (Dexn unknown_loc "Chr" []);
   Tdec  (Dexn unknown_loc "Div" []);
   Tdec  (Dexn unknown_loc "Subscript" []);
   Tdec  (Dtype unknown_loc [([], "bool", [("true", []); ("false", [])])]);
   Tdec  (Dtype unknown_loc [(["'a"], "list", [("nil", []); ("::", [Tvar "'a"; Tapp [Tvar "'a"] (TC_name (Short "list"))]);])]);
   Tdec (Dtype unknown_loc [(["'a"], "option", [("NONE", []);("SOME", [Tvar "'a"]);])]);]

val add_to_sem_env :
  forall 'ffi. Eq 'ffi => (state 'ffi * sem_env v) -> prog -> maybe (state 'ffi * sem_env v)
let add_to_sem_env (st, env) prog =
  match evaluate_prog st env prog with
  | (st', Rval env') -> Just (st', extend_dec_env env' env)
  | _ -> Nothing
  end

val prim_sem_env : forall 'ffi. Eq 'ffi => ffi_state 'ffi -> maybe (state 'ffi * sem_env v)
let prim_sem_env ffi =
  add_to_sem_env
    (<| clock = 0; ffi = ffi; refs = []; defined_mods = {}; defined_types = {} |>,
     <| v = nsEmpty; c = nsEmpty |>)
        prim_types_program
