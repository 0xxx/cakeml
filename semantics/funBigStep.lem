open import Pervasives_extra
open import Lib
open import Ast
open import SemanticPrimitives
open import Ffi

(* The semantics is defined here using check_clock so that HOL4 generates
 * provable termination conditions. However, after termination is proved, we
 * clean up the definition (in HOL4) to remove occurrences of check_clock. *)

let check_clock s' s =
  <| s' with clock = if s'.clock <= s.clock
                     then s'.clock else s.clock |>

let dec_clock s = <| s with clock = s.clock - 1 |>

(* list_result is equivalent to map_result (\v. [v]) I, where map_result is
 * defined in evalPropsTheory *)
let rec
list_result (Rval v) = Rval [v]
and
list_result (Rerr e) = Rerr e

val evaluate : forall 'ffi. oracle 'ffi -> state 'ffi -> environment v -> list exp -> state 'ffi * result (list v) v
val evaluate_match : forall 'ffi. oracle 'ffi -> state 'ffi -> environment v -> v -> list (pat * exp) -> v -> state 'ffi * result (list v) v
let rec
evaluate oc st env [] = (st, Rval [])
and
evaluate oc st env (e1::e2::es) =
  match evaluate oc st env [e1] with
  | (st', Rval v1) ->
      match evaluate oc (check_clock st' st) env (e2::es) with
      | (st'', Rval vs) -> (st'', Rval (head v1::vs))
      | res -> res
      end
  | res -> res
  end
and
evaluate oc st env [Lit l] = (st, Rval [Litv l])
and
evaluate oc st env [Raise e] =
  match evaluate oc st env [e] with
  | (st', Rval v) -> (st', Rerr (Rraise (head v)))
  | res -> res
  end
and
evaluate oc st env [Handle e pes] =
  match evaluate oc st env [e] with
  | (st', Rerr (Rraise v)) -> evaluate_match oc (check_clock st' st) env v pes v
  | res -> res
  end
and
evaluate oc st env [Con cn es] =
  if do_con_check env.c cn (length es) then
    match evaluate oc st env (reverse es) with
    | (st', Rval vs) ->
        match build_conv env.c cn (reverse vs) with
        | Just v -> (st', Rval [v])
        | Nothing -> (st', Rerr (Rabort Rtype_error))
        end
    | res -> res
    end
  else (st, Rerr (Rabort Rtype_error))
and
evaluate oc st env [Var n] =
  match lookup_var_id n env with
  | Just v -> (st, Rval [v])
  | Nothing -> (st, Rerr (Rabort Rtype_error))
  end
and
evaluate oc st env [Fun x e] = (st, Rval [Closure env x e])
and
evaluate oc st env [App op es] =
  match evaluate oc st env (reverse es) with
  | (st', Rval vs) ->
      if op = Opapp then
        match do_opapp (reverse vs) with
        | Just (env',e) ->
            if st'.clock = 0 || st.clock = 0 then
              (st', Rerr (Rabort Rtimeout_error))
            else
              evaluate oc (dec_clock (check_clock st' st)) env' [e]
        | Nothing -> (st', Rerr (Rabort Rtype_error))
        end
      else
        match do_app oc (st'.refs,st'.ffi) op (reverse vs) with
        | Just ((refs,ffi),r) -> (<| st' with refs = refs; ffi = ffi |>, list_result r)
        | Nothing -> (st', Rerr (Rabort Rtype_error))
        end
  | res -> res
  end
and
evaluate oc st env [Log lop e1 e2] =
  match evaluate oc st env [e1] with
  | (st', Rval v1) ->
      match do_log lop (head v1) e2 with
      | Just (Exp e) -> evaluate oc (check_clock st' st) env [e]
      | Just (Val v) -> (st', Rval [v])
      | Nothing -> (st', Rerr (Rabort Rtype_error))
      end
  | res -> res
  end
and
evaluate oc st env [If e1 e2 e3] =
  match evaluate oc st env [e1] with
  | (st', Rval v) ->
      match do_if (head v) e2 e3 with
      | Just e -> evaluate oc (check_clock st' st) env [e]
      | Nothing -> (st', Rerr (Rabort Rtype_error))
      end
  | res -> res
  end
and
evaluate oc st env [Mat e pes] =
  match evaluate oc st env [e] with
  | (st', Rval v) ->
      evaluate_match oc (check_clock st' st) env (head v) pes Bindv
  | res -> res
  end
and
evaluate oc st env [Let xo e1 e2] =
  match evaluate oc st env [e1] with
  | (st', Rval v) -> evaluate oc (check_clock st' st) <| env with v = opt_bind xo (head v) env.v |> [e2]
  | res -> res
  end
and
evaluate oc st env [Letrec funs e] =
  if allDistinct (map (fun (x,y,z) -> x) funs) then
    evaluate oc st <| env with v = build_rec_env funs env env.v |> [e]
  else
    (st, Rerr (Rabort Rtype_error))
and
evaluate_match oc st env v [] err_v = (st, Rerr (Rraise err_v))
and
evaluate_match oc st env v ((p,e)::pes) err_v  =
  if allDistinct (pat_bindings p []) then
    match pmatch env.c st.refs p v env.v with
    | Match env_v' -> evaluate oc st <| env with v = env_v' |> [e]
    | No_match -> evaluate_match oc st env v pes err_v
    | Match_type_error -> (st, Rerr (Rabort Rtype_error))
    end
  else (st, Rerr (Rabort Rtype_error))

val evaluate_decs : forall 'ffi. oracle 'ffi -> maybe modN -> state 'ffi -> environment v -> list dec -> state 'ffi * flat_env_ctor * result env_val v
let rec
evaluate_decs oc mn st env [] = (st, [], Rval [])
and
evaluate_decs oc mn st env (d1::d2::ds) =
  match evaluate_decs oc mn st env [d1] with
  | (st, new_ctors, Rval new_vals) ->
      match
        evaluate_decs oc mn st (extend_dec_env new_vals new_ctors env) (d2::ds)
      with (st',new_ctors',r) ->
        (st', new_ctors'++new_ctors, combine_dec_result new_vals r)
      end
  | res -> res
  end
and
evaluate_decs oc mn st env [Dlet p e] =
  if allDistinct (pat_bindings p []) then
    match evaluate oc st env [e] with
    | (st', Rval v) ->
        (st',
         [],
         match pmatch env.c st'.refs p (head v) [] with
         | Match new_vals -> Rval new_vals
         | No_match -> Rerr (Rraise Bindv)
         | Match_type_error -> Rerr (Rabort Rtype_error)
         end)
    | (st', Rerr err) -> (st', [], Rerr err)
    end
  else
    (st, [], Rerr (Rabort Rtype_error))
and
evaluate_decs oc mn st env [Dletrec funs] =
  (st,
   [],
   if allDistinct (map (fun (x,y,z) -> x) funs) then
     Rval (build_rec_env funs env [])
   else
     Rerr (Rabort Rtype_error))
and
evaluate_decs oc mn st env [Dtype tds] =
  let new_tdecs = type_defs_to_new_tdecs mn tds in
    if check_dup_ctors tds &&
       disjoint new_tdecs st.defined_types &&
       allDistinct (map (fun (tvs,tn,ctors) -> tn) tds)
    then
      (<| st with defined_types = new_tdecs union st.defined_types |>, build_tdefs mn tds, Rval [])
    else
      (st, [], Rerr (Rabort Rtype_error))
and
evaluate_decs oc mn st env [Dtabbrev tvs tn t] =
  (st, [], Rval [])
and
evaluate_decs oc mn st env [Dexn cn ts] =
  if TypeExn (mk_id mn cn) IN st.defined_types then
    (st, [], Rerr (Rabort Rtype_error))
  else
    (<| st with defined_types = {TypeExn (mk_id mn cn)} union st.defined_types |>,
     [(cn, (length ts, TypeExn (mk_id mn cn)))],
     Rval [])
declare termination_argument evaluate_decs = automatic

val evaluate_tops : forall 'ffi. oracle 'ffi -> state 'ffi -> environment v -> list top -> state 'ffi * env_ctor * result (env_mod * env_val) v
let rec
evaluate_tops oc st env [] = (st, ([],[]), Rval ([],[]))
and
evaluate_tops oc st env (top1::top2::tops) =
  match evaluate_tops oc st env [top1] with
  | (st', new_ctors, Rval (new_mods,new_vals)) ->
      match evaluate_tops oc st' (extend_top_env new_mods new_vals new_ctors env) (top2::tops) with
      | (st'', new_ctors', r) ->
        (st'',
         merge_alist_mod_env new_ctors' new_ctors,
         combine_mod_result new_mods new_vals r)
      end
  | res -> res
  end
and
evaluate_tops oc st env [Tdec d] =
  match evaluate_decs oc Nothing st env [d] with
  | (st', new_ctors, Rval new_vals) ->
      (st', ([],new_ctors), Rval ([],new_vals))
  | (st', new_ctors, Rerr err) ->
      (st', ([],[]), Rerr err)
  end
and
evaluate_tops oc st env [Tmod mn specs ds] =
  if not (mn IN st.defined_mods) && no_dup_types ds
  then
    match evaluate_decs oc (Just mn) st env ds with
    | (st', new_ctors, r) ->
        (<| st' with defined_mods = {mn} union st'.defined_mods |>,
         ([(mn,new_ctors)],[]),
         match r with
         | Rval new_vals -> Rval ([(mn,new_vals)],[])
         | Rerr err -> Rerr err
         end)
    end
  else
    (st, ([],[]), Rerr (Rabort Rtype_error))
declare termination_argument evaluate_tops = automatic

val evaluate_prog : forall 'ffi. oracle 'ffi -> state 'ffi -> environment v -> prog -> state 'ffi * env_ctor * result (env_mod * env_val) v
let
evaluate_prog oc st env prog =
  if no_dup_mods prog st.defined_mods && no_dup_top_types prog st.defined_types then
    evaluate_tops oc st env prog
  else
    (st, ([],[]), Rerr (Rabort Rtype_error))
