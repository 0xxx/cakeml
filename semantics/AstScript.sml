(*Generated by Lem from semantics/ast.lem.*)
open bossLib Theory Parse res_quanTheory
open finite_mapTheory listTheory pairTheory pred_setTheory integerTheory
open set_relationTheory sortingTheory stringTheory wordsTheory

val _ = new_theory "Ast"

open MiniMLTheory TokensTheory

(* An AST that can be the result of parsing, and then elaborated into the type
 * annotated AST in miniML.lem *)

(*open MiniML*)

val _ = Hol_datatype `
 ast_pat =
    Ast_Pvar of varN
  | Ast_Plit of lit
  | Ast_Pcon of conN => ast_pat list
  | Ast_Pref of ast_pat`;


val _ = Hol_datatype `
 error =
    Bind_error
  | Div_error
  | Int_error of int`;


val _ = Hol_datatype `
 ast_exp =
    Ast_Raise of error
  | Ast_Handle of ast_exp => varN => ast_exp
  | Ast_Lit of lit
  | Ast_Var of varN
  | Ast_Fun of varN => ast_exp
  | Ast_App of ast_exp => ast_exp
  | Ast_Log of log => ast_exp => ast_exp
  | Ast_If of ast_exp => ast_exp => ast_exp
  | Ast_Mat of ast_exp => (ast_pat # ast_exp) list
  | Ast_Let of varN => ast_exp => ast_exp
  | Ast_Letrec of (varN # varN # ast_exp) list => ast_exp`;


val _ = Hol_datatype `
 ast_src_t =
    Ast_src_Tvar of tvarN
  | Ast_src_Tapp of ast_src_t list => typeN
  | Ast_src_Tfn of ast_src_t => ast_src_t`;


val _ = type_abbrev( "ast_type_def" , ``: ( tvarN list # typeN # (conN # ast_src_t list) list) list``);

val _ = Hol_datatype `
 ast_dec =
    Ast_Dlet of ast_pat => ast_exp
  | Ast_Dletrec of (varN # varN # exp) list
  | Ast_Dtype of type_def`;


val _ = type_abbrev( "ast_decs" , ``: ast_dec list``);

val _ = Hol_datatype `
 ast_spec =
    Ast_Sval of ast_src_t
  | Ast_Stype of ast_type_def
  | Ast_Stype_opq of typeN`;


val _ = type_abbrev( "ast_specs" , ``: ast_spec list``);

val _ = Hol_datatype `
 ast_top =
    Ast_Tmodule of mvarN => ast_specs => ast_decs
  | Ast_Tdec of dec`;


val _ = type_abbrev( "ast_prog" , ``: ast_top list``);
val _ = export_theory()

