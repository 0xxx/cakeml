open import Pervasives
open import Ast

type alist 'k 'v = list ('k * 'v)

type environment 'n 'v =
  Bind of alist 'n 'v * alist modN (environment 'n 'v)

val elookup : forall 'v 'n. Eq 'n => environment 'n 'v -> id 'n -> maybe 'v
let rec elookup (Bind v m) (Short n) = List.lookup n v
    and elookup (Bind v m) (Long mn id) =
      match List.lookup mn m with
      | Nothing -> Nothing
      | Just env -> elookup env id
      end

val eempty : forall 'v 'n. environment 'n 'v
let eempty = Bind [] []

val emerge : forall 'v 'n. environment 'n 'v -> environment 'n 'v -> environment 'n 'v
let emerge (Bind v1 m1) (Bind v2 m2) = Bind (v1 ++ v2) (m1 ++ m2)

val elift : forall 'v 'n. modN -> environment 'n 'v -> environment 'n 'v
let elift mn env = Bind [] [(mn, env)]

val alist_to_env : forall 'v 'n. alist 'n 'v -> environment 'n 'v
let alist_to_env a = Bind a []

val ebind : forall 'v 'n. 'n -> 'v -> environment 'n 'v -> environment 'n 'v
let ebind k x (Bind v m) = Bind ((k,x)::v) m

val eoptbind : forall 'v 'n. maybe 'n -> 'v -> environment 'n 'v -> environment 'n 'v
let eoptbind n x env =
  match n with
  | Nothing -> env
  | Just n' -> ebind n' x env
  end
