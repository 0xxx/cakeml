(*Generated by Lem from elab.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasives_extraTheory libTheory astTheory;

val _ = numLib.prefer_num();



val _ = new_theory "elab"

(*open import Pervasives_extra*)
(*open import Lib*)
(*open import Ast*)

val _ = Hol_datatype `
 ast_t =
    (* 'a *)
    Ast_Tvar of tvarN
    (* t *)
    (* num t *)
    (* (num,bool) t *)
  | Ast_Tapp of ast_t list =>  ( typeN id)option
    (* t -> t *)
  | Ast_Tfn of ast_t => ast_t`;


(* type t = C of t1 * t2 | D of t2  * t3
 * and 'a u = E of 'a
 * and ('a,'b) v = F of 'b u | G of 'a u *)
val _ = type_abbrev( "ast_type_def" , ``: ( tvarN list # typeN # (conN # ast_t list) list) list``);

val _ = Hol_datatype `
 ast_dec =
    (* val (C(x,y)) = C(1,2) *) 
    Ast_Dlet of pat => exp
    (* fun f x = e and g y = f *) 
  | Ast_Dletrec of (varN # varN # exp) list
    (* see above *)
  | Ast_Dtype of ast_type_def
  | Ast_Dexn of conN => ast_t list`;


val _ = type_abbrev( "ast_decs" , ``: ast_dec list``);

val _ = Hol_datatype `
 ast_spec =
    Ast_Sval of varN => ast_t
  | Ast_Stype of ast_type_def
  | Ast_Stype_opq of tvarN list => typeN
  | Ast_Sexn of conN => ast_t list`;


val _ = type_abbrev( "ast_specs" , ``: ast_spec list``);

val _ = Hol_datatype `
 ast_top =
    Ast_Tmod of modN =>  ast_specs option => ast_decs
  | Ast_Tdec of ast_dec`;


val _ = type_abbrev( "ast_prog" , ``: ast_top list``);

val _ = type_abbrev( "tdef_env" , ``: (typeN, ast$tc0) env``);

(*val elab_t : tdef_env -> ast_t -> t*)
(*val elab_dec : maybe modN -> tdef_env -> ast_dec -> tdef_env * dec*)
(*val elab_decs : maybe modN -> tdef_env -> list ast_dec -> tdef_env * list dec*)
(*val elab_spec : maybe modN -> tdef_env -> list ast_spec -> list spec*)
(*val elab_top : tdef_env -> ast_top -> tdef_env * top*)
(*val elab_prog : tdef_env -> list ast_top -> tdef_env * prog*)

 val elab_t_defn = Hol_defn "elab_t" `

(elab_t type_bound (Ast_Tvar n) = (Tvar n))
/\
(elab_t type_bound (Ast_Tfn t1 t2) =  
(Tfn (elab_t type_bound t1) (elab_t type_bound t2)))
/\
(elab_t type_bound (Ast_Tapp ts NONE) =  
(let ts' = (MAP (elab_t type_bound) ts) in
    Tapp ts' TC_tup))
/\
(elab_t type_bound (Ast_Tapp ts (SOME (Long m tn))) =  
(let ts' = (MAP (elab_t type_bound) ts) in
    Tapp ts' (TC_name (Long m tn))))
/\
(elab_t type_bound (Ast_Tapp ts (SOME (Short tn))) =  
(let ts' = (MAP (elab_t type_bound) ts) in
    (case lookup tn type_bound of
        NONE => Tapp ts' (TC_name (Short tn))
      | SOME tc0 => Tapp ts' tc0
    )))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn elab_t_defn;

val _ = Define `
 (elab_td type_bound (tvs,tn,ctors) =
  (tvs, tn, MAP (\ (cn,t) .  (cn, MAP (elab_t type_bound) t)) ctors))`;


 val _ = Define `

(elab_dec mn type_bound (Ast_Dlet p e) =
  ([], Dlet p e))
/\
(elab_dec mn type_bound (Ast_Dletrec funs) =
  ([], Dletrec funs))
/\
(elab_dec mn type_bound (Ast_Dtype t) =  
 (let type_bound' = (MAP (\ (tvs,tn,ctors) .  (tn, TC_name (mk_id mn tn))) t) in
  (type_bound',
   Dtype (MAP (elab_td (merge type_bound' type_bound)) t))))
/\
(elab_dec mn type_bound (Ast_Dexn cn ts) =
  (emp,
   Dexn cn (MAP (elab_t type_bound) ts)))`;


 val _ = Define `

(elab_decs mn type_bound [] = ([],[]))
/\
(elab_decs mn type_bound (d::ds) =  
 (let (type_bound', d') = (elab_dec mn type_bound d) in
  let (type_bound'',ds') =    
 (elab_decs mn (merge type_bound' type_bound) ds) 
  in
    (merge type_bound'' type_bound', (d'::ds'))))`;


 val _ = Define `

(elab_spec mn type_bound [] = ([]))
/\
(elab_spec mn type_bound (Ast_Sval x t::spec) =  
(Sval x (elab_t type_bound t) :: elab_spec mn type_bound spec))
/\
(elab_spec mn type_bound (Ast_Stype td :: spec) =  
(let type_bound' = (MAP (\ (tvs,tn,ctors) .  (tn, TC_name (mk_id mn tn))) td) in
    Stype (MAP (elab_td (merge type_bound' type_bound)) td) :: elab_spec mn (merge type_bound' type_bound) spec))
/\
(elab_spec mn type_bound (Ast_Stype_opq tvs tn::spec) =  
(Stype_opq tvs tn :: elab_spec mn ((tn, TC_name (mk_id mn tn))::type_bound) spec))
/\
(elab_spec mn type_bound (Ast_Sexn cn ts::spec) =  
(Sexn cn (MAP (elab_t type_bound) ts) :: elab_spec mn type_bound spec))`;


 val _ = Define `

(elab_top type_bound (Ast_Tdec d) =  
(let (type_bound', d') = (elab_dec NONE type_bound d) in
      (type_bound', Tdec d')))
/\
(elab_top type_bound (Ast_Tmod mn spec ds) =  
(let (type_bound',ds') = (elab_decs (SOME mn) type_bound ds) in
      (type_bound,Tmod mn (OPTION_MAP (elab_spec (SOME mn) type_bound) spec) ds')))`;


 val _ = Define `

(elab_prog type_bound [] = ([],[]))
/\
(elab_prog type_bound (top::prog) =  
(let (type_bound',top') = (elab_top type_bound top) in
  let (type_bound'',prog') =    
 (elab_prog (merge type_bound' type_bound) prog)
  in
    (merge type_bound'' type_bound', (top'::prog'))))`;

      
val _ = export_theory()

