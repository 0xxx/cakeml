open import Pervasives

(* TODO: look for these in the built-in library *)

val int_to_num : integer -> nat
declare hol target_rep function int_to_num = `Num`

val num_to_string : nat -> string
declare hol target_rep function num_to_string = `num_to_dec_string`

val neg : integer -> integer
declare hol target_rep function neg = `int_neg`

val all_distinct : forall 'a. list 'a -> bool
declare hol    target_rep function all_distinct = `ALL_DISTINCT`

val rtc : forall 'a. ('a -> 'a -> bool) -> ('a -> 'a -> bool)
declare hol    target_rep function rtc = `RTC`

val count_list : nat -> list nat
declare hol    target_rep function count_list = `COUNT_LIST`

val (^) : string -> string -> string
declare hol target_rep function (^) = infix `++`

(* The builtin List.zip maps to list_combine in HOL, but I want to map to ZIP *)
val ZIP : forall 'a 'b. list 'a -> list 'b -> list ('a * 'b)
let inline {hol} ZIP x y = `ZIP` (x,y)




(* Environments *)
type env 'a 'b = list ('a*'b)

val emp : forall 'a 'b. env 'a 'b
let emp = []

val lookup : forall 'a 'b. Eq 'a => 'a -> env 'a 'b -> maybe 'b
let rec
lookup n [] = Nothing
and
lookup n ((n',v)::e) =
  if n' = n then
    Just v
  else
    lookup n e

val bind : forall 'a 'b. 'a -> 'b -> env 'a 'b -> env 'a 'b
let bind n v e = (n,v)::e

val merge : forall 'a 'b. env 'a 'b -> env 'a 'b -> env 'a 'b
let merge e1 e2 = e1 ++ e2

