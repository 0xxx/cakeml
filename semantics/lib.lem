open import Pervasives

(* TODO: look for these in the built-in library *)


(*
val i : num -> Int.int
let inline {hol} i = Hol.(&)

val int_to_num : int -> num
let inline {hol} int_to_num = Hol.Num

val num_to_string : num -> string
let inline {hol} num_to_string = Hol.num_to_dec_string

val neg : int -> int
let inline {hol} neg = Hol.int_neg
*)

val all_distinct : forall 'a. list 'a -> bool
declare hol    target_rep function all_distinct = `ALL_DISTINCT`

val rtc : forall 'a. ('a -> 'a -> bool) -> ('a -> 'a -> bool)
declare hol    target_rep function rtc = `RTC`

val count_list : nat -> list nat
declare hol    target_rep function count_list = `COUNT_LIST`

val option_map : forall 'a 'b. ('a -> 'b) -> maybe 'a -> maybe 'b
let option_map f x = 
  match x with
    | Nothing -> Nothing
    | Just y -> Just (f y)
  end

(* Change the nth element in the list to 'a *)
val LUPDATE : forall 'a. 'a -> nat -> list 'a -> list 'a
declare hol    target_rep function LUPDATE = `LUPDATE`


(* Environments *)
type env 'a 'b = list ('a*'b)

val emp : forall 'a 'b. env 'a 'b
let emp = []

val lookup : forall 'a 'b. Eq 'a => 'a -> env 'a 'b -> maybe 'b
let rec
lookup n [] = Nothing
and
lookup n ((n',v)::e) =
  if n' = n then
    Just v
  else
    lookup n e

val bind : forall 'a 'b. 'a -> 'b -> env 'a 'b -> env 'a 'b
let bind n v e = (n,v)::e

val merge : forall 'a 'b. env 'a 'b -> env 'a 'b -> env 'a 'b
let merge e1 e2 = e1 ++ e2

