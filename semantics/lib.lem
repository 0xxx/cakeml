open import Pervasives
import List_extra
import String

(* TODO: look for these in the built-in library *)

val rtc : forall 'a. ('a -> 'a -> bool) -> ('a -> 'a -> bool)
declare hol    target_rep function rtc = `RTC`

val disjoint : forall 'a. set 'a -> set 'a -> bool
declare hol    target_rep function disjoint = `DISJOINT`

val all2 : forall 'a 'b. ('a -> 'b -> bool) -> list 'a -> list 'b -> bool

declare hol    target_rep function all2 = `EVERY2`

let el_check n ls = if n < List.length ls then Just (List_extra.nth ls n) else Nothing

val num_fold : forall 'a. ('a -> 'a) -> 'a -> nat -> 'a
let rec num_fold f a n = if n = 0 then a else num_fold f (f a) (n-1)
declare termination_argument num_fold = automatic

let rec the _ (Just x) = x and the x Nothing = x

val fapply : forall 'a 'b. MapKeyType 'b => 'a -> 'b -> Map.map 'b 'a -> 'a
let fapply d x f = match Map.lookup x f with Just d -> d | Nothing -> d end

let rec
lunion [] s = s
and
lunion (x::xs) s =
  if List.elem x s
  then lunion xs s
  else x::(lunion xs s)

(* TODO: proper support for nat sets as sptrees... *)
open import {hol} `sptreeTheory`
type nat_set
declare hol target_rep type nat_set = `spt` unit
val nat_set_empty : nat_set
val nat_set_insert : nat_set -> nat -> nat_set
val nat_set_to_set : nat_set -> set nat
val nat_set_elem : nat_set -> nat -> bool
val nat_set_from_list : list nat -> nat_set
declare hol target_rep function nat_set_empty = `sptree$LN`
declare hol target_rep function nat_set_insert s n = `sptree$insert` n () s
declare hol target_rep function nat_set_to_set s = `sptree$domain` s
declare hol target_rep function nat_set_elem s n = n IN (nat_set_to_set s)
declare hol target_rep function nat_set_from_list = List.foldl nat_set_insert nat_set_empty

(* TODO: proper support for words... *)
open import {hol} `wordsTheory`
type word8
declare hol target_rep type word8 = `word8`
val natFromWord8 : word8 -> nat
declare hol target_rep function natFromWord8 = `w2n`
val word_to_hex_string : word8 -> string
declare hol target_rep function word_to_hex_string = `word_to_hex_string`

(* The builtin List.zip maps to list_combine in HOL, but I want to map to ZIP *)
val ZIP : forall 'a 'b. list 'a -> list 'b -> list ('a * 'b)
let inline ZIP = List_extra.zipSameLength

open import {hol} `alistTheory`
type alist 'a 'b = list ('a * 'b)
declare hol target_rep function lookup x y = `ALOOKUP` y x

val opt_bind : forall 'a 'b. maybe 'a -> 'b -> alist 'a 'b -> alist 'a 'b
let opt_bind n v e =
  match n with 
    | Nothing -> e
    | Just n' -> (n',v)::e
  end

(* Lists of indices *)

let rec
lshift (n : nat) ls =
  List.map (fun v -> v - n) (List.filter (fun v -> n <= v) ls)
