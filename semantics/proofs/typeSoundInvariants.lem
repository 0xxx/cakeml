(* Type system for values. The invariant that is used for type soundness. *)

open import Pervasives
open import Lib
open import Ast
open import SemanticPrimitives
open import TypeSystem
import List_extra

let mof env = env.SemanticPrimitives.m
let cof env = env.SemanticPrimitives.c
let vof env = env.SemanticPrimitives.v
let dmof env = env.SemanticPrimitives.defined_mods
let dtof env = env.SemanticPrimitives.defined_types
declare hol target_rep function mof env = `environment_m` env
declare hol target_rep function cof env = `environment_c` env
declare hol target_rep function vof env = `environment_v` env
declare hol target_rep function dmof env = `state_defined_mods` env
declare hol target_rep function dtof env = `state_defined_types` env

type store_t = Ref_t of t | W8array_t | Varray_t of t

(* Store typing *)
type tenvS = Map.map nat store_t

(* Check that the type names map to valid types *)
val flat_tenv_tabbrev_ok : Map.map typeN (list tvarN * t) -> bool
let flat_tenv_tabbrev_ok tenv_tabbrev =
  Map.all (fun tn (tvs,t) -> check_freevars 0 tvs t) tenv_tabbrev

val tenv_tabbrev_ok : mod_env typeN (list tvarN * t) -> bool
let tenv_tabbrev_ok (mtenvT, tenvT) =
  Map.all (fun _ tenvT -> flat_tenv_tabbrev_ok tenvT) mtenvT &&
  flat_tenv_tabbrev_ok tenvT

val flat_tenv_ctor_ok : flat_tenv_ctor -> bool
let flat_tenv_ctor_ok tenv_ctor =
  List.all (fun (cn,(tvs,ts,tn)) -> List.all (check_freevars 0 tvs) ts) tenv_ctor

val tenv_ctor_ok : tenv_ctor -> bool
let tenv_ctor_ok (mtenvC, tenvC) =
  List.all (fun (_,tenvC) -> flat_tenv_ctor_ok tenvC) mtenvC &&
  flat_tenv_ctor_ok tenvC

let rec
tenv_val_ok Empty = true
and
tenv_val_ok (Bind_tvar n tenv) = tenv_val_ok tenv
and
tenv_val_ok (Bind_name x tvs t tenv) =
  check_freevars (tvs + num_tvs tenv) [] t && tenv_val_ok tenv

declare termination_argument tenv_val_ok = automatic

val tenv_mod_ok : Map.map modN (alist varN (nat * t)) -> bool
let tenv_mod_ok tenvM = Map.all (fun mn tenv -> tenv_val_ok (bind_var_list2 tenv Empty)) tenvM

val tenv_ok : type_environment -> bool
let tenv_ok tenv =
  tenv_tabbrev_ok tenv.t &&
  tenv_mod_ok tenv.m &&
  tenv_ctor_ok tenv.c

val new_dec_tenv_ok : new_dec_tenv -> bool
let new_dec_tenv_ok (t,c,v) =
  flat_tenv_tabbrev_ok t &&
  flat_tenv_ctor_ok c &&
  List.all (fun (_,(n,t)) -> check_freevars n [] t) v

(* Global constructor type environments keyed by constructor name and type *)
type ctMap = Map.map (conN * tid_or_exn) (list tvarN * list t)

val ctMap_ok : ctMap -> bool
let ctMap_ok ctMap =
  Map.all (fun (cn,tn) (tvs,ts) -> List.all (check_freevars 0 tvs) ts) ctMap


val type_decs_to_ctMap : maybe modN -> type_def -> ctMap
let type_decs_to_ctMap mn tds =
  Map.fromList
    (List.concat (List.map (fun (tvs,tn,ctors) -> List.map (fun (cn,ts) -> ((cn,TypeId (mk_id mn tn)), (tvs,ts))) ctors) tds))

(* Get the modules that are used by the type and exception definitions *)
val decls_to_mods : decls -> set (maybe modN)
let decls_to_mods d =
  { Just mn | forall mn | exists tn. (Long mn tn) IN d.defined_types } union
  { Just mn | forall mn | exists cn. (Long mn cn) IN d.defined_exns } union
  { Nothing | forall tn | Short tn IN d.defined_types } union
  { Nothing | forall tn | Short tn IN d.defined_exns }

(* Check that a constructor type environment is consistent with a runtime type
 * enviroment, using the full type keyed constructor type environment to ensure
 * that the correct types are used. *)
val consistent_con_env : ctMap -> env_ctor -> tenv_ctor -> bool
let consistent_con_env ctMap env_c tenvC =
  (forall cn n t.
    lookup_alist_mod_env cn env_c = Just (n, t)
    -->
    exists tvs ts.
      lookup_alist_mod_env cn tenvC = Just (tvs, ts, t) &&
      Map.lookup (id_to_n cn,t) ctMap = Just (tvs, ts) &&
      List.length ts = n)
  &&
  (forall cn.
    lookup_alist_mod_env cn env_c = Nothing
    -->
    lookup_alist_mod_env cn tenvC = Nothing)

(* A value has a type *)
(* The number is how many deBruijn type variables are bound in the context. *)
val type_v : nat -> ctMap -> tenvS -> v -> t -> bool

(* A value environment has a corresponding type environment.  Since all of the
 * entries in the environment are values, and values have no free variables,
 * each entry in the environment can be typed in the empty environment (if at
 * all) *)
val type_env : ctMap -> tenvS -> env_val -> tenv_val -> bool

(* The type of the store *)
val type_s : ctMap -> tenvS -> store v -> bool

indreln
[type_v : nat -> ctMap -> tenvS -> v -> t -> bool]
and
[type_env : ctMap -> tenvS -> env_val -> tenv_val -> bool]
and
[consistent_mod_env : tenvS -> ctMap -> env_mod -> Map.map modN (alist varN (nat * t)) -> bool]

lit_int : forall tvs cenv senv n.
true
==>
type_v tvs cenv senv (Litv (IntLit n)) Tint

and

lit_char : forall tvs cenv senv c.
true
==>
type_v tvs cenv senv (Litv (Char c)) Tchar

and

lit_string : forall tvs cenv senv s.
true
==>
type_v tvs cenv senv (Litv (StrLit s)) Tstring

and

lit_word8 : forall tvs cenv senv w.
true
==>
type_v tvs cenv senv (Litv (Word8 w)) Tword8

and

lit_word64 : forall tvs cenv senv w.
true
==>
type_v tvs cenv senv (Litv (Word64 w)) Tword64

and

conv_some : forall tvs cenv senv cn vs tvs' tn ts' ts.
List.all (check_freevars tvs []) ts' &&
List.length tvs' = List.length ts' &&
all2 (type_v tvs cenv senv) vs (List.map (type_subst (Map.fromList (List.reverse (List_extra.zipSameLength tvs' ts')))) ts) &&
Map.lookup (cn, tn) cenv = Just (tvs',ts)
==>
type_v tvs cenv senv (Conv (Just (cn,tn)) vs) (Tapp ts' (tid_exn_to_tc tn))

and

conv_none : forall tvs cenv senv vs ts.
all2 (type_v tvs cenv senv) vs ts
==>
type_v tvs cenv senv (Conv Nothing vs) (Tapp ts TC_tup)

and

closure : forall tvs ctMap senv env tenv n e t1 t2.
tenv_ok tenv &&
consistent_mod_env senv ctMap (mof env) tenv.m &&
consistent_con_env ctMap (cof env) tenv.c &&
type_env ctMap senv (vof env) tenv.v &&
check_freevars tvs [] t1 &&
type_e <|tenv with v = Bind_name n 0 t1 (bind_tvar tvs tenv.v)|> e t2
==>
type_v tvs ctMap senv (Closure env n e) (Tfn t1 t2)

and

recclosure : forall tvs ctMap senv env funs n t tenv tenv'.
tenv_ok tenv &&
consistent_mod_env senv ctMap (mof env) tenv.m &&
consistent_con_env ctMap (cof env) tenv.c &&
type_env ctMap senv (vof env) tenv.v &&
type_funs <|tenv with v = bind_var_list 0 tenv' (bind_tvar tvs tenv.v)|> funs tenv' &&
lookup n tenv' = Just t &&
allDistinct (List.map (fun (f,x,e) -> f) funs) &&
List.elem n (List.map (fun (f,x,e) -> f) funs)
==>
type_v tvs ctMap senv (Recclosure env funs n) t

and

loc1 : forall tvs cenv senv n t.
check_freevars 0 [] t &&
Map.lookup n senv = Just (Ref_t t)
==>
type_v tvs cenv senv (Loc n) (Tref t)

and

loc2 : forall tvs cenv senv n.
Map.lookup n senv = Just W8array_t
==>
type_v tvs cenv senv (Loc n) Tword8array

and

loc3 : forall tvs cenv senv n t.
check_freevars 0 [] t &&
Map.lookup n senv = Just (Varray_t t)
==>
type_v tvs cenv senv (Loc n) (Tapp [t] TC_array)

and

vec : forall tvs cenv senv vs t.
check_freevars 0 [] t &&
List.all (fun v -> type_v tvs cenv senv v t) vs
==>
type_v tvs cenv senv (Vectorv vs) (Tapp [t] TC_vector)

and

empty : forall cenv senv.
true
==>
type_env cenv senv [] Empty

and

bind : forall cenv senv n v env t tenv tvs.
type_v tvs cenv senv v t &&
type_env cenv senv env tenv
==>
type_env cenv senv ((n,v)::env) (Bind_name n tvs t tenv)

and

empty : forall tenvS tenvC.
true
==>
consistent_mod_env tenvS tenvC [] Map.empty

and

cons : forall tenvS tenvC mn env menv tenv tenvM.
type_env tenvC tenvS env (bind_var_list2 tenv Empty) &&
consistent_mod_env tenvS tenvC menv tenvM
==>
consistent_mod_env tenvS tenvC ((mn,env)::menv) (Map.insert mn tenv tenvM)

let rec type_sv cenv senv (Refv v) (Ref_t t) = type_v 0 cenv senv v t
and type_sv cenv senv (W8array v) W8array_t = true
and type_sv cenv senv (Varray vs) (Varray_t t) =
    List.all (fun v -> type_v 0 cenv senv v t) vs
and type_sv _ _ _ _ = false

let type_s cenv senv s =
  forall l.
    ((exists st. Map.lookup l senv = Just st) = (exists v. store_lookup l s = Just v)) &&
    (forall st sv. ((Map.lookup l senv = Just st) && (store_lookup l s = Just sv)) -->
       type_sv cenv senv sv st)

(* The first argument has strictly more bindings than the second. *)
val weakM_def : Map.map modN (alist varN (nat * t)) -> Map.map modN (alist varN (nat * t)) -> bool
let weakM tenvM tenvM' =
  forall mn tenv'.
    (Map.lookup mn tenvM' = Just tenv')
    -->
    (exists tenv. (Map.lookup mn tenvM = Just tenv) && weakE tenv tenv')

val weakC_def : tenv_ctor -> tenv_ctor -> bool
let weakC tenvC tenvC' =
  flat_weakC (snd tenvC) (snd tenvC') &&
  forall mn flat_tenvC'.
    lookup mn (fst tenvC') = Just flat_tenvC'
    -->
    exists flat_tenvC. lookup mn (fst tenvC) = Just flat_tenvC && flat_weakC flat_tenvC flat_tenvC'

(* The global constructor type environment has the primitive exceptions in it *)
val ctMap_has_exns : ctMap -> bool
let ctMap_has_exns ctMap =
  (Map.lookup ("Bind", TypeExn (Short "Bind")) ctMap = Just ([],[])) &&
  (Map.lookup ("Chr", TypeExn (Short "Chr")) ctMap = Just ([],[])) &&
  (Map.lookup ("Div", TypeExn (Short "Div")) ctMap = Just ([],[])) &&
  (Map.lookup ("Subscript", TypeExn (Short "Subscript")) ctMap = Just ([],[]))

(* The global constructor type environment has the list primitives in it *)
val ctMap_has_lists : ctMap -> bool
let ctMap_has_lists ctMap =
  (Map.lookup ("nil", TypeId (Short "list")) ctMap = Just (["'a"],[])) &&
  (Map.lookup ("::", TypeId (Short "list")) ctMap =
   Just (["'a"],[Tvar "'a"; Tapp [Tvar "'a"] (TC_name (Short "list"))])) &&
  (forall cn. cn <> "::" && cn <> "nil" --> Map.lookup (cn, TypeId (Short "list")) ctMap = Nothing)

(* The global constructor type environment has the bool primitives in it *)
val ctMap_has_bools : ctMap -> bool
let ctMap_has_bools ctMap =
  (Map.lookup ("true", TypeId (Short "bool")) ctMap = Just ([],[])) &&
  (Map.lookup ("false", TypeId (Short "bool")) ctMap = Just ([],[])) &&
  (forall cn. cn <> "true" && cn <> "false" --> Map.lookup (cn, TypeId (Short "bool")) ctMap = Nothing)

val good_ctMap : ctMap -> bool
let good_ctMap ctMap =
  ctMap_ok ctMap &&
  ctMap_has_bools ctMap &&
  ctMap_has_exns ctMap &&
  ctMap_has_lists ctMap

(* The types and exceptions that are missing are all declared in modules. *)
val weak_decls_only_mods : decls -> decls -> bool
let  weak_decls_only_mods d1 d2 =
    (forall tn.
       (Short tn IN d1.defined_types --> Short tn IN d2.defined_types)) &&
    (forall cn.
       (Short cn IN d1.defined_exns --> Short cn IN d2.defined_exns))

(* The run-time declared constructors and exceptions are all either declared in
 * the type system, or from modules that have been declared *)

val consistent_decls : set tid_or_exn -> decls -> bool
let consistent_decls tes d =
  forall (te IN tes).
    match te with
      | TypeExn cid -> cid IN d.defined_exns || exists mn cn. cid = Long mn cn && mn IN d.defined_mods
      | TypeId tid -> tid IN d.defined_types || exists mn tn. tid = Long mn tn && mn IN d.defined_mods
    end

val consistent_ctMap : decls -> ctMap -> bool
let consistent_ctMap d ctMap =
  forall ((cn,tid) IN Map.domain ctMap).
    match tid with
      | TypeId tn -> tn IN d.defined_types
      | TypeExn cn -> cn IN d.defined_exns
    end

val decls_ok : decls -> bool
let decls_ok d =
  decls_to_mods d subset ({Nothing} union Set.map Just d.defined_mods)

val type_all_env : ctMap -> tenvS -> environment v -> type_environment -> bool
let type_all_env ctMap tenvS env tenv =
  consistent_mod_env tenvS ctMap (mof env) tenv.m &&
  consistent_con_env ctMap (cof env) tenv.c &&
  type_env ctMap tenvS (vof env) tenv.v

(* For using the type soundess theorem, we have to know there are good
 * constructor and module type environments that don't have bits hidden by a
 * signature. *)
let type_sound_invariants r (d,tenv,st,env) =
  exists ctMap tenvS decls_no_sig tenvM_no_sig tenvC_no_sig.
    consistent_decls (dtof st) decls_no_sig &&
    consistent_ctMap decls_no_sig ctMap &&
    good_ctMap ctMap &&
    tenv_ok tenv &&
    tenv_mod_ok tenvM_no_sig &&
    type_all_env ctMap tenvS env tenv &&
    type_s ctMap tenvS st.refs &&
    weakM tenvM_no_sig tenv.m &&
    weakC tenvC_no_sig tenv.c &&
    decls_ok decls_no_sig &&
    weak_decls decls_no_sig d &&
    weak_decls_only_mods decls_no_sig d &&
    (forall err. r = Just (Rerr (Rraise err)) --> type_v 0 ctMap tenvS err Texn) &&
    d.defined_mods = (dmof st)

let update_type_sound_inv ((decls1:decls),(tenv:type_environment),(st:state 'ffi),(env:environment v)) decls1' tenvT' tenvM' tenvC' tenv' st' new_ctors r =
  match r with
     | Rval (new_mods, new_vals) ->
         (union_decls decls1' decls1,
          <| t = merge_mod_env tenvT' tenv.t;
             m = Map.(union) tenvM' tenv.m;
             c = merge_alist_mod_env tenvC' tenv.c;
             v = bind_var_list2 tenv' tenv.v |>,
          st',extend_top_env new_mods new_vals new_ctors env)
     | Rerr _ -> (union_decls decls1' decls1,tenv,st',env)
  end
