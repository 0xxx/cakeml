open import Pervasives_extra
open import Lib
open import Ast 
open import SemanticPrimitives
open import Ffi

(* To get the definition of expression divergence to use in defining definition
 * divergence *)
open import SmallStep

(* ------------------------ Big step semantics -------------------------- *)

(* If the first argument is true, the big step semantics counts down how many
   functions applications have happened, and raises an exception when the counter
   runs out. *)

indreln [evaluate : bool -> all_env -> count_store_trace v -> exp -> count_store_trace v * result v v -> bool]
and [evaluate_list : bool -> all_env -> count_store_trace v -> list exp -> count_store_trace v * result (list v) v -> bool]
and [evaluate_match : bool -> all_env -> count_store_trace v -> v -> list (pat * exp) -> v -> count_store_trace v * result v v -> bool]

lit : forall ck env l s.
true
==>
evaluate ck env s (Lit l) (s, Rval (Litv l))

and

raise1 : forall ck env e s1 s2 v.
evaluate ck s1 env e (s2, Rval v)
==>
evaluate ck s1 env (Raise e) (s2, Rerr (Rraise v))

and

raise2 : forall ck env e s1 s2 err.
evaluate ck s1 env e (s2, Rerr err)
==>
evaluate ck s1 env (Raise e) (s2, Rerr err)

and

handle1 : forall ck s1 s2 env e v pes.
evaluate ck s1 env e (s2, Rval v)
==>
evaluate ck s1 env (Handle e pes) (s2, Rval v)

and

handle2 : forall ck s1 s2 env e pes v bv.
evaluate ck env s1 e (s2, Rerr (Rraise v)) &&
evaluate_match ck env s2 v pes v bv
==>
evaluate ck env s1 (Handle e pes) bv

and

handle3 : forall ck s1 s2 env e pes a.
evaluate ck env s1 e (s2, Rerr (Rabort a))
==>
evaluate ck env s1 (Handle e pes) (s2, Rerr (Rabort a))

and

con1 : forall ck env cn es vs s s' v.
do_con_check (all_env_to_cenv env) cn (List.length es) &&
build_conv (all_env_to_cenv env) cn (List.reverse vs) = Just v &&
evaluate_list ck env s (List.reverse es) (s', Rval vs)
==>
evaluate ck env s (Con cn es) (s', Rval v)

and

con2 : forall ck env cn es s.
not (do_con_check (all_env_to_cenv env) cn (List.length es))
==>
evaluate ck env s (Con cn es) (s, Rerr (Rabort Rtype_error))

and

con3 : forall ck env cn es err s s'.
do_con_check (all_env_to_cenv env) cn (List.length es) &&
evaluate_list ck env s (List.reverse es) (s', Rerr err)
==>
evaluate ck env s (Con cn es) (s', Rerr err)

and

var1 : forall ck env n v s.
(lookup_var_id n env = Just v)
==>
evaluate ck env s (Var n) (s, Rval v)

and

var2 : forall ck env n s.
(lookup_var_id n env = Nothing)
==>
evaluate ck env s (Var n) (s, Rerr (Rabort Rtype_error))

and

fn : forall ck env n e s.
true
==>
evaluate ck env s (Fun n e) (s, Rval (Closure env n e))

and

app1 : forall ck env es vs env' e bv s1 s2 t2 count.
evaluate_list ck env s1 (List.reverse es) ((count,s2,t2), Rval vs) &&
do_opapp (List.reverse vs) = Just (env', e) &&
(ck --> count <> 0) &&
evaluate ck env' ((if ck then count-1 else count),s2,t2) e bv
==>
evaluate ck env s1 (App Opapp es) bv

and

app2 : forall ck env es vs env' e s1 s2 t2 count.
evaluate_list ck env s1 (List.reverse es) ((count,s2,t2), Rval vs) &&
do_opapp (List.reverse vs) = Just (env', e) &&
count = 0 &&
ck
==>
evaluate ck env s1 (App Opapp es) ((0,s2,t2), Rerr (Rabort Rtimeout_error))

and

app3 : forall ck env es vs s1 s2.
evaluate_list ck env s1 (List.reverse es) (s2, Rval vs) &&
do_opapp (List.reverse vs) = Nothing
==>
evaluate ck env s1 (App Opapp es) (s2, Rerr (Rabort Rtype_error))

and

app4 : forall ck env op es vs res s1 s2 t2 t3 s3 count.
evaluate_list ck env s1 (List.reverse es) ((count,s2,t2), Rval vs) &&
do_app (s2,t2) op (List.reverse vs) = Just ((s3,t3), res) &&
op <> Opapp
==>
evaluate ck env s1 (App op es) ((count,s3,t3), res)

and

app5 : forall ck env op es vs s1 s2 t2 count.
evaluate_list ck env s1 (List.reverse es) ((count,s2,t2), Rval vs) &&
do_app (s2,t2) op (List.reverse vs) = Nothing &&
op <> Opapp
==>
evaluate ck env s1 (App op es) ((count,s2,t2), Rerr (Rabort Rtype_error))

and

app6 : forall ck env op es err s1 s2.
evaluate_list ck env s1 (List.reverse es) (s2, Rerr err)
==>
evaluate ck env s1 (App op es) (s2, Rerr err)

and

log1 : forall ck env op e1 e2 v e' bv s1 s2.
evaluate ck env s1 e1 (s2, Rval v) &&
do_log op v e2 = Just (Exp e') &&
evaluate ck env s2 e' bv
==>
evaluate ck env s1 (Log op e1 e2) bv

and

log2 : forall ck env op e1 e2 v bv s1 s2.
evaluate ck env s1 e1 (s2, Rval v) &&
do_log op v e2 = Just (Val bv)
==>
evaluate ck env s1 (Log op e1 e2) (s2, Rval bv)

and

log3 : forall ck env op e1 e2 v s1 s2.
evaluate ck env s1 e1 (s2, Rval v) &&
(do_log op v e2 = Nothing)
==>
evaluate ck env s1 (Log op e1 e2) (s2, Rerr (Rabort Rtype_error))

and

log4 : forall ck env op e1 e2 err s s'.
evaluate ck env s e1 (s', Rerr err)
==>
evaluate ck env s (Log op e1 e2) (s', Rerr err)

and

if1 : forall ck env e1 e2 e3 v e' bv s1 s2.
evaluate ck env s1 e1 (s2, Rval v) &&
do_if v e2 e3 = Just e' &&
evaluate ck env s2 e' bv
==>
evaluate ck env s1 (If e1 e2 e3) bv

and

if2 : forall ck env e1 e2 e3 v s1 s2.
evaluate ck env s1 e1 (s2, Rval v) &&
do_if v e2 e3 = Nothing
==>
evaluate ck env s1 (If e1 e2 e3) (s2, Rerr (Rabort Rtype_error))

and

if3 : forall ck env e1 e2 e3 err s s'.
evaluate ck env s e1 (s', Rerr err)
==>
evaluate ck env s (If e1 e2 e3) (s', Rerr err)

and

mat1 : forall ck env e pes v bv s1 s2.
evaluate ck env s1 e (s2, Rval v) &&
evaluate_match ck env s2 v pes (Conv (Just ("Bind", TypeExn (Short "Bind"))) []) bv
==>
evaluate ck env s1 (Mat e pes) bv

and

mat2 : forall ck env e pes err s s'.
evaluate ck env s e (s', Rerr err)
==>
evaluate ck env s (Mat e pes) (s', Rerr err)

and

let1 : forall ck menv cenv env n e1 e2 v bv s1 s2.
evaluate ck (menv,cenv,env) s1 e1 (s2, Rval v) &&
evaluate ck (menv,cenv,opt_bind n v env) s2 e2 bv
==>
evaluate ck (menv,cenv,env) s1 (Let n e1 e2) bv

and

let2 : forall ck env n e1 e2 err s s'.
evaluate ck env s e1 (s', Rerr err)
==>
evaluate ck env s (Let n e1 e2) (s', Rerr err)

and

letrec1 : forall ck menv cenv env funs e bv s.
List.allDistinct (List.map (fun (x,y,z) -> x) funs) &&
evaluate ck (menv,cenv,build_rec_env funs (menv,cenv,env) env) s e bv
==>
evaluate ck (menv,cenv,env) s (Letrec funs e) bv

and

letrec2 : forall ck env funs e s.
not (List.allDistinct (List.map (fun (x,y,z) -> x) funs))
==>
evaluate ck env s (Letrec funs e) (s, Rerr (Rabort Rtype_error))

and

empty : forall ck env s.
true
==>
evaluate_list ck env s [] (s, Rval [])

and

cons1 : forall ck env e es v vs s1 s2 s3.
evaluate ck env s1 e (s2, Rval v) &&
evaluate_list ck env s2 es (s3, Rval vs)
==>
evaluate_list ck env s1 (e::es) (s3, Rval (v::vs))

and

cons2 : forall ck env e es err s s'.
evaluate ck env s e (s', Rerr err)
==>
evaluate_list ck env s (e::es) (s', Rerr err)

and

cons3 : forall ck env e es v err s1 s2 s3.
evaluate ck env s1 e (s2, Rval v) &&
evaluate_list ck env s2 es (s3, Rerr err)
==>
evaluate_list ck env s1 (e::es) (s3, Rerr err)

and

mat_empty : forall ck env v err_v s.
true
==>
evaluate_match ck env s v [] err_v (s, Rerr (Rraise err_v))

and

mat_cons1 : forall ck menv cenv env env' v p pes e bv err_v s t count.
List.allDistinct (pat_bindings p []) &&
pmatch cenv s p v env = Match env' &&
evaluate ck (menv,cenv,env') (count,s,t) e bv
==>
evaluate_match ck (menv,cenv,env) (count,s,t) v ((p,e)::pes) err_v bv

and

mat_cons2 : forall ck menv cenv env v p e pes bv s t count err_v.
List.allDistinct (pat_bindings p []) &&
pmatch cenv s p v env = No_match &&
evaluate_match ck (menv,cenv,env) (count,s,t) v pes err_v bv
==>
evaluate_match ck (menv,cenv,env) (count,s,t) v ((p,e)::pes) err_v bv

and

mat_cons3 : forall ck menv cenv env v p e pes s t count err_v.
pmatch cenv s p v env = Match_type_error
==>
evaluate_match ck (menv,cenv,env) (count,s,t) v ((p,e)::pes) err_v ((count,s,t), Rerr (Rabort Rtype_error))

and

mat_cons4 : forall ck env v p e pes s err_v.
not (List.allDistinct (pat_bindings p []))
==>
evaluate_match ck env s v ((p,e)::pes) err_v (s, Rerr (Rabort Rtype_error))

(* The set tid_or_exn part of the state tracks all of the types and exceptions
 * that have been declared *)
indreln [evaluate_dec : bool -> maybe modN -> all_env -> (count_store_trace v * set tid_or_exn) -> dec -> (count_store_trace v * set tid_or_exn) * result (flat_envC * envE) v -> bool]

dlet1 : forall ck mn env p e v env' s1 s2 t2 count tdecs.
evaluate ck env s1 e ((count,s2,t2), Rval v) &&
List.allDistinct (pat_bindings p []) &&
pmatch (all_env_to_cenv env) s2 p v [] = Match env'
==>
evaluate_dec ck mn env (s1,tdecs) (Dlet p e) (((count,s2,t2),tdecs), Rval ([], env'))

and

dlet2 : forall ck mn env p e v s1 s2 t2 count tdecs.
evaluate ck env s1 e ((count,s2,t2), Rval v) &&
List.allDistinct (pat_bindings p []) &&
pmatch (all_env_to_cenv env) s2 p v [] = No_match
==>
evaluate_dec ck mn env (s1,tdecs) (Dlet p e) (((count,s2,t2), tdecs), Rerr (Rraise (Conv (Just ("Bind", TypeExn (Short "Bind"))) [])))

and

dlet3 : forall ck mn env p e v s1 s2 t2 count tdecs.
evaluate ck env s1 e ((count,s2,t2), Rval v) &&
List.allDistinct (pat_bindings p []) &&
pmatch (all_env_to_cenv env) s2 p v [] = Match_type_error
==>
evaluate_dec ck mn env (s1,tdecs) (Dlet p e) (((count,s2,t2),tdecs), Rerr (Rabort Rtype_error))

and

dlet4 : forall ck mn env p e s.
not (List.allDistinct (pat_bindings p []))
==>
evaluate_dec ck mn env s (Dlet p e) (s, Rerr (Rabort Rtype_error))

and

dlet5 : forall ck mn env p e err s s' tdecs.
evaluate ck env s e (s', Rerr err) &&
List.allDistinct (pat_bindings p [])
==>
evaluate_dec ck mn env (s,tdecs) (Dlet p e) ((s',tdecs), Rerr err)

and

dletrec1 : forall ck mn env funs s.
List.allDistinct (List.map (fun (x,y,z) -> x) funs)
==>
evaluate_dec ck mn env s (Dletrec funs) (s, Rval ([], build_rec_env funs env []))

and

dletrec2 : forall ck mn env funs s.
not (List.allDistinct (List.map (fun (x,y,z) -> x) funs))
==>
evaluate_dec ck mn env s (Dletrec funs) (s, Rerr (Rabort Rtype_error))

and

dtype1 : forall ck mn env tds s tdecs new_tdecs.
check_dup_ctors tds &&
new_tdecs = type_defs_to_new_tdecs mn tds &&
disjoint new_tdecs tdecs &&
List.allDistinct (List.map (fun (tvs,tn,ctors) -> tn) tds)
==>
evaluate_dec ck mn env (s,tdecs) (Dtype tds) ((s,new_tdecs union tdecs), Rval (build_tdefs mn tds, []))

and

dtype2 : forall ck mn env tds s tdecs.
not (check_dup_ctors tds) ||
not (disjoint (type_defs_to_new_tdecs mn tds) tdecs) ||
not (List.allDistinct (List.map (fun (tvs,tn,ctors) -> tn) tds))
==>
evaluate_dec ck mn env (s,tdecs) (Dtype tds) ((s,tdecs), Rerr (Rabort Rtype_error))

and

dtabbrev : forall ck mn env tvs tn t s tdecs. 
true
==>
evaluate_dec ck mn env (s,tdecs) (Dtabbrev tvs tn t) ((s,tdecs), Rval ([], []))

and

dexn1 : forall ck mn env cn ts s tdecs.
not (TypeExn (mk_id mn cn) IN tdecs)
==>
evaluate_dec ck mn env (s,tdecs) (Dexn cn ts) ((s, {TypeExn (mk_id mn cn)} union tdecs), Rval ([(cn, (List.length ts, TypeExn (mk_id mn cn)))], []))

and

dexn2 : forall ck mn env cn ts s tdecs.
TypeExn (mk_id mn cn) IN tdecs
==>
evaluate_dec ck mn env (s,tdecs) (Dexn cn ts) ((s,tdecs), Rerr (Rabort Rtype_error))

indreln [evaluate_decs : bool -> maybe modN -> all_env -> (count_store_trace v * set tid_or_exn) -> list dec -> (count_store_trace v * set tid_or_exn) * flat_envC * result envE v -> bool]

empty : forall ck mn env s.
true
==>
evaluate_decs ck mn env s [] (s, [], Rval [])

and

cons1 : forall ck mn s1 s2 env d ds e.
evaluate_dec ck mn env s1 d (s2, Rerr e)
==>
evaluate_decs ck mn env s1 (d::ds) (s2, [], Rerr e)

and

cons2 : forall ck mn s1 s2 s3 menv cenv env d ds new_tds' new_tds new_env r.
evaluate_dec ck mn (menv,cenv,env) s1 d (s2, Rval (new_tds,new_env)) &&
evaluate_decs ck mn (menv, merge_alist_mod_env ([],new_tds) cenv, new_env++env) s2 ds (s3, new_tds', r)
==>
evaluate_decs ck mn (menv,cenv,env) s1 (d::ds) (s3, new_tds' ++ new_tds, combine_dec_result new_env r)


indreln [evaluate_top : bool -> all_env -> (count_store_trace v * set tid_or_exn * set modN) -> top -> (count_store_trace v * set tid_or_exn * set modN) * envC * result (envM * envE) v -> bool]

tdec1 : forall ck s1 s2 env d new_tds new_env tdecls1 tdecls2 mdecls.
evaluate_dec ck Nothing env (s1,tdecls1) d ((s2,tdecls2), Rval (new_tds, new_env))
==>
evaluate_top ck env (s1,tdecls1,mdecls) (Tdec d) ((s2,tdecls2,mdecls), ([],new_tds), Rval ([], new_env))

and

tdec2 : forall ck s1 s2 env d err tdecls1 tdecls2 mdecls.
evaluate_dec ck Nothing env (s1,tdecls1) d ((s2,tdecls2), Rerr err)
==>
evaluate_top ck env (s1,tdecls1,mdecls) (Tdec d) ((s2,tdecls2,mdecls), ([],[]), Rerr err)

and

tmod1 : forall ck s1 s2 env ds mn specs new_tds new_env tdecls1 tdecls2 mdecls.
not (mn IN mdecls) &&
no_dup_types ds &&
evaluate_decs ck (Just mn) env (s1,tdecls1) ds ((s2,tdecls2), new_tds, Rval new_env)
==>
evaluate_top ck env (s1,tdecls1,mdecls) (Tmod mn specs ds) ((s2,tdecls2,{mn} union mdecls), ([(mn,new_tds)], []), Rval ([(mn,new_env)], []))

and

tmod2 : forall ck s1 s2 env ds mn specs new_tds err tdecls1 tdecls2 mdecls.
not (mn IN mdecls) &&
no_dup_types ds &&
evaluate_decs ck (Just mn) env (s1,tdecls1) ds ((s2,tdecls2), new_tds, Rerr err)
==>
evaluate_top ck env (s1,tdecls1,mdecls) (Tmod mn specs ds) ((s2,tdecls2,{mn} union mdecls), ([(mn,new_tds)], []), Rerr err)

and

tmod3 : forall ck s1 env ds mn specs tdecls1 mdecls.
not (no_dup_types ds)
==>
evaluate_top ck env (s1,tdecls1,mdecls) (Tmod mn specs ds) ((s1,tdecls1,mdecls), ([],[]), Rerr (Rabort Rtype_error))

and

tmod4 : forall ck env s mn specs ds tdecls mdecls.
mn IN mdecls
==>
evaluate_top ck env (s,tdecls,mdecls) (Tmod mn specs ds) ((s,tdecls,mdecls), ([],[]), Rerr (Rabort Rtype_error))

indreln [evaluate_prog : bool -> all_env -> (count_store_trace v * set tid_or_exn * set modN) -> prog -> (count_store_trace v * set tid_or_exn * set modN) * envC * result (envM * envE) v -> bool]

empty : forall ck env s.
true
==>
evaluate_prog ck env s [] (s, ([],[]), Rval ([], []))

and

cons1 : forall ck s1 s2 s3 menv cenv env top tops new_mods new_tds new_tds' new_env r.
evaluate_top ck (menv,cenv,env) s1 top (s2, new_tds, Rval (new_mods,new_env)) &&
evaluate_prog ck (new_mods++menv, merge_alist_mod_env new_tds cenv, new_env++env) s2 tops (s3,new_tds',r)
==>
evaluate_prog ck (menv,cenv,env) s1 (top::tops) (s3, merge_alist_mod_env new_tds' new_tds, combine_mod_result new_mods new_env r)

and

cons2 : forall ck s1 s2 env top tops err new_tds.
evaluate_top ck env s1 top (s2, new_tds, Rerr err)
==>
evaluate_prog ck env s1 (top::tops) (s2, new_tds, Rerr err)


val evaluate_whole_prog : bool -> all_env -> (count_store_trace v * set tid_or_exn * set modN) -> prog -> (count_store_trace v * set tid_or_exn * set modN) * envC * result (envM * envE) v -> bool
let evaluate_whole_prog ck env s1 tops (s2, new_tds, res) =
  if no_dup_mods tops s1 && no_dup_top_types tops s1 then
    evaluate_prog ck env s1 tops (s2, new_tds, res)
  else
    s1 = s2 && new_tds = ([],[]) && res = Rerr (Rabort Rtype_error)

let dec_diverges env (st,tdecs) d =
  match d with
    | Dlet p e -> List.allDistinct (pat_bindings p []) && e_diverges env st e
    | Dletrec funs -> false
    | Dtype tds -> false
    | Dtabbrev tvs tn t -> false
    | Dexn cn ts -> false
  end

indreln [decs_diverges : maybe modN -> all_env -> (store_trace v * set tid_or_exn) -> decs -> bool]

cons1 : forall mn st env d ds.
dec_diverges env st d
==>
decs_diverges mn env st (d::ds) 

and

cons2 : forall mn s1 s2 menv cenv env d ds new_tds new_env count tdecs tdecs' t1 t2.
evaluate_dec false mn (menv,cenv,env) ((count,s1,t1),tdecs) d (((count,s2,t2),tdecs'), Rval (new_tds, new_env)) &&
decs_diverges mn (menv,merge_alist_mod_env ([],new_tds) cenv, new_env++env) ((s2,t2),tdecs') ds
==>
decs_diverges mn (menv,cenv,env) ((s1,t1),tdecs) (d::ds)

indreln [top_diverges : all_env -> (store_trace v * set tid_or_exn * set modN) -> top -> bool]

tdec : forall st env d tdecls mdecls.
dec_diverges env (st,tdecls) d
==>
top_diverges env (st,tdecls,mdecls) (Tdec d)

and

tmod : forall env s1 ds mn specs tdecls mdecls.
not (mn IN mdecls) &&
no_dup_types ds &&
decs_diverges (Just mn) env (s1,tdecls) ds
==>
top_diverges env (s1,tdecls,mdecls) (Tmod mn specs ds)

indreln [prog_diverges : all_env -> (store_trace v * set tid_or_exn * set modN) -> prog -> bool]

cons1 : forall st env top tops.
top_diverges env st top
==>
prog_diverges env st (top::tops)

and

cons2 : forall s1 s2 t1 t2 menv cenv env top tops new_mods new_tds new_env tdecs tdecs' mods mods' count.
evaluate_top false (menv,cenv,env) ((count,s1,t1),tdecs,mods) top (((count,s2,t2), tdecs',mods'), new_tds, Rval (new_mods, new_env)) &&
prog_diverges (new_mods++menv, merge_alist_mod_env new_tds cenv, new_env++env) ((s2,t2),tdecs',mods') tops
==>
prog_diverges (menv,cenv,env) ((s1,t1),tdecs,mods) (top::tops)
