open import Pervasives_extra
open import Lib
open import Ast
open import SemanticPrimitives
open import Ffi

(* To get the definition of expression divergence to use in defining definition
 * divergence *)
open import SmallStep

(* ------------------------ Big step semantics -------------------------- *)

(* If the first argument is true, the big step semantics counts down how many
   functions applications have happened, and raises an exception when the counter
   runs out. *)

indreln [evaluate : forall 'ffi. bool -> oracle 'ffi -> environment v -> state 'ffi -> exp -> state 'ffi * result v v -> bool]
and [evaluate_list : forall 'ffi. bool -> oracle 'ffi -> environment v -> state 'ffi -> list exp -> state 'ffi * result (list v) v -> bool]
and [evaluate_match : forall 'ffi. bool -> oracle 'ffi -> environment v -> state 'ffi -> v -> list (pat * exp) -> v -> state 'ffi * result v v -> bool]

lit : forall ck oc env l s.
true
==>
evaluate ck oc env s (Lit l) (s, Rval (Litv l))

and

raise1 : forall ck oc env e s1 s2 v.
evaluate ck oc s1 env e (s2, Rval v)
==>
evaluate ck oc s1 env (Raise e) (s2, Rerr (Rraise v))

and

raise2 : forall ck oc env e s1 s2 err.
evaluate ck oc s1 env e (s2, Rerr err)
==>
evaluate ck oc s1 env (Raise e) (s2, Rerr err)

and

handle1 : forall ck oc s1 s2 env e v pes.
evaluate ck oc s1 env e (s2, Rval v)
==>
evaluate ck oc s1 env (Handle e pes) (s2, Rval v)

and

handle2 : forall ck oc s1 s2 env e pes v bv.
evaluate ck oc env s1 e (s2, Rerr (Rraise v)) &&
evaluate_match ck oc env s2 v pes v bv
==>
evaluate ck oc env s1 (Handle e pes) bv

and

handle3 : forall ck oc s1 s2 env e pes a.
evaluate ck oc env s1 e (s2, Rerr (Rabort a))
==>
evaluate ck oc env s1 (Handle e pes) (s2, Rerr (Rabort a))

and

con1 : forall ck oc env cn es vs s s' v.
do_con_check env.c cn (List.length es) &&
build_conv env.c cn (List.reverse vs) = Just v &&
evaluate_list ck oc env s (List.reverse es) (s', Rval vs)
==>
evaluate ck oc env s (Con cn es) (s', Rval v)

and

con2 : forall ck oc env cn es s.
not (do_con_check env.c cn (List.length es))
==>
evaluate ck oc env s (Con cn es) (s, Rerr (Rabort Rtype_error))

and

con3 : forall ck oc env cn es err s s'.
do_con_check env.c cn (List.length es) &&
evaluate_list ck oc env s (List.reverse es) (s', Rerr err)
==>
evaluate ck oc env s (Con cn es) (s', Rerr err)

and

var1 : forall ck oc env n v s.
lookup_var_id n env = Just v
==>
evaluate ck oc env s (Var n) (s, Rval v)

and

var2 : forall ck oc env n s.
(lookup_var_id n env = Nothing)
==>
evaluate ck oc env s (Var n) (s, Rerr (Rabort Rtype_error))

and

fn : forall ck oc env n e s.
true
==>
evaluate ck oc env s (Fun n e) (s, Rval (Closure env n e))

and

app1 : forall ck oc env es vs env' e bv s1 s2.
evaluate_list ck oc env s1 (List.reverse es) (s2, Rval vs) &&
do_opapp (List.reverse vs) = Just (env', e) &&
(ck --> s2.clock <> 0) &&
evaluate ck oc env' (if ck then <| s2 with clock = s2.clock - 1 |> else s2) e bv
==>
evaluate ck oc env s1 (App Opapp es) bv

and

app2 : forall ck oc env es vs env' e s1 s2.
evaluate_list ck oc env s1 (List.reverse es) (s2, Rval vs) &&
do_opapp (List.reverse vs) = Just (env', e) &&
s2.clock = 0 &&
ck
==>
evaluate ck oc env s1 (App Opapp es) (s2, Rerr (Rabort Rtimeout_error))

and

app3 : forall ck oc env es vs s1 s2.
evaluate_list ck oc env s1 (List.reverse es) (s2, Rval vs) &&
do_opapp (List.reverse vs) = Nothing
==>
evaluate ck oc env s1 (App Opapp es) (s2, Rerr (Rabort Rtype_error))

and

app4 : forall ck oc env op es vs res s1 s2 refs' ffi'.
evaluate_list ck oc env s1 (List.reverse es) (s2, Rval vs) &&
do_app oc (s2.refs,s2.ffi) op (List.reverse vs) = Just ((refs',ffi'), res) &&
op <> Opapp
==>
evaluate ck oc env s1 (App op es) (<| s2 with refs = refs'; ffi =ffi' |>, res)

and

app5 : forall ck oc env op es vs s1 s2.
evaluate_list ck oc env s1 (List.reverse es) (s2, Rval vs) &&
do_app oc (s2.refs,s2.ffi) op (List.reverse vs) = Nothing &&
op <> Opapp
==>
evaluate ck oc env s1 (App op es) (s2, Rerr (Rabort Rtype_error))

and

app6 : forall ck oc env op es err s1 s2.
evaluate_list ck oc env s1 (List.reverse es) (s2, Rerr err)
==>
evaluate ck oc env s1 (App op es) (s2, Rerr err)

and

log1 : forall ck oc env op e1 e2 v e' bv s1 s2.
evaluate ck oc env s1 e1 (s2, Rval v) &&
do_log op v e2 = Just (Exp e') &&
evaluate ck oc env s2 e' bv
==>
evaluate ck oc env s1 (Log op e1 e2) bv

and

log2 : forall ck oc env op e1 e2 v bv s1 s2.
evaluate ck oc env s1 e1 (s2, Rval v) &&
do_log op v e2 = Just (Val bv)
==>
evaluate ck oc env s1 (Log op e1 e2) (s2, Rval bv)

and

log3 : forall ck oc env op e1 e2 v s1 s2.
evaluate ck oc env s1 e1 (s2, Rval v) &&
(do_log op v e2 = Nothing)
==>
evaluate ck oc env s1 (Log op e1 e2) (s2, Rerr (Rabort Rtype_error))

and

log4 : forall ck oc env op e1 e2 err s s'.
evaluate ck oc env s e1 (s', Rerr err)
==>
evaluate ck oc env s (Log op e1 e2) (s', Rerr err)

and

if1 : forall ck oc env e1 e2 e3 v e' bv s1 s2.
evaluate ck oc env s1 e1 (s2, Rval v) &&
do_if v e2 e3 = Just e' &&
evaluate ck oc env s2 e' bv
==>
evaluate ck oc env s1 (If e1 e2 e3) bv

and

if2 : forall ck oc env e1 e2 e3 v s1 s2.
evaluate ck oc env s1 e1 (s2, Rval v) &&
do_if v e2 e3 = Nothing
==>
evaluate ck oc env s1 (If e1 e2 e3) (s2, Rerr (Rabort Rtype_error))

and

if3 : forall ck oc env e1 e2 e3 err s s'.
evaluate ck oc env s e1 (s', Rerr err)
==>
evaluate ck oc env s (If e1 e2 e3) (s', Rerr err)

and

mat1 : forall ck oc env e pes v bv s1 s2.
evaluate ck oc env s1 e (s2, Rval v) &&
evaluate_match ck oc env s2 v pes (Conv (Just ("Bind", TypeExn (Short "Bind"))) []) bv
==>
evaluate ck oc env s1 (Mat e pes) bv

and

mat2 : forall ck oc env e pes err s s'.
evaluate ck oc env s e (s', Rerr err)
==>
evaluate ck oc env s (Mat e pes) (s', Rerr err)

and

let1 : forall ck oc env n e1 e2 v bv s1 s2.
evaluate ck oc env s1 e1 (s2, Rval v) &&
evaluate ck oc <| env with v = opt_bind n v env.v |> s2 e2 bv
==>
evaluate ck oc env s1 (Let n e1 e2) bv

and

let2 : forall ck oc env n e1 e2 err s s'.
evaluate ck oc env s e1 (s', Rerr err)
==>
evaluate ck oc env s (Let n e1 e2) (s', Rerr err)

and

letrec1 : forall ck oc env funs e bv s.
List.allDistinct (List.map (fun (x,y,z) -> x) funs) &&
evaluate ck oc <| env with v = build_rec_env funs env env.v |> s e bv
==>
evaluate ck oc env s (Letrec funs e) bv

and

letrec2 : forall ck oc env funs e s.
not (List.allDistinct (List.map (fun (x,y,z) -> x) funs))
==>
evaluate ck oc env s (Letrec funs e) (s, Rerr (Rabort Rtype_error))

and

empty : forall ck oc env s.
true
==>
evaluate_list ck oc env s [] (s, Rval [])

and

cons1 : forall ck oc env e es v vs s1 s2 s3.
evaluate ck oc env s1 e (s2, Rval v) &&
evaluate_list ck oc env s2 es (s3, Rval vs)
==>
evaluate_list ck oc env s1 (e::es) (s3, Rval (v::vs))

and

cons2 : forall ck oc env e es err s s'.
evaluate ck oc env s e (s', Rerr err)
==>
evaluate_list ck oc env s (e::es) (s', Rerr err)

and

cons3 : forall ck oc env e es v err s1 s2 s3.
evaluate ck oc env s1 e (s2, Rval v) &&
evaluate_list ck oc env s2 es (s3, Rerr err)
==>
evaluate_list ck oc env s1 (e::es) (s3, Rerr err)

and

mat_empty : forall ck oc env v err_v s.
true
==>
evaluate_match ck oc env s v [] err_v (s, Rerr (Rraise err_v))

and

mat_cons1 : forall ck oc env env' v p pes e bv err_v s.
List.allDistinct (pat_bindings p []) &&
pmatch env.c s.refs p v env.v = Match env' &&
evaluate ck oc <| env with v = env' |> s e bv
==>
evaluate_match ck oc env s v ((p,e)::pes) err_v bv

and

mat_cons2 : forall ck oc env v p e pes bv s err_v.
List.allDistinct (pat_bindings p []) &&
pmatch env.c s.refs p v env.v = No_match &&
evaluate_match ck oc env s v pes err_v bv
==>
evaluate_match ck oc env s v ((p,e)::pes) err_v bv

and

mat_cons3 : forall ck oc env v p e pes s err_v.
pmatch env.c s.refs p v env.v = Match_type_error
==>
evaluate_match ck oc env s v ((p,e)::pes) err_v (s, Rerr (Rabort Rtype_error))

and

mat_cons4 : forall ck oc env v p e pes s err_v.
not (List.allDistinct (pat_bindings p []))
==>
evaluate_match ck oc env s v ((p,e)::pes) err_v (s, Rerr (Rabort Rtype_error))

(* The set tid_or_exn part of the state tracks all of the types and exceptions
 * that have been declared *)
indreln [evaluate_dec : forall 'ffi. bool -> oracle 'ffi -> maybe modN -> environment v -> state 'ffi -> dec ->
                state 'ffi * result (flat_env_ctor * env_val) v -> bool]

dlet1 : forall ck oc mn env p e v env' s1 s2.
evaluate ck oc env s1 e (s2, Rval v) &&
List.allDistinct (pat_bindings p []) &&
pmatch env.c s2.refs p v [] = Match env'
==>
evaluate_dec ck oc mn env s1 (Dlet p e) (s2, Rval ([], env'))

and

dlet2 : forall ck oc mn env p e v s1 s2.
evaluate ck oc env s1 e (s2, Rval v) &&
List.allDistinct (pat_bindings p []) &&
pmatch env.c s2.refs p v [] = No_match
==>
evaluate_dec ck oc mn env s1 (Dlet p e) (s2, Rerr (Rraise Bindv))

and

dlet3 : forall ck oc mn env p e v s1 s2.
evaluate ck oc env s1 e (s2, Rval v) &&
List.allDistinct (pat_bindings p []) &&
pmatch env.c s2.refs p v [] = Match_type_error
==>
evaluate_dec ck oc mn env s1 (Dlet p e) (s2, Rerr (Rabort Rtype_error))

and

dlet4 : forall ck oc mn env p e s.
not (List.allDistinct (pat_bindings p []))
==>
evaluate_dec ck oc mn env s (Dlet p e) (s, Rerr (Rabort Rtype_error))

and

dlet5 : forall ck oc mn env p e err s s'.
evaluate ck oc env s e (s', Rerr err) &&
List.allDistinct (pat_bindings p [])
==>
evaluate_dec ck oc mn env s (Dlet p e) (s', Rerr err)

and

dletrec1 : forall ck oc mn env funs s.
List.allDistinct (List.map (fun (x,y,z) -> x) funs)
==>
evaluate_dec ck oc mn env s (Dletrec funs) (s, Rval ([], build_rec_env funs env []))

and

dletrec2 : forall ck oc mn env funs s.
not (List.allDistinct (List.map (fun (x,y,z) -> x) funs))
==>
evaluate_dec ck oc mn env s (Dletrec funs) (s, Rerr (Rabort Rtype_error))

and

dtype1 : forall ck oc mn env tds s new_tdecs.
check_dup_ctors tds &&
new_tdecs = type_defs_to_new_tdecs mn tds &&
disjoint new_tdecs s.defined_types &&
List.allDistinct (List.map (fun (tvs,tn,ctors) -> tn) tds)
==>
evaluate_dec ck oc mn env s (Dtype tds) (<| s with defined_types = new_tdecs union s.defined_types |>, Rval (build_tdefs mn tds, []))

and

dtype2 : forall ck oc mn env tds s.
not (check_dup_ctors tds) ||
not (disjoint (type_defs_to_new_tdecs mn tds) s.defined_types) ||
not (List.allDistinct (List.map (fun (tvs,tn,ctors) -> tn) tds))
==>
evaluate_dec ck oc mn env s (Dtype tds) (s, Rerr (Rabort Rtype_error))

and

dtabbrev : forall ck oc mn env tvs tn t s.
true
==>
evaluate_dec ck oc mn env s (Dtabbrev tvs tn t) (s, Rval ([], []))

and

dexn1 : forall ck oc mn env cn ts s.
not (TypeExn (mk_id mn cn) IN s.defined_types)
==>
evaluate_dec ck oc mn env s (Dexn cn ts) (<| s with defined_types = {TypeExn (mk_id mn cn)} union s.defined_types |>, Rval ([(cn, (List.length ts, TypeExn (mk_id mn cn)))], []))

and

dexn2 : forall ck oc mn env cn ts s.
TypeExn (mk_id mn cn) IN s.defined_types
==>
evaluate_dec ck oc mn env s (Dexn cn ts) (s, Rerr (Rabort Rtype_error))

indreln [evaluate_decs : forall 'ffi. bool -> oracle 'ffi -> maybe modN -> environment v -> state 'ffi -> list dec ->
            state 'ffi * flat_env_ctor * result env_val v -> bool]

empty : forall ck oc mn env s.
true
==>
evaluate_decs ck oc mn env s [] (s, [], Rval [])

and

cons1 : forall ck oc mn s1 s2 env d ds e.
evaluate_dec ck oc mn env s1 d (s2, Rerr e)
==>
evaluate_decs ck oc mn env s1 (d::ds) (s2, [], Rerr e)

and

cons2 : forall ck oc mn s1 s2 s3 env d ds new_tds' new_tds new_env r.
evaluate_dec ck oc mn env s1 d (s2, Rval (new_tds,new_env)) &&
evaluate_decs ck oc mn (extend_dec_env new_env new_tds env) s2 ds (s3, new_tds', r)
==>
evaluate_decs ck oc mn env s1 (d::ds) (s3, new_tds' ++ new_tds, combine_dec_result new_env r)


indreln [evaluate_top : forall 'ffi. bool -> oracle 'ffi -> environment v -> state 'ffi -> top ->
              state 'ffi * env_ctor * result (env_mod * env_val) v -> bool]

tdec1 : forall ck oc s1 s2 env d new_tds new_env.
evaluate_dec ck oc Nothing env s1 d (s2, Rval (new_tds, new_env))
==>
evaluate_top ck oc env s1 (Tdec d) (s2, ([],new_tds), Rval ([], new_env))

and

tdec2 : forall ck oc s1 s2 env d err.
evaluate_dec ck oc Nothing env s1 d (s2, Rerr err)
==>
evaluate_top ck oc env s1 (Tdec d) (s2, ([],[]), Rerr err)

and

tmod1 : forall ck oc s1 s2 env ds mn specs new_tds new_env.
not (mn IN s1.defined_mods) &&
no_dup_types ds &&
evaluate_decs ck oc (Just mn) env s1 ds (s2, new_tds, Rval new_env)
==>
evaluate_top ck oc env s1 (Tmod mn specs ds) (<| s2 with defined_mods = {mn} union s2.defined_mods |>, ([(mn,new_tds)], []), Rval ([(mn,new_env)], []))

and

tmod2 : forall ck oc s1 s2 env ds mn specs new_tds err.
not (mn IN s1.defined_mods) &&
no_dup_types ds &&
evaluate_decs ck oc (Just mn) env s1 ds (s2, new_tds, Rerr err)
==>
evaluate_top ck oc env s1 (Tmod mn specs ds) (<| s2 with defined_mods = {mn} union s2.defined_mods |>, ([(mn,new_tds)], []), Rerr err)

and

tmod3 : forall ck oc s1 env ds mn specs.
not (no_dup_types ds)
==>
evaluate_top ck oc env s1 (Tmod mn specs ds) (s1, ([],[]), Rerr (Rabort Rtype_error))

and

tmod4 : forall ck oc env s mn specs ds.
mn IN s.defined_mods
==>
evaluate_top ck oc env s (Tmod mn specs ds) (s, ([],[]), Rerr (Rabort Rtype_error))

indreln [evaluate_prog : forall 'ffi. bool -> oracle 'ffi -> environment v -> state 'ffi -> prog ->
             state 'ffi * env_ctor * result (env_mod * env_val) v -> bool]

empty : forall ck oc env s.
true
==>
evaluate_prog ck oc env s [] (s, ([],[]), Rval ([], []))

and

cons1 : forall ck oc s1 s2 s3 env top tops new_mods new_tds new_tds' new_env r.
evaluate_top ck oc env s1 top (s2, new_tds, Rval (new_mods,new_env)) &&
evaluate_prog ck oc (extend_top_env new_mods new_env new_tds env) s2 tops (s3,new_tds',r)
==>
evaluate_prog ck oc env s1 (top::tops) (s3, merge_alist_mod_env new_tds' new_tds, combine_mod_result new_mods new_env r)

and

cons2 : forall ck oc s1 s2 env top tops err new_tds.
evaluate_top ck oc env s1 top (s2, new_tds, Rerr err)
==>
evaluate_prog ck oc env s1 (top::tops) (s2, new_tds, Rerr err)


val evaluate_whole_prog : forall 'ffi. Eq 'ffi => bool -> oracle 'ffi -> environment v -> state 'ffi -> prog ->
          state 'ffi * env_ctor * result (env_mod * env_val) v -> bool
let evaluate_whole_prog ck oc env s1 tops (s2, new_tds, res) =
  if no_dup_mods tops s1.defined_mods && no_dup_top_types tops s1.defined_types then
    evaluate_prog ck oc env s1 tops (s2, new_tds, res)
  else
    s1 = s2 && new_tds = ([],[]) && res = Rerr (Rabort Rtype_error)

val dec_diverges : forall 'ffi. oracle 'ffi -> environment v -> state 'ffi -> dec -> bool
let dec_diverges oc env st d =
  match d with
    | Dlet p e -> List.allDistinct (pat_bindings p []) && e_diverges oc env (st.refs, st.ffi) e
    | Dletrec funs -> false
    | Dtype tds -> false
    | Dtabbrev tvs tn t -> false
    | Dexn cn ts -> false
  end

indreln [decs_diverges : forall 'ffi. oracle 'ffi -> maybe modN -> environment v -> state 'ffi -> decs -> bool]

cons1 : forall oc mn st env d ds.
dec_diverges oc env st d
==>
decs_diverges oc mn env st (d::ds)

and

cons2 : forall oc mn s1 s2 env d ds new_tds new_env.
evaluate_dec false oc mn env s1 d (s2, Rval (new_tds, new_env)) &&
decs_diverges oc mn (extend_dec_env new_env new_tds env) s2 ds
==>
decs_diverges oc mn env s1 (d::ds)

indreln [top_diverges : forall 'ffi. oracle 'ffi -> environment v -> state 'ffi -> top -> bool]

tdec : forall oc st env d.
dec_diverges oc env st d
==>
top_diverges oc env st (Tdec d)

and

tmod : forall oc env s1 ds mn specs.
not (mn IN s1.defined_mods) &&
no_dup_types ds &&
decs_diverges oc (Just mn) env s1 ds
==>
top_diverges oc env s1 (Tmod mn specs ds)

indreln [prog_diverges : forall 'ffi. oracle 'ffi -> environment v -> state 'ffi -> prog -> bool]

cons1 : forall oc st env top tops.
top_diverges oc env st top
==>
prog_diverges oc env st (top::tops)

and

cons2 : forall oc s1 s2 env top tops new_mods new_tds new_env.
evaluate_top false oc env s1 top (s2, new_tds, Rval (new_mods, new_env)) &&
prog_diverges oc (extend_top_env new_mods new_env new_tds env) s2 tops
==>
prog_diverges oc env s1 (top::tops)
