The CakeML project. See https://cakeml.org and https://github.com/xrchz/vml.

A verified implementation of a significant subset of Standard ML in the HOL4
theorem prover (http://hol.sourceforge.net).

NB: We develop this using the head of the HOL4 development version in Github
(https://github.com/mn200/HOL), and it will not work on official HOL releases.
We build HOL on PolyML 5.5 (http://www.polyml.org/). Also, a full build
(including the bootstrapping which runs the compiler on itself in the logic)
may require 16GB RAM.

Directory structure:

- semantics
    The definition of CakeML, including
    - its concrete syntax
    - its abstract syntax
    - small step semantics
    - big step semantics
    - a type system
    The definition is (mostly) expressed in
    Lem (http://www.cs.kent.ac.uk/~sao/lem),
    but the generated HOL is also included.

- metatheory
    Proofs about CakeML, including
    - type soundness
    - determinism
    - equivalence of the big and small step semantics
    - a verified clocked interpreter

- parsing
    Lexer and PEG parser for CakeML.

- inference
    Type inferencer for CakeML.
- inference/proofs
    Proof of soundness for the type inferencer.

- bytecode
    CakeML Bytecode specification, metatheory, and evaluator.

- compiler
    Compiler from CakeML abstract syntax to CakeML Bytecode, with the
    implementation expressed in Lem.
- compiler/proofs
    Verification of the compiler.

- repl
    The REPL implementation in HOL.
    Defines repl_fun : string -> repl_result.
    Also includes some machinery for evaluating repl_fun in the logic.
- repl/proofs
    The correctness proof for repl_fun.
- repl/examples
    Examples of evaluating repl_fun in the logic.

- whole-prog
    Compile a whole CakeML program to bytecode, instead of interleaving
    compilation and execution as in the repl.

- translator
    A proof-producing translator from HOL functions to CakeML.
- translator/repl
    A run of the translator on the translatable part of repl_fun.
- translator/repl/proofs
    Theorem about the correctness of the result of bootstrapping the above, as
    done below.

- bootstrap
    Evaluation of the compiler on the deep embedding of repl_fun produced by
    the translator.

- x86-64
    (Work towards an) x86-64 implementation of repl_fun.

- unverified/interp
    Unverified implementation, in Haskell, of the CakeML frontend augmented
    with informative error messages.
- unverified/bytecode
    An unverified implementation of CakeML bytecode, written in C

- hol-light
    An implementation of HOL Light (http://www.cl.cam.ac.uk/~jrh13/hol-light/)
    in CakeML.

- clockScript.sml
    A proof outline of our divergence preservation technique.

- COPYING
    Copyright notice, license, and disclaimer.
