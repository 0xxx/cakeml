The CakeML project.  See http://cakeml.org and https://github.com/xrchz/vml.

A verified implementation of a significant subset of Standard ML in the HOL4
theorem prover (http://hol.sourceforge.net).

NB: We develop this using the head of the HOL4 development version in Github
(https://github.com/mn200/HOL), and it will not work on official HOL releases.
We build HOL on PolyML 5.5 (http://www.polyml.org/).  Also, a full build
(including the bootstrapping which requires running the compiler on itself in
the logic) requires a machine with 32GB RAM.

Directory structure:

- semantics
    The definition of CakeML, including
    - its concrete syntax
    - its abstract syntax
    - small step semantics
    - big step semantics
    - a type system
    The definition is (mostly) expressed in
    Lem (http://www.cs.kent.ac.uk/~sao/lem),
    but the generated HOL is also included.

- metatheory
    Proofs about CakeML, including
    - type soundness
    - determinism
    - equivalence of the big and small step semantics

- implementation
    The REPL implementation in HOL, including
      - the type inferencer implementation
      - definition of repl_fun : string -> repl_result
      - the bootstrapping

- parsing
    Lexer and PEG parser for CakeML.

- bytecode
  CakeML Bytecode specification, metatheory, and evaluator

- compiler
    Translator from CakeML abstract syntax to CakeML Bytecode.
    Includes:
      - the compiler implementation (expressed in Lem)
      - compiler correctness proofs
      - rudimentary tests using EmitML

- impl_proofs
    The correctness proof for the REPL implementation

- translator
    A proof-producing translator from HOL functions to CakeML.

- translator/repl
    A running the translator on the CakeML compiler

- clockScript.sml
    A proof outline of our divergence preservation technique.

- hol-light
    An implementation of HOL Light (http://www.cl.cam.ac.uk/~jrh13/hol-light/)
    in CakeML.

- x86-64
    Word towards an x86-64 implementation of repl_fun from implementation
