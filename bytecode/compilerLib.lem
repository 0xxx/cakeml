open import Pervasives
import List_extra


(* TODO: these should be in the lem library *)
val least : (nat -> bool) -> nat
let inline {hol} least = `$LEAST`

val string_concat : list string -> string
let inline {hol} string_concat = `CONCAT`

val snoc_char : char -> string -> string
let inline {hol} snoc_char c s = `SNOC` c s

val all2 : forall 'a 'b. ('a -> 'b -> bool) -> list 'a -> list 'b -> bool
let inline {hol} all2 f a b = `EVERY2` f a b

val EXPLODE : string -> list char
let inline {hol} EXPLODE = `EXPLODE`

val o : forall 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> ('a -> 'c)
declare hol target_rep function o = infix `o`


let rec el_check n ls = if n < List.length ls then Just (List_extra.nth ls n) else Nothing

val num_fold : forall 'a. ('a -> 'a) -> 'a -> nat -> 'a
let rec num_fold f a n = if n = 0 then a else num_fold f (f a) (n-1)

let rec
intersperse _ [] = []
and
intersperse _ [x] = [x]
and
intersperse a (x::xs) = x::a::intersperse a xs

let rec
lunion [] s = s
and
lunion (x::xs) s =
  if List.elem x s
  then lunion xs s
  else x::(lunion xs s)

let rec
lshift (n : nat) ls =
  List.map (fun v -> v - n) (List.filter (fun v -> n <= v) ls)

let rec the _ (Just x) = x and the x Nothing = x

val fapply : forall 'a 'b. MapKeyType 'b => 'a -> 'b -> Map.map 'b 'a -> 'a
let fapply d x f = match Map.lookup x f with Just d -> d | Nothing -> d end
