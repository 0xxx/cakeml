open import Pervasives
import Map_extra
import String_extra

open import Lib
open import Ast
open import SemanticPrimitives

(* TODO: should be in lem library? *)
val snoc_char : char -> string -> string
declare hol target_rep function snoc_char = `SNOC`
val least : (nat -> bool) -> nat
declare hol target_rep function least = `$LEAST`

(* --- Syntax --- *)

type
  bc_stack_op =
    Pop                     (* pop top of stack *)
  | Pops of nat             (* pop n elements under stack top *)
  | PushInt of integer      (* push int onto stack *)
  | Cons of nat             (* push new cons with tag m and given elements *)
  | Load of nat             (* push stack[n] *)
  | Store of nat            (* pop and store in stack[n] *)
  | LengthBlock             (* read length of cons block *)
  | El                      (* read field of cons block *)
  | TagEq of nat            (* test tag of block *)
  | IsBlock                 (* test for a block *)
  | Equal                   (* test equality *)
  | Add | Sub | Mult | Div | Mod | Less  (* arithmetic *)

type
  loc =
    Lab of nat              (* label *)
  | Addr of nat             (* address *)

type
  bc_inst =
    Stack of bc_stack_op
  | Label of nat            (* label location *)
  | Jump of loc             (* jump to location *)
  | JumpIf of loc           (* jump to location iff true *)
  | Call of loc             (* call location *)
  | CallPtr                 (* call based on code pointer *)
  | PushPtr of loc          (* push a CodePtr onto stack *)
  | Return                  (* pop return address, jump *)
  | PushExc                 (* push exception handler *)
  | PopExc                  (* pop exception handler *)
  | Ref                     (* create a new ref cell *)
  | RefByte                 (* create new byte array *)
  | Deref                   (* dereference a ref cell *)
  | DerefByte               (* index a byte array *)
  | Update                  (* update a ref cell *)
  | UpdateByte              (* update a byte array *)
  | Length                  (* get length of ref *)
  | LengthByte              (* get length of byte array *)
  | Galloc of nat           (* allocate global variables *)
  | Gupdate of nat          (* update a global variable *)
  | Gread of nat            (* read a global variable *)
  | Stop of bool            (* halt execution with success/failure *)
  | Tick                    (* use fuel *)
  | Print                   (* print non-word value at top of stack *)
  | PrintWord8              (* print word8 at top of stack *)
  | PrintC of char          (* print a character *)

(* --- Semantics --- *)

(* the stack is a list of elements of bc_value *)

type
  bc_value =
    Number of integer              (* integer *)
  | Block of nat * list bc_value   (* cons block: tag and payload *)
  | CodePtr of nat                 (* code pointer *)
  | RefPtr of nat                  (* pointer to ref cell *)
  | StackPtr of nat                (* pointer into stack *)

type
  ref_value =
    ValueArray of list bc_value
  | ByteArray of list word8

type
  bc_state =
   <| (* main state components *)
      stack : list bc_value;
      code : list bc_inst;
      pc : nat;
      refs : map nat ref_value;
      globals : list (maybe bc_value);
      handler : nat;
      output : string;
      (* artificial state components *)
      inst_length : bc_inst -> nat;
      clock : maybe nat
   |>

val bool_to_tag : bool -> nat
let rec
bool_to_tag false = 0
and
bool_to_tag true = 1

let unit_tag : nat = 2
let closure_tag : nat = 3
let string_tag : nat = 4
let vector_tag : nat = 5
let block_tag : nat = 6

let bool_to_val b = Block (bool_to_tag b) []
let unit_val = Block unit_tag []

let word8_to_val w = Number (integerFromNat (natFromWord8 w))

let rec
is_Block (Block _ _) = true
and
is_Block _ = false

let rec
is_Number (Number _) = true
and
is_Number _ = false

let rec dest_Number (Number i) = i

let rec
is_char (Number n) = (0 <= n && n < 256)
and
is_char _ = false

(* comparing bc_values for equality *)

let rec
bc_equal (CodePtr _) _ = Eq_type_error
and
bc_equal _ (CodePtr _) = Eq_type_error
and
bc_equal (StackPtr _) _ = Eq_type_error
and
bc_equal _ (StackPtr _) = Eq_type_error
and
bc_equal (Number n1) (Number n2) = Eq_val (n1 = n2)
and
bc_equal (Number _) _ = Eq_val false
and
bc_equal _ (Number _) = Eq_val false
and
bc_equal (RefPtr n1) (RefPtr n2) = Eq_val (n1 = n2)
and
bc_equal (RefPtr _) _ = Eq_val false
and
bc_equal _ (RefPtr _) = Eq_val false
and
bc_equal (Block t1 l1) (Block t2 l2) =
  if t1 = closure_tag || t2 = closure_tag
  then Eq_closure else
    if t1 = t2 && List.length l1 = List.length l2
    then bc_equal_list l1 l2 else Eq_val false
and
bc_equal_list [] [] = Eq_val true
and
bc_equal_list (v1::vs1) (v2::vs2) =
  match bc_equal v1 v2 with
  | Eq_val true -> bc_equal_list vs1 vs2
  | Eq_val false -> Eq_val false
  | bad -> bad
  end
and
bc_equal_list _ _ = Eq_val false

let rec
bc_equality_result_to_val (Eq_val b) = bool_to_val b
and
bc_equality_result_to_val Eq_closure = Number 0
and
bc_equality_result_to_val Eq_type_error = Number 1

(* fetching the next instruction from the code *)

let rec
is_Label (Label _) = true
and
is_Label _ = false

let rec
bc_fetch_aux [] _ _ = Nothing
and
bc_fetch_aux (x::xs) len (n:nat) =
  if is_Label x then bc_fetch_aux xs len n else
    if n = 0 then Just x else
      if n < len x + 1 then Nothing else
        bc_fetch_aux xs len (n - (len x + 1))

let bc_fetch s = bc_fetch_aux s.code s.inst_length s.pc

(* most instructions just bump the pc along, for this we use bump_pc *)

let bump_pc s = match bc_fetch s with
| Nothing -> s
| Just x -> <| s with pc = s.pc + s.inst_length x + 1 |>
end

(* finding the address of a location *)
let rec
bc_find_loc_aux [] _ _ _ = Nothing
and
bc_find_loc_aux (x::xs) len l (n:nat) =
  if x = Label l then Just n else
    bc_find_loc_aux xs len l (n + (if is_Label x then 0 else len x + 1))

let rec
bc_find_loc _ (Addr n) = Just n
and
bc_find_loc s (Lab l) = bc_find_loc_aux s.code s.inst_length l 0

(* conversion to observable values *)

val bvs_to_chars : list bc_value -> list char -> maybe (list char)
let rec
bvs_to_chars [] ac = Just (List.reverse ac)
and
bvs_to_chars (Number i::vs) ac =
  if 0 <= i && i < 256 then
    bvs_to_chars vs ((String_extra.chr (natFromInteger i))::ac)
  else Nothing
and
bvs_to_chars _ _ = Nothing
declare termination_argument bvs_to_chars = automatic

val bv_to_string :  bc_value -> maybe string
let rec
bv_to_string (Number i) = Just (int_to_string i)
and
bv_to_string (Block n vs) =
  if n = (bool_to_tag false) then Just "false" else
  if n = (bool_to_tag true) then Just "true" else
  if n = unit_tag then Just "()" else
  if n = closure_tag then Just "<fn>" else
  if n = vector_tag then Just "<vector>" else
  if n = string_tag then
    match bvs_to_chars vs [] with
    | Nothing -> Nothing
    | Just cs -> Just (string_to_string (String.toString cs))
    end
  else Just "<constructor>"
and
bv_to_string (RefPtr _) = Just "<ref>"
and
bv_to_string _ = Nothing

(* next state relation *)

indreln
[bc_stack_op : bc_stack_op -> (list bc_value) -> (list bc_value) -> bool]

pop : forall x xs. true ==>
bc_stack_op Pop (x::xs) (xs)
and
pops : forall x ys xs. true ==>
bc_stack_op (Pops (List.length ys)) ((x::ys)++xs) (x::xs)
and
pushInt : forall n xs. true ==>
bc_stack_op (PushInt n) (xs) (Number n::xs)
and
cons : forall tag ys xs. true ==>
bc_stack_op (Cons tag) (Number (integerFromNat (List.length ys))::ys++xs) (Block tag (List.reverse ys)::xs)
and
load : forall k xs. k < List.length xs ==>
bc_stack_op (Load k) xs (List_extra.nth xs k::xs)
and
store : forall y ys x xs. true ==>
bc_stack_op (Store (List.length ys)) ((y::ys)++(x::xs)) (ys++(y::xs))
and
lengthBlock : forall tag ys xs. true ==>
bc_stack_op LengthBlock ((Block tag ys)::xs) (Number (integerFromNat (List.length ys))::xs)
and
el : forall k tag ys xs. k < List.length ys ==>
bc_stack_op El (Number (integerFromNat k)::(Block tag ys)::xs) (List_extra.nth ys k::xs)
and
tagEq : forall t tag ys xs. true ==>
bc_stack_op (TagEq t) ((Block tag ys)::xs) (bool_to_val (tag = t)::xs)
and
isBlock : forall x xs. (forall n. not (x = CodePtr n) && not (x = StackPtr n)) ==>
bc_stack_op IsBlock (x::xs) ((bool_to_val (is_Block x))::xs)
and
equal : forall x2 x1 xs. not (bc_equal x1 x2 = Eq_type_error) ==>
bc_stack_op Equal (x2::x1::xs) (bc_equality_result_to_val (bc_equal x1 x2)::xs)
and
less : forall n m xs. true ==>
bc_stack_op Less (Number n::Number m::xs) (bool_to_val (m < n)::xs)
and
add : forall n m xs. true ==>
bc_stack_op Add  (Number n::Number m::xs) (Number (m + n)::xs)
and
sub : forall n m xs. true ==>
bc_stack_op Sub  (Number n::Number m::xs) (Number (m - n)::xs)
and
mult : forall n m xs. true ==>
bc_stack_op Mult (Number n::Number m::xs) (Number (m * n)::xs)
and
dv : forall n m xs. not (n = 0) ==>
bc_stack_op Div  (Number n::Number m::xs) (Number (m div n)::xs)
and
md : forall n m xs. not (n = 0) ==>
bc_stack_op Mod  (Number n::Number m::xs) (Number (m mod n)::xs)

indreln
[bc_next : bc_state -> bc_state -> bool]

stack_op : forall s b ys.
bc_fetch s = Just (Stack b)
&& bc_stack_op b (s.stack) ys
==>
bc_next s (<|bump_pc s with stack = ys|>) (* parens throughout: lem sucks *)
and
jump : forall s l n.
(bc_fetch s = Just (Jump l)) (* parens: ugh...*)
&& (bc_find_loc s l = Just n)
==>
bc_next s (<|s with pc = n|>)
and
jumpIf : forall s l n b xs s'.
bc_fetch s = Just (JumpIf l)
&& (bc_find_loc s l = Just n)
&& s.stack = (bool_to_val b)::xs
&& s' = (<|s with stack = xs|>)
==>
bc_next s (if b then <|s' with pc = n|> else bump_pc s')
and
call : forall s l n x xs.
bc_fetch s = Just (Call l)
&& (bc_find_loc s l = Just n)
&& s.stack = x::xs
==>
bc_next s (<|s with pc = n; stack = x::CodePtr ((bump_pc s).pc)::xs|>)
and
callPtr : forall s ptr x xs.
bc_fetch s = Just CallPtr
&& s.stack = CodePtr ptr::x::xs
==>
bc_next s (<|s with pc = ptr; stack = x::CodePtr ((bump_pc s).pc)::xs|>)
and
pushPtr : forall s l n.
bc_fetch s = Just (PushPtr l)
&& (bc_find_loc s l = Just n)
==>
bc_next s (<|bump_pc s with stack = (CodePtr n)::s.stack |>)
and
return : forall s x n xs.
bc_fetch s = Just Return
&& s.stack = x::CodePtr n::xs
==>
bc_next s (<|s with pc = n; stack = x::xs|>)
and
pushExc : forall s.
(bc_fetch s = Just PushExc) (* parens: Lem sucks *)
==>
bc_next s (<|bump_pc s with
               handler = List.length s.stack ;
               stack = (StackPtr s.handler)::s.stack|>)
and
popExc : forall s sp x l1 l2.
bc_fetch s = Just PopExc &&
s.stack = (x::l1) ++ (StackPtr sp::l2) &&
List.length l2 = s.handler
==>
bc_next s (<|bump_pc s with handler = sp; stack = x::l2|>)
and
ref : forall s n v xs ptr.
bc_fetch s = Just Ref
&& s.stack = (Number (integerFromNat n))::v::xs
&& (ptr = least (fun ptr -> not (Map.member ptr s.refs)))
==>
bc_next s (<|bump_pc s with stack = (RefPtr ptr)::xs;
             refs = Map.insert ptr (ValueArray (List.replicate n v)) s.refs|>)
and
refByte : forall s n w xs ptr.
bc_fetch s = Just RefByte
&& s.stack = (Number (integerFromNat n))::(word8_to_val w)::xs
&& (ptr = least (fun ptr -> not (Map.member ptr s.refs)))
==>
bc_next s (<|bump_pc s with stack = (RefPtr ptr)::xs;
             refs = Map.insert ptr (ByteArray (List.replicate n w)) s.refs|>)
and
deref : forall s n ptr xs vs.
bc_fetch s = Just Deref
&& s.stack = (Number (integerFromNat n))::(RefPtr ptr)::xs
&& Map.lookup ptr s.refs = Just (ValueArray vs)
&& n < List.length vs
==>
bc_next s (<|bump_pc s with stack = (List_extra.nth vs n)::xs|>)
and
derefByte : forall s n ptr xs vs.
bc_fetch s = Just DerefByte
&& s.stack = (Number (integerFromNat n))::(RefPtr ptr)::xs
&& Map.lookup ptr s.refs = Just (ByteArray vs)
&& n < List.length vs
==>
bc_next s (<|bump_pc s with stack = (word8_to_val (List_extra.nth vs n))::xs|>)
and
update : forall s x n ptr xs vs.
bc_fetch s = Just Update
&& s.stack = x::(Number (integerFromNat n))::(RefPtr ptr)::xs
&& Map.lookup ptr s.refs = Just (ValueArray vs)
&& n < List.length vs
==>
bc_next s (<|bump_pc s with stack = xs;
             refs = Map.insert ptr (ValueArray (List.update vs n x)) s.refs|>)
and
updateByte : forall s w n ptr xs vs.
bc_fetch s = Just UpdateByte
&& s.stack = (Number (integerFromNat (natFromWord8 w)))::
             (Number (integerFromNat n))::(RefPtr ptr)::xs
&& Map.lookup ptr s.refs = Just (ByteArray vs)
&& n < List.length vs
==>
bc_next s (<|bump_pc s with stack = xs;
             refs = Map.insert ptr (ByteArray (List.update vs n w)) s.refs|>)
and
length : forall s ptr xs vs.
bc_fetch s = Just Length
&& s.stack = (RefPtr ptr)::xs
&& Map.lookup ptr s.refs = Just (ValueArray vs)
==>
bc_next s (<|bump_pc s with stack = (Number (integerFromNat (List.length vs)))::xs|>)
and
lengthByte : forall s ptr xs vs.
bc_fetch s = Just LengthByte
&& s.stack = (RefPtr ptr)::xs
&& Map.lookup ptr s.refs = Just (ByteArray vs)
==>
bc_next s (<|bump_pc s with stack = (Number (integerFromNat (List.length vs)))::xs|>)
and
galloc : forall s n.
bc_fetch s = Just (Galloc n)
==>
bc_next s (<|bump_pc s with globals = s.globals ++ (List.replicate n Nothing)|>)
and
gupdate : forall s n x xs.
bc_fetch s = Just (Gupdate n)
&& s.stack = x::xs
&& n < List.length s.globals
&& List_extra.nth s.globals n = Nothing
==>
bc_next s (<|bump_pc s with stack = xs;
                            globals = List.update s.globals n (Just x)|>)
and
gread : forall s n v.
bc_fetch s = Just (Gread n)
&& n < List.length s.globals
&& List_extra.nth s.globals n = Just v
==>
bc_next s (<|bump_pc s with stack = v::s.stack|>)
and
tick : forall s.
bc_fetch s = Just Tick
&& (forall n. s.clock = Just n --> n > 0)
==>
bc_next s (<|bump_pc s with clock = Maybe.map natPred s.clock|>)
and
print : forall s x xs str.
bc_fetch s = Just Print
&& (s.stack = x::xs)
&& bv_to_string x = Just str
==>
bc_next s (<|bump_pc s with stack = xs;
  output = String_extra.stringConcat [s.output;str]|>)
and
printWord8 : forall s x xs.
bc_fetch s = Just PrintWord8
&& (s.stack = (Number (integerFromNat (natFromWord8 (x:word8))))::xs)
==>
bc_next s (<|bump_pc s with stack = xs;
  output = String_extra.stringConcat [s.output;word_to_hex_string x]|>)
and
printC : forall s c.
bc_fetch s = Just (PrintC c)
==>
bc_next s (<|bump_pc s with output = snoc_char c s.output|>)
