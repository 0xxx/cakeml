(* observable values *)
open import Pervasives
import List_extra

open import Ast
open import SemanticPrimitives
open import CompilerLib

type ov =
  | OLit of lit
  | OConv of maybe (id conN) * list ov
  | OFn
  | OLoc of nat (* machine, not semantic, address *)
  | OError (* internal machine value (pointer) that should not appear *)

let rec
v_to_ov _ (Litv l) = OLit l
and
v_to_ov s (Conv cn vs) = OConv cn (List.map (v_to_ov s) vs)
and
v_to_ov _ (Closure _ _ _) = OFn
and
v_to_ov _ (Recclosure _ _ _) = OFn
and
v_to_ov s (Loc n) = OLoc (List_extra.nth s n)

let rec
ov_to_string (OLit (IntLit (i:integer))) = int_to_string i
and
ov_to_string (OLit (Bool true)) = "true"
and
ov_to_string (OLit (Bool false)) = "false"
and
ov_to_string (OLit Unit) = "()"
and
ov_to_string (OConv _ _) = "<constructor>"
(*
ov_to_string (OConv cn vs) =
  (id_to_string cn)^" "^
  match intersperse ", " (List.map ov_to_string vs) with
  | [s] -> s
  | ls -> "("^Hol.FLAT ls^")"
  end
*)
and
ov_to_string (OLoc _) = "<ref>"
and
ov_to_string OFn = "<fn>"
and
ov_to_string OError = "<error>"
