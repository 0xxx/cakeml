(*Generated by Lem from ffi.lem.*)
open HolKernel Parse boolLib bossLib;
open libTheory;

val _ = numLib.prefer_num();



val _ = new_theory "ffi"

(*open Pervasives*)
(*open import Lib*)

(* I/O events *)

(* An I/O event, IO_event n bytes2, calls FFI function n with input 
   map fst bytes2 in the passed array, and the call returns with map snd bytes2
   in the array. *)
val _ = Hol_datatype `
 io_event = IO_event of num => ( (word8 # word8)list)`;


val _ = type_abbrev( "io_trace" , ``:  io_event llist``);

(* A program can Diverge, Terminate, or Fail. We prove that Fail is
   avoided. For Diverge and Terminate, we keep track of what I/O
   events are valid I/O events for this behaviour. *)
val _ = Hol_datatype `
  behaviour =
    (* There cannot be any non-returning FFI calls in a diverging
       exeuction. The list of I/O events can be finite or infinite,
       hence the llist (lazy list) type. *)
    Diverge of  io_event llist
    (* Terminating executions can only perform a finite number of
       FFI calls. The execution can be terminated by a non-returning
       FFI call. *)
  | Terminate of io_event list
    (* Failure is a behaviour which we prove cannot occur for any
       well-typed program. *)
  | Fail`;


val _ = Define `
  (call_FFI n bytes io_trace =  
((case LHD io_trace of
    SOME (IO_event n' xs) =>
      if (n = n') /\ (MAP FST xs = bytes) then
        SOME (MAP SND xs, the (LTL io_trace))
      else NONE
  | _ => NONE
  )))`;

val _ = export_theory()

