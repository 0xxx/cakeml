open Pervasives
open import Lib

(* I/O events *)

(* An I/O event, IO_event n bytes2, calls FFI function n with input 
   map fst bytes2 in the passed array, and the call returns with map snd bytes2
   in the array. *)
type io_event = IO_event of nat * (list (word8 * word8))

type io_trace = llist io_event

(* A program can Diverge, Terminate, or Fail. We prove that Fail is
   avoided. For Diverge and Terminate, we keep track of what I/O
   events are valid I/O events for this behaviour. *)
type  behaviour =
    (* There cannot be any non-returning FFI calls in a diverging
       exeuction. The list of I/O events can be finite or infinite,
       hence the llist (lazy list) type. *)
    Diverge of llist io_event
    (* Terminating executions can only perform a finite number of
       FFI calls. The execution can be terminated by a non-returning
       FFI call. *)
  | Terminate of list io_event
    (* Failure is a behaviour which we prove cannot occur for any
       well-typed program. *)
  | Fail

let  call_FFI n bytes io_trace =
  match lhd io_trace with
  | Just (IO_event n' xs) ->
      if (n = n') && (map fst xs = bytes) then
        Just (map snd xs, the (ltl io_trace))
      else Nothing
  | _ -> Nothing
  end
