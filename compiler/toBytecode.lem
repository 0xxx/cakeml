(* Intermediate Language to Bytecode *)

open import Pervasives

open import Lib
open import Ast
open import CompilerLib
open import IntLang
open import ToIntLang
open import Bytecode

(* pull closure bodies into code environment *)

let rec bind_fv (az,e) nz ix =
  let fvs = free_vars e in
  let recs = List.filter (fun v -> List.elem (az+v) fvs && not (v=ix)) (genlist (fun n -> n) nz) in
  let envs = List.filter (fun v -> az+nz <= v) fvs in
  let envs = List.map (fun v -> v-(az+nz)) envs in
  let rz = List.length recs+1 in
  let e = mkshift (fun v -> if v < nz then the 0 (find_index v (ix::recs) 0)
                            else the 0 (find_index (v-nz) envs rz))
                  az e in
  let rz = rz-1 in
  ((genlist (fun i -> CCArg (2+i)) (az+1))
   ++((genlist CCRef rz)
   ++(genlist (fun i -> CCEnv (rz+i)) (List.length envs)))
  ,(recs,envs)
  ,e
  )

let rec
label_closures ez j (CRaise e) =
  let (e,j) = label_closures ez j e in
  (CRaise e, j)
and
label_closures ez j (CHandle e1 e2) =
  let (e1,j) = label_closures ez j e1 in
  let (e2,j) = label_closures (ez+1) j e2 in
  (CHandle e1 e2, j)
and
label_closures _ j (CVar x) = (CVar x, j)
and
label_closures _ j (CLit l) = (CLit l, j)
and
label_closures ez j (CCon cn es) =
  let (es,j) = label_closures_list ez j es in
  (CCon cn es,j)
and
label_closures ez j (CTagEq e n) =
  let (e,j) = label_closures ez j e in
  (CTagEq e n,j)
and
label_closures ez j (CProj e n) =
  let (e,j) = label_closures ez j e in
  (CProj e n,j)
and
label_closures ez j (CLet e1 e2) =
  let (e1,j) = label_closures ez j e1 in
  let (e2,j) = label_closures (ez+1) j e2 in
  (CLet e1 e2, j)
and
label_closures ez j (CLetrec defs e) =
  let defs = List.map snd (List.filter (comb isNothing fst) defs) in
  let nz = List.length defs in
  let (defs,j) = label_closures_defs ez j nz 0 defs in
  let (e,j) = label_closures (ez+nz) j e in
  (CLetrec defs e, j)
and
label_closures ez j (CCall ck e es) =
  let (e,j) = label_closures ez j e in
  let (es,j) = label_closures_list ez j es in
  (CCall ck e es,j)
and
label_closures ez j (CPrim1 p1 e) =
  let (e,j) = label_closures ez j e in
  (CPrim1 p1 e, j)
and
label_closures ez j (CPrim2 p2 e1 e2) =
  let (e1,j) = label_closures ez j e1 in
  let (e2,j) = label_closures ez j e2 in
  (CPrim2 p2 e1 e2, j)
and
label_closures ez j (CUpd e1 e2) =
  let (e1,j) = label_closures ez j e1 in
  let (e2,j) = label_closures ez j e2 in
  (CUpd e1 e2, j)
and
label_closures ez j (CIf e1 e2 e3) =
  let (e1,j) = label_closures ez j e1 in
  let (e2,j) = label_closures ez j e2 in
  let (e3,j) = label_closures ez j e3 in
  (CIf e1 e2 e3, j)
and
label_closures_list _ j [] = ([],j)
and
label_closures_list ez j (e::es) =
  let (e,j) = label_closures ez j e in
  let (es,j) = label_closures_list ez j es in
  (e::es,j)
and
label_closures_defs _ j _ _ [] = ([], j)
and
label_closures_defs ez ld nz k ((az,b)::defs) =
  let (ccenv,ceenv,b) = bind_fv (az,b) nz k in
  let cz = az + List.length (fst ceenv) + List.length (snd ceenv) + 1 in
  let (b,j) = label_closures cz (ld+1) b in
  let (defs,j) = label_closures_defs ez j nz (k+1) defs in
  ((Just (ld,(ccenv,ceenv)),(az,b))::defs, j)

type call_context = TCNonTail | TCTail of nat * nat
(* TCTail j k = in tail position,
   * the called function has j arguments, and
   * k let variables have been bound *)
(* TCNonTail = in tail position, or called from top-level *)

type compiler_result =
  <| out: list bc_inst (* reversed code *)
   ; next_label: nat
   |>

let rec
prim1_to_bc CRef = Ref
and
prim1_to_bc CDer = Deref
and
prim1_to_bc CIsBlock = Stack IsBlock

let rec
prim2_to_bc CAdd = Add
and
prim2_to_bc CSub = Sub
and
prim2_to_bc CMul = Mult
and
prim2_to_bc CDiv = Div
and
prim2_to_bc CMod = Mod
and
prim2_to_bc CLt = Less
and
prim2_to_bc CEq = Equal

let emit = List.foldl (fun s i -> <| s with out = i :: s.out |>)

let rec
get_label s = (<| s with next_label = s.next_label + 1 |>, s.next_label)

let rec
compile_envref sz s (CCArg n) = emit s [Stack (Load (sz + n))]
and
compile_envref sz s (CCEnv n) = emit s [Stack (Load sz); Stack (El n)]
and
compile_envref sz s (CCRef n) = emit (compile_envref sz s (CCEnv n)) [Deref]

let rec
compile_varref sz s (CTLet n) = emit s [Stack (Load (sz - n))]
and
compile_varref _  s (CTDec n) = emit s [Stack (LoadRev n)]
and
compile_varref sz s (CTEnv x) = compile_envref sz s x

(* calling convention:
 * before: env, CodePtr ret, argn, ..., arg1, Block 0 [CodePtr c; env],
 * thus, since env = stack[sz], argk should be CTArg (2 + n - k)
 * after:  retval,
 *)

(* closure representation:
 * Block 3 [CodePtr f; Env]
 * where Env = Number 0 for empty, or else
 * Block 3 [v1,...,vk]
 * with a value for each free variable
 * (some values may be RefPtrs to other (mutrec) closures)
 *)

(* closure construction, for a bundle of nz names, nk defs:
 * - push nz refptrs
 * - push nk CodePtrs, each pointing to the appropriate body
 * - for each def, load its CodePtr, load its environment, cons them up, and
     store them where its CodePtr was
   - for each name, load the refptr and update it with the closure
   - for each name, store the refptr back where it was
 *)

let rec
emit_ceenv env (sz,s) fv = (sz+1,
  compile_varref sz s
  (match el_check fv env with Just x -> x
   | Nothing -> CTLet 0 (* should not happen *) end))

let rec
(* sz                                                           z                             *)
(* e, ..., e, CodePtr_k, cl_1, ..., CodePtr k, ..., CodePtr nz, RefPtr_1 0, ..., RefPtr_nz 0, *)
emit_ceref z (sz,s) j = (sz+1,emit s [Stack (Load ((sz-z)+j))])

let rec
push_lab (s,ecs) (Nothing,_) = (s,([],[])::ecs) (* should not happen *)
and
push_lab (s,ecs) (Just (l,(_,ceenv)),_) =
  (emit s [PushPtr (Lab l)],ceenv::ecs)

let rec
cons_closure env0 sz nk (s,k) (refs,envs) =
  (*                                                                      sz *)
  (* cl_1, ..., CodePtr_k, ..., CodePtr_nk, RefPtr_1 0, ..., RefPtr_nk 0,    *)
  let s = emit s [Stack (Load k)] in
  (* CodePtr_k, cl_1, ..., CodePtr_k, ..., CodePtr_nk, RefPtr_1 0, ..., RefPtr_nk 0, *)
  let (z,s) = List.foldl (emit_ceref (sz+nk)) (sz+nk+nk+1,s) refs in
  let (_,s) = List.foldl (emit_ceenv env0) (z,s) envs in
  (* e_kj, ..., e_k1, CodePtr_k, cl_1, ..., CodePtr_k, ..., CodePtr_nk, RefPtr_1 0, ..., RefPtr_nk 0, *)
  let s = emit s [Stack (Cons 0 (List.length refs + List.length envs))] in
  (* env_k, CodePtr_k, cl_1, ..., CodePtr_k, ..., CodePtr_nk, RefPtr_1 0, ..., RefPtr_nk 0, *)
  let s = emit s [Stack (Cons closure_tag 2)] in
  (* cl_k,  cl_1, ..., CodePtr_k, ..., CodePtr_nk, RefPtr_1 0, ..., RefPtr_nk 0, *)
  let s = emit s [Stack (Store k)] in
  (* cl_1, ..., cl_k, ..., CodePtr_nk, RefPtr_1 0, ..., RefPtr_nk 0, *)
  (s,k+1)

let rec
update_refptr nk (s,k) =
  (* cl_1, ..., cl_nk, RefPtr_1 cl_1, ..., RefPtr_k 0, ..., RefPtr_nk 0, *)
  let s = emit s [Stack (Load (nk + k))] in
  (* RefPtr_k 0, cl_1, ..., cl_nk, RefPtr_1 cl_1, ..., RefPtr_k 0, ..., RefPtr_nk 0, *)
  let s = emit s [Stack (Load (1 + k))] in
  (* cl_k, RefPtr_k 0, cl_1, ..., cl_nk, RefPtr_1 cl_1, ..., RefPtr_k 0, ..., RefPtr_nk 0, *)
  let s = emit s [Update] in
  (* cl_1, ..., cl_nk, RefPtr_1 cl_1, ..., RefPtr_k cl_k, ..., RefPtr_nk 0, *)
  (s,k+1)

let rec
compile_closures env sz s defs =
  let nk = List.length defs in
  let s = num_fold (fun s -> emit s [Stack (PushInt 0); Ref]) s nk in
  (* RefPtr_1 0, ..., RefPtr_nk 0, *)
  let (s,ecs) = List.foldl push_lab (s,[]) (List.reverse defs) in
  (* CodePtr 1, ..., CodePtr nk, RefPtr_1 0, ..., RefPtr_nk 0, *)
  let (s,_k) = List.foldl (cons_closure env sz nk) (s,0) ecs in
  (* cl_1, ..., cl_nk, RefPtr_1 0, ..., RefPtr_nk 0, *)
  let (s,_k) = num_fold (update_refptr nk) (s,0) nk in
  (* cl_1, ..., cl_nk, RefPtr_1 cl_1, ..., RefPtr_nk cl_nk, *)
  let k = nk - 1 in
  num_fold (fun s -> emit s [Stack (Store k)]) s nk
  (* cl_1, ..., cl_nk, *)

let rec
pushret TCNonTail s = s
and
pushret (TCTail j k) s =
 (* val, vk, ..., v1, env, CodePtr ret, argj, ..., arg1, Block 0 [CodePtr c; env], *)
  emit s [Stack (Pops (k+1));
 (* val, CodePtr ret, argj, ..., arg1, Block 0 [CodePtr c; env], *)
          Stack (Load 1);
 (* CodePtr ret, val, CodePtr ret, argj, ..., arg1, Block 0 [CodePtr c; env], *)
          Stack (Store (j+2));
 (* val, CodePtr ret, argj, ..., arg1, CodePtr ret, *)
          Stack (Pops (j+1));
 (* val, CodePtr ret, *)
          Return]

(* stackshiftaux n i j
   xs@ys@zs@st, where n = |ys| = |zs|, i = |xs|, j = |xs|+|ys|
   to
   xs@ys@ys@st *)
(*
let rec
stackshiftaux 0 i j = []
and
stackshiftaux n i j =
  (Load i)::(Store j)::(stackshiftaux (n-1) (i+1) (j+1))
*)
let rec stackshiftaux n i j =
  if n = (0:nat) then []
  else (Load i)::(Store j)::(stackshiftaux (n-1) (i+1) (j+1))
declare termination_argument stackshiftaux = automatic
(*
  xs@(y::ys)@(z::zs)@st
  y::xs@(y::ys)@(z::zs)@st
  xs@(y::ys)@(y::zs)@st
*)

(* stackshift j k
   xs@ys@st, where j=|xs|, k=|ys|
   to
   xs@st *)
(*
let rec
stackshift j 0 = []
and
stackshift 0 k = [Pops (k-1); Pop]
and
stackshift 1 k = [Pops k]
and
stackshift j k =
  if j <= k
  then
    (genlist (fun i -> Store (k-1)) j)@(stackshift 0 (k-j))
  else
    (stackshiftaux k (j-k) j)@(stackshift (j-k) k)
*)
let rec stackshift j k =
  if k = 0 then []
  else if j = 0 then [Pops (k-1); Pop]
  else if j = 1 then [Pops k]
  else if j <= k then (genlist (fun _ -> Store (k-1)) j)++(stackshift 0 (k-j))
  else (stackshiftaux k (j-k) j)++(stackshift (j-k) k)
declare termination_argument stackshift = automatic
(*
  a b c d e x y z
c a b c d e x y z
  a b c d e c y z
d a b c d e c y z
  a b c d e c d z
e a b c d e c d z
  a b c d e c d e
        a b c d e

a b c v w x y z
  b c v w a y z
    c v w a b z
      v w a b c
          a b c

a b c x y z
  b c a y z
    c a b z
      a b c
*)


let rec
compile menv env _ sz s (CRaise e) =
  let s = compile menv env TCNonTail sz s e in
  emit s [PopExc; Return]
and
compile menv env t sz s (CHandle e1 e2) =
  let (s,n0) = get_label s in
  let (s,n1) = get_label s in
  let s = emit s [PushPtr (Lab n0); PushExc] in
  let s = compile menv env TCNonTail (sz+2) s e1 in
  let s = pushret t (emit s [PopExc; Stack (Pops 1)]) in
  let s = emit s [Jump (Lab n1); Label n0] in
  let s = compile_bindings menv env t sz e2 0 s 1 in
  emit s [Label n1]
and
compile _ _ t _ s (CLit (IntLit i)) =
  pushret t (emit s [Stack (PushInt i)])
and
compile _ _ t _ s (CLit (Bool b)) =
  pushret t (emit s [Stack (Cons (bool_to_tag b) 0)])
and
compile _ _ t _ s (CLit Unit) =
  pushret t (emit s [Stack (Cons unit_tag 0)])
and
compile menv env t sz s (CVar id) = pushret t
  (compile_varref sz s
    (match match id with
           | Short vn -> el_check vn env
           | Long mn vn -> Maybe.map CTDec (el_check vn (fapply [] mn menv))
           end
     with Just x -> x
     | Nothing -> CTLet 0 (* should not happen *) end))
and
compile menv env t sz s (CCon n es) =
  pushret t (emit (compile_nts menv env sz s es) [Stack (Cons (n+block_tag) (List.length es))])
and
compile menv env t sz s (CTagEq e n) =
  pushret t (emit (compile menv env TCNonTail sz s e) [Stack (TagEq (n+block_tag))])
and
compile menv env t sz s (CProj e n) =
  pushret t (emit (compile menv env TCNonTail sz s e) [Stack (El n)])
and
compile menv env t sz s (CLet e eb) =
  compile_bindings menv env t sz eb 0 (compile menv env TCNonTail sz s e) 1
and
compile menv env t sz s (CLetrec defs eb) =
  let s = compile_closures env sz s defs in
  compile_bindings menv env t sz eb 0 s (List.length defs)
and
compile menv env t sz s (CCall ck e es) =
  let n = List.length es in
  let s = compile_nts menv env sz s (e::es) in
  match t with
  | TCNonTail ->
    (* argn, ..., arg2, arg1, Block 0 [CodePtr c; env], *)
    let s = emit s [Stack (Load n); Stack (El 1)] in
    (* env, argn, ..., arg1, Block 0 [CodePtr c; env], *)
    let s = emit s [Stack (Load (n+1)); Stack (El 0)] in
    (* CodePtr c, env, argn, ..., arg1, Block 0 [CodePtr c; env], *)
    emit s ((if ck then [Tick] else [])++[CallPtr])
    (* before: env, CodePtr ret, argn, ..., arg1, Block 0 [CodePtr c; env], *)
    (* after:  retval, *)
  | TCTail j k ->
    (* argn, ..., arg1, Block 0 [CodePtr c; env],
     * vk, ..., v1, env1, CodePtr ret, argj, ..., arg1, Block 0 [CodePtr c1; env1], *)
    let s = emit s [Stack (Load (n+1+k+1))] in
    (* CodePtr ret, argn, ..., arg1, Block 0 [CodePtr c; env],
     * vk, ..., v1, env1, CodePtr ret, argj, ..., arg1, Block 0 [CodePtr c1; env1], *)
    let s = emit s [Stack (Load (n+1)); Stack (El 0)] in
    (* CodePtr c, CodePtr ret, argn, ..., arg1, Block 0 [CodePtr c; env],
     * vk, ..., v1, env1, CodePtr ret, argj, ..., arg1, Block 0 [CodePtr c1; env1], *)
    let s = emit s [Stack (Load (n+2)); Stack (El 1)] in
    (* env, CodePtr c, CodePtr ret, argn, ..., arg1, Block 0 [CodePtr c; env],
     * vk, ..., v1, env1, CodePtr ret, argj, ..., arg1, Block 0 [CodePtr c1; env1], *)
    let s = emit s (List.map Stack (stackshift (1+1+1+n+1) (k+1+1+j+1))) in
    emit s ((if ck then [Tick] else [])++[Return])
  end
and
compile menv env t sz s (CPrim1 uop e) =
  pushret t (emit (compile menv env TCNonTail sz s e) [prim1_to_bc uop])
and
compile menv env t sz s (CPrim2 op e1 e2) =
  pushret t (emit (compile_nts menv env sz s [e1;e2]) [Stack (prim2_to_bc op)])
and
compile menv env t sz s (CUpd e1 e2) =
  pushret t (emit (compile_nts menv env sz s [e1;e2]) [Update; Stack (Cons unit_tag 0)])
and
compile menv env t sz s (CIf e1 e2 e3) =
  let s = compile menv env TCNonTail sz s e1 in
  let (s,n0) = get_label s in
  let (s,n1) = get_label s in
  let (s,n2) = get_label s in
  let s = emit s [(JumpIf (Lab n0)); (Jump (Lab n1)); Label n0] in
  let s = compile menv env t sz s e2 in
  let s = emit s [Jump (Lab n2); Label n1] in
  let s = compile menv env t sz s e3 in
  emit s [Label n2]
and
compile_bindings menv env t sz e n s 0 =
  match t with
  | TCTail j k -> compile menv env (TCTail j (k+n)) (sz+n) s e
  | TCNonTail ->
    emit (compile menv env t (sz+n) s e) [Stack (Pops n)]
  end
and
compile_bindings menv env t sz e n s m =
  compile_bindings menv ((CTLet (sz+(n+1)))::env) t sz e (n+1) s (m-1)
and
compile_nts _ _ _ s [] = s
and
compile_nts menv env sz s (e::es) =
  compile_nts menv env (sz+1) (compile menv env TCNonTail sz s e) es

(* code env to bytecode *)

let rec
free_labs ez (CRaise e) = free_labs ez e
and
free_labs ez (CHandle e1 e2) = free_labs ez e1 ++ free_labs (ez+1) e2
and
free_labs _ (CVar _) = []
and
free_labs _ (CLit _) = []
and
free_labs ez (CCon _ es) = free_labs_list ez es
and
free_labs ez (CTagEq e _) = free_labs ez e
and
free_labs ez (CProj e _) = free_labs ez e
and
free_labs ez (CLet e b) = free_labs ez e ++ free_labs (ez+1) b
and
free_labs ez (CLetrec defs e) =
  free_labs_defs ez (List.length defs) (0:nat) defs ++
  free_labs (ez+List.length defs) e
and
free_labs ez (CCall _ e es) = free_labs ez e ++ free_labs_list ez es
and
free_labs ez (CPrim2 _ e1 e2) = free_labs ez e1 ++ free_labs ez e2
and
free_labs ez (CUpd e1 e2) = free_labs ez e1 ++ free_labs ez e2
and
free_labs ez (CPrim1 _ e) = free_labs ez e
and
free_labs ez (CIf e1 e2 e3) = free_labs ez e1 ++ (free_labs ez e2 ++ free_labs ez e3)
and
free_labs_list _ [] = []
and
free_labs_list ez (e::es) = free_labs ez e ++ free_labs_list ez es
and
free_labs_defs _ _ _ [] = []
and
free_labs_defs ez nz ix (d::ds) = free_labs_def ez nz ix d ++ free_labs_defs ez nz (ix+1) ds
and
free_labs_def ez nz ix (Just (l,(cc,(re,ev))),(az,b)) =
  (((ez,nz,ix),((l,(cc,(re,ev))),(az,b)))::(free_labs (1 + List.length re + List.length ev + az) b))
and
free_labs_def ez nz _ (Nothing,(az,b)) = (free_labs (ez+nz+az) b)

let rec cce_aux menv s ((l,(ccenv,_)),(az,b)) =
  compile menv (List.map CTEnv ccenv) (TCTail az 0) 0 (emit s [Label l]) b

let rec
compile_code_env menv s e =
  let (s,l) = get_label s in
  let s = emit s [Jump (Lab l)] in
  let s = List.foldl (cce_aux menv) s (List.map snd (free_labs 0 e)) in
  emit s [Label l]
