(* Translation from IL4 to Intermediate Language *)
open import Pervasives

open import Lib
open import IntLang
open import Ast
open import ConLang
open import PatLang

let rec
free_vars (CRaise e) = free_vars e
and
free_vars (CHandle e1 e2) = lunion (free_vars e1) (lshift 1 (free_vars e2))
and
free_vars (CVar n) = [n]
and
free_vars (CGvar _) = []
and
free_vars (CLit _) = []
and
free_vars (CCon _ es) = free_vars_list es
and
free_vars (CLet bd e eb) = lunion (free_vars e) (if bd then lshift 1 (free_vars eb) else free_vars eb)
and
free_vars (CLetrec defs e) =
  let n = List.length defs in
  lunion (free_vars_defs n defs) (lshift n (free_vars e))
and
free_vars (CCall _ e es) = lunion (free_vars e) (free_vars_list es)
and
free_vars (CPrim1 _ e) = free_vars e
and
free_vars (CPrim2 _ e1 e2) = lunion (free_vars e1) (free_vars e2)
and
free_vars (CUpd _ e1 e2 e3) = lunion (free_vars e1) (lunion (free_vars e2) (free_vars e3))
and
free_vars (CIf e1 e2 e3) = lunion (free_vars e1) (lunion (free_vars e2) (free_vars e3))
and
free_vars (CExtG _) = []
and
free_vars_list [] = []
and
free_vars_list (e::es) = lunion (free_vars e) (free_vars_list es)
and
free_vars_defs _ [] = []
and
free_vars_defs n (d::ds) = lunion (free_vars_def n d) (free_vars_defs n ds)
and
free_vars_def n (Nothing,(k,e)) = lshift (n+k) (free_vars e)
and
free_vars_def _ (Just _,_) = []

let rec
mkshift f k (CRaise e) = CRaise (mkshift f k e)
and
mkshift f k (CHandle e1 e2) = CHandle (mkshift f k e1) (mkshift f (k+1) e2)
and
mkshift f k (CVar v) = CVar (if v < k then v else (f (v-k))+k)
and
mkshift _ _ (CGvar v) = CGvar v
and
mkshift _ _ (CLit l) = CLit l
and
mkshift f k (CCon cn es) = CCon cn (List.map (mkshift f k) es)
and
mkshift f k (CLet bd e b) = CLet bd (mkshift f k e) (mkshift f (if bd then k+1 else k) b)
and
mkshift f k (CLetrec defs b) =
  let ns = List.length defs in
  let defs = List.map (fun cb ->
    match cb with | (Just _,_) -> cb | (Nothing,(az,b)) -> (Nothing,(az,mkshift f (k+ns+az) b)) end)
    defs in
  CLetrec defs (mkshift f (k+ns) b)
and
mkshift f k (CCall ck e es) = CCall ck (mkshift f k e) (List.map (mkshift f k) es)
and
mkshift f k (CPrim1 p1 e) = CPrim1 p1 (mkshift f k e)
and
mkshift f k (CPrim2 p2 e1 e2) = CPrim2 p2 (mkshift f k e1) (mkshift f k e2)
and
mkshift f k (CUpd b e1 e2 e3) = CUpd b (mkshift f k e1) (mkshift f k e2) (mkshift f k e3)
and
mkshift f k (CIf e1 e2 e3) = CIf (mkshift f k e1) (mkshift f k e2) (mkshift f k e3)
and
mkshift _ _ (CExtG n) = CExtG n

let shift n = mkshift (fun v -> v+n)

let rec
opn_to_prim2 Plus = Left (P2p CAdd)
and
opn_to_prim2 Minus = Left (P2p CSub)
and
opn_to_prim2 Times = Left (P2p CMul)
and
opn_to_prim2 Divide = Right (P2p CDiv)
and
opn_to_prim2 Modulo = Right (P2p CMod)

let rec
binop_to_il (Opn opn) Ce1 Ce2 =
  match opn_to_prim2 opn with
  | Left p2 -> CPrim2 p2 Ce1 Ce2
  | Right p2 ->
    CLet true Ce1
      (CLet true (shift 1 0 Ce2)
        (CIf (CPrim2 (P2p CEq) (CVar 0) (CLit (IntLit 0)))
             (CRaise (CCon div_tag []))
             (CPrim2 p2 (CVar 1) (CVar 0))))
  end
and
binop_to_il (Opb opb) Ce1 Ce2 =
  match opb with
  | Lt -> CPrim2 (P2p CLt) Ce1 Ce2
  | Leq -> CPrim2 (P2p CLt) (CPrim2 (P2p CSub) Ce1 Ce2) (CLit (IntLit 1))
  | opb ->
      CLet true Ce1 (
        CLet true (shift 1 0 Ce2) (
          match opb with
          | Gt ->  CPrim2 (P2p CLt) (CVar 0) (CVar 1)
          | Geq -> CPrim2 (P2p CLt) (CPrim2 (P2p CSub) (CVar 0) (CVar 1)) (CLit (IntLit 1))
          | _ -> CLit (IntLit 0) (* should not happen *)
          end))
  end
and
binop_to_il (Chopb opb) Ce1 Ce2 =
  match opb with
  | Lt -> CPrim2 (P2p CLt) (CPrim1 COrd Ce1) (CPrim1 COrd Ce2)
  | Leq -> CPrim2 (P2p CLt) (CPrim2 (P2p CSub) (CPrim1 COrd Ce1) (CPrim1 COrd Ce2)) (CLit (IntLit 1))
  | opb ->
      CLet true (CPrim1 COrd Ce1) (
        CLet true (shift 1 0 (CPrim1 COrd Ce2)) (
          match opb with
          | Gt ->  CPrim2 (P2p CLt) (CVar 0) (CVar 1)
          | Geq -> CPrim2 (P2p CLt) (CPrim2 (P2p CSub) (CVar 0) (CVar 1)) (CLit (IntLit 1))
          | _ -> CLit (IntLit 0) (* should not happen *)
          end))
  end
and
binop_to_il Equality Ce1 Ce2 =
  CLet true (CPrim2 (P2p CEq) Ce1 Ce2)
    (CIf (CPrim1 CIsBlock (CVar 0)) (CVar 0) (CRaise (CCon eq_tag [])))
and
binop_to_il Opapp Ce1 Ce2 =
  CCall true Ce1 [Ce2]
and
binop_to_il Opassign Ce1 Ce2 =
  CUpd Up1 Ce1 (CLit (IntLit 0)) Ce2
and
binop_to_il Aw8alloc Ce1 Ce2 =
  CLet true Ce1
    (CLet true (shift 1 0 Ce2)
      (CIf (CPrim2 (P2p CLt) (CVar 1) (CLit (IntLit 0)))
           (CRaise (CCon subscript_tag []))
           (CPrim2 (P2s CRefB) (CVar 0) (CVar 1))))
and
binop_to_il Aalloc Ce1 Ce2 =
  CLet true Ce1
    (CLet true (shift 1 0 Ce2)
      (CIf (CPrim2 (P2p CLt) (CVar 1) (CLit (IntLit 0)))
           (CRaise (CCon subscript_tag []))
           (CPrim2 (P2s CRefA) (CVar 0) (CVar 1))))
and
binop_to_il Aw8sub Ce1 Ce2 =
  CLet true Ce1
    (CLet true (shift 1 0 Ce2)
      (CIf (CPrim2 (P2p CLt) (CVar 0) (CLit (IntLit 0)))
           (CRaise (CCon subscript_tag []))
           (CIf (CPrim2 (P2p CLt) (CVar 0) (CPrim1 CLenB (CVar 1)))
                (CPrim2 (P2s CDerB) (CVar 1) (CVar 0))
                (CRaise (CCon subscript_tag [])))))
and
binop_to_il Vsub Ce1 Ce2 =
  CLet true Ce1
    (CLet true (shift 1 0 Ce2)
      (CIf (CPrim2 (P2p CLt) (CVar 0) (CLit (IntLit 0)))
           (CRaise (CCon subscript_tag []))
           (CIf (CPrim2 (P2p CLt) (CVar 0) (CPrim1 CLenV (CVar 1)))
                (CPrim2 (P2p CDerV) (CVar 1) (CVar 0))
                (CRaise (CCon subscript_tag [])))))
and
binop_to_il Asub Ce1 Ce2 =
  CLet true Ce1
    (CLet true (shift 1 0 Ce2)
      (CIf (CPrim2 (P2p CLt) (CVar 0) (CLit (IntLit 0)))
           (CRaise (CCon subscript_tag []))
           (CIf (CPrim2 (P2p CLt) (CVar 0) (CPrim1 CLen (CVar 1)))
                (CPrim2 (P2s CDerA) (CVar 1) (CVar 0))
                (CRaise (CCon subscript_tag [])))))
and
binop_to_il Aw8length Ce1 Ce2 = CCon tuple_tag [Ce1;Ce2] (* should not happen *)
and
binop_to_il Vlength   Ce1 Ce2 = CCon tuple_tag [Ce1;Ce2] (* should not happen *)
and
binop_to_il Alength   Ce1 Ce2 = CCon tuple_tag [Ce1;Ce2] (* should not happen *)
and
binop_to_il Aw8update Ce1 Ce2 = CCon tuple_tag [Ce1;Ce2] (* should not happen *)
and
binop_to_il Aupdate   Ce1 Ce2 = CCon tuple_tag [Ce1;Ce2] (* should not happen *)
and
binop_to_il Opref     Ce1 Ce2 = CCon tuple_tag [Ce1;Ce2] (* should not happen *)
and
binop_to_il Opderef   Ce1 Ce2 = CCon tuple_tag [Ce1;Ce2] (* should not happen *)
and
binop_to_il Chr       Ce1 Ce2 = CCon tuple_tag [Ce1;Ce2] (* should not happen *)
and
binop_to_il Ord       Ce1 Ce2 = CCon tuple_tag [Ce1;Ce2] (* should not happen *)
and
binop_to_il Explode   Ce1 Ce2 = CCon tuple_tag [Ce1;Ce2] (* should not happen *)
and
binop_to_il Implode   Ce1 Ce2 = CCon tuple_tag [Ce1;Ce2] (* should not happen *)
and
binop_to_il Strlen    Ce1 Ce2 = CCon tuple_tag [Ce1;Ce2] (* should not happen *)
and
binop_to_il VfromList Ce1 Ce2 = CCon tuple_tag [Ce1;Ce2] (* should not happen *)

let rec
unop_to_il Opref Ce = CPrim1 CRef Ce
and
unop_to_il Opderef Ce = CPrim1 CDer Ce
and
unop_to_il Aw8length Ce = CPrim1 CLenB Ce
and
unop_to_il Vlength Ce = CPrim1 CLenV Ce
and
unop_to_il Alength Ce = CPrim1 CLen Ce
and
unop_to_il Strlen Ce  = CPrim1 CLenS Ce
and
unop_to_il Chr Ce =
  CLet true Ce
    (CIf (CPrim2 (P2p CLt) (CLit (IntLit 0)) (CVar 0))
         (CRaise (CCon chr_tag []))
         (CIf (CPrim2 (P2p CLt) (CVar 0) (CLit (IntLit 256)))
              (CPrim1 CChr (CVar 0))
              (CRaise (CCon chr_tag []))))
and
unop_to_il Ord       Ce = CPrim1 COrd Ce
and
unop_to_il Explode   Ce = CPrim1 CExplode Ce
and
unop_to_il Implode   Ce = CPrim1 CImplode Ce
and
unop_to_il VfromList Ce = CPrim1 CVfromList Ce
and
unop_to_il (Opn _)   Ce = Ce (* should not happen *)
and
unop_to_il (Opb _)   Ce = Ce (* should not happen *)
and
unop_to_il (Chopb _) Ce = Ce (* should not happen *)
and
unop_to_il Equality  Ce = Ce (* should not happen *)
and
unop_to_il Opapp     Ce = Ce (* should not happen *)
and
unop_to_il Opassign  Ce = Ce (* should not happen *)
and
unop_to_il Aw8alloc  Ce = Ce (* should not happen *)
and
unop_to_il Aw8sub    Ce = Ce (* should not happen *)
and
unop_to_il Vsub      Ce = Ce (* should not happen *)
and
unop_to_il Aw8update Ce = Ce (* should not happen *)
and
unop_to_il Aalloc    Ce = Ce (* should not happen *)
and
unop_to_il Asub      Ce = Ce (* should not happen *)
and
unop_to_il Aupdate   Ce = Ce (* should not happen *)

let rec
app_to_il (Op_pat (Op_i2 Aw8update)) [Ce1; Ce2; Ce3] =
  CLet true Ce1
    (CLet true (shift 1 0 Ce2)
      (CLet true (shift 2 0 Ce3)
        (CIf (CPrim2 (P2p CLt) (CVar 1) (CLit (IntLit 0)))
             (CRaise (CCon subscript_tag []))
             (CIf (CPrim2 (P2p CLt) (CVar 1) (CPrim1 CLenB (CVar 2)))
                  (CUpd UpB (CVar 2) (CVar 1) (CVar 0))
                  (CRaise (CCon subscript_tag []))))))
and
app_to_il (Op_pat (Op_i2 Aupdate)) [Ce1; Ce2; Ce3] =
  CLet true Ce1
    (CLet true (shift 1 0 Ce2)
      (CLet true (shift 2 0 Ce3)
        (CIf (CPrim2 (P2p CLt) (CVar 1) (CLit (IntLit 0)))
             (CRaise (CCon subscript_tag []))
             (CIf (CPrim2 (P2p CLt) (CVar 1) (CPrim1 CLen (CVar 2)))
                  (CUpd UpA (CVar 2) (CVar 1) (CVar 0))
                  (CRaise (CCon subscript_tag []))))))
and
app_to_il (Op_pat (Op_i2 op)) [Ce1; Ce2] =
  binop_to_il op Ce1 Ce2
and
app_to_il (Op_pat (Op_i2 op)) [Ce] =
  unop_to_il op Ce
and
app_to_il (Op_pat (Init_global_var_i2 n)) [Ce] =
  CPrim1 (CInitG n) Ce
and
app_to_il (Tag_eq_pat n) [Ce] =
  CPrim1 (CTagEq n) Ce
and
app_to_il (El_pat n) [Ce] =
  CPrim1 (CProj n) Ce
and
app_to_il (Op_pat (Init_global_var_i2 _)) l = CCon tuple_tag l (* should not happen *)
and
app_to_il (Tag_eq_pat _ ) l = CCon tuple_tag l (* should not happen *)
and
app_to_il (El_pat _ )     l = CCon tuple_tag l (* should not happen *)
and
app_to_il _               l = CCon tuple_tag l (* should not happen *)

let rec
exp_to_Cexp (Handle_pat e1 e2) =
  CHandle (exp_to_Cexp e1) (exp_to_Cexp e2)
and
exp_to_Cexp (Raise_pat e) = CRaise (exp_to_Cexp e)
and
exp_to_Cexp (Lit_pat l) = CLit l
and
exp_to_Cexp (Con_pat cn es) =
  CCon cn (exps_to_Cexps es)
and
exp_to_Cexp (Var_local_pat vn) = CVar vn
and
exp_to_Cexp (Var_global_pat vn) = CGvar vn
and
exp_to_Cexp (Fun_pat e) =
  CLetrec [(Nothing,(1,shift 1 1 (exp_to_Cexp e)))] (CVar 0)
and
exp_to_Cexp (App_pat op es) =
  app_to_il op (exps_to_Cexps es)
and
exp_to_Cexp (If_pat e1 e2 e3) =
  let Ce1 = exp_to_Cexp e1 in
  let Ce2 = exp_to_Cexp e2 in
  let Ce3 = exp_to_Cexp e3 in
  CIf Ce1 Ce2 Ce3
and
exp_to_Cexp (Let_pat e b) =
  let Ce = exp_to_Cexp e in
  let Cb = exp_to_Cexp b in
  CLet true Ce Cb
and
exp_to_Cexp (Seq_pat e b) =
  let Ce = exp_to_Cexp e in
  let Cb = exp_to_Cexp b in
  CLet false Ce Cb
and
exp_to_Cexp (Letrec_pat defs b) =
  CLetrec (List.map (fun e -> (Nothing,(1,e))) (exps_to_Cexps defs)) (exp_to_Cexp b)
and
exp_to_Cexp (Extend_global_pat n) = CExtG n
and
exps_to_Cexps [] = []
and
exps_to_Cexps (e::es) =
  exp_to_Cexp e :: exps_to_Cexps es
declare termination_argument exp_to_Cexp = automatic
declare termination_argument exps_to_Cexps = automatic

(* source to intermediate values *)

let rec
v_to_Cv (Litv_pat l) = CLitv l
and
v_to_Cv (Conv_pat cn vs) =
  CConv cn (vs_to_Cvs vs)
and
v_to_Cv (Closure_pat env e) =
  let Cenv = vs_to_Cvs env in
  let Ce = exp_to_Cexp e in
  CRecClos Cenv [(Nothing, (1,shift 1 1 Ce))] 0
and
v_to_Cv (Recclosure_pat env defs vn) =
  let Cenv = vs_to_Cvs env in
  let Cdefs = (List.map (fun e -> (Nothing,(1,e))) (exps_to_Cexps defs)) in
  CRecClos Cenv Cdefs vn
and
v_to_Cv (Loc_pat n) = CLoc n
and
v_to_Cv (Vectorv_pat vs) = CVectorv (vs_to_Cvs vs)
and
vs_to_Cvs [] = []
and
vs_to_Cvs (v::vs) = v_to_Cv v :: vs_to_Cvs vs
