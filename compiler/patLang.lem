(* Removes pattern-matching and variable names. Follows exhLang.
 *
 * The AST of patLang differs from exhLang in that it uses de Bruijn indices,
 * there are no Mat expressions, Handle expressions are simplified to catch and
 * bind any exception without matching on it, and there are new Tag_eq and El
 * expressions for checking the constructor of a compound value and retrieving
 * its arguments. 
 *
 * The values and semantics of patLang are the same as exhLang, modulo the
 * changes to expressions.
 *
 *)

open import Pervasives
open import SemanticPrimitives
open import Ast
open import BigStep
open import ExhLang
open import ConLang
open import DecLang
open import CompilerLib

(* TODO: Lem's builtin find index has a different type *)
val find_index : forall 'a. 'a -> list 'a -> nat -> maybe nat
declare hol target_rep function find_index = `misc$find_index` (* to pick up the definition in miscTheory *)

type op_pat =
  | Op_pat of op_i2
  | Tag_eq_pat of nat
  | El_pat of nat

type exp_pat =
  | Raise_pat of exp_pat
  | Handle_pat of exp_pat * exp_pat
  | Lit_pat of lit
  | Con_pat of nat * list exp_pat
  | Var_local_pat of nat
  | Var_global_pat of nat
  | Fun_pat of exp_pat
  | App_pat of op_pat * list exp_pat
  | If_pat of exp_pat * exp_pat * exp_pat
  | Let_pat of exp_pat * exp_pat
  | Seq_pat of exp_pat * exp_pat
  | Letrec_pat of list exp_pat * exp_pat
  | Extend_global_pat of nat

type v_pat =
  | Litv_pat of lit
  | Conv_pat of nat * list v_pat
  | Closure_pat of list v_pat * exp_pat
  | Recclosure_pat of list v_pat * list exp_pat * nat
  | Loc_pat of nat

val sIf_pat : exp_pat -> exp_pat -> exp_pat -> exp_pat
let
sIf_pat e1 e2 e3 =
  if e2 = Lit_pat (Bool true) && e3 = Lit_pat (Bool false) then e1 else
  match e1 with
  | Lit_pat (Bool b) -> if b then e2 else e3
  | _ -> If_pat e1 e2 e3
  end

val fo_pat : exp_pat -> bool
let rec
fo_pat (Raise_pat _) = true
and
fo_pat (Handle_pat e1 e2) = fo_pat e1 && fo_pat e2
and
fo_pat (Lit_pat _) = true
and
fo_pat (Con_pat _ es) = fo_list_pat es
and
fo_pat (Var_local_pat _) = false
and
fo_pat (Var_global_pat _) = false
and
fo_pat (Fun_pat _) = false
and
fo_pat (App_pat op es) =
  op <> (Op_pat (Op_i2 Opapp)) &&
  op <> (Op_pat (Op_i2 Opderef)) &&
  (forall n. op <> El_pat n) &&
  fo_list_pat es
and
fo_pat (If_pat _ e2 e3) = fo_pat e2 && fo_pat e3
and
fo_pat (Let_pat _ e2) = fo_pat e2
and
fo_pat (Seq_pat _ e2) = fo_pat e2
and
fo_pat (Letrec_pat _ e) = fo_pat e
and
fo_pat (Extend_global_pat _) = true
and
fo_list_pat [] = true
and
fo_list_pat (e::es) = fo_pat e && fo_list_pat es
declare termination_argument fo_pat = automatic
declare termination_argument fo_list_pat = automatic

val pure_op : op -> bool
let pure_op op =
  op <> Opref &&
  op <> Equality &&
  op <> Opapp &&
  op <> Opassign &&
  op <> Aupdate &&
  op <> Aalloc &&
  op <> Asub &&
  op <> (Opn Divide) &&
  op <> (Opn Modulo)

val pure_op_pat : op_pat -> bool
let rec
pure_op_pat (Op_pat (Op_i2 op)) = pure_op op
and
pure_op_pat (Op_pat (Init_global_var_i2 _)) = false
and
pure_op_pat (Tag_eq_pat _) = true
and
pure_op_pat (El_pat _) = true

val pure_pat : exp_pat -> bool
let rec
pure_pat (Raise_pat _) = false
and
pure_pat (Handle_pat e1 _) = pure_pat e1
and
pure_pat (Lit_pat _) = true
and
pure_pat (Con_pat _ es) = pure_list_pat es
and
pure_pat (Var_local_pat _) = true
and
pure_pat (Var_global_pat _) = true
and
pure_pat (Fun_pat _) = true
and
pure_pat (App_pat op es) = pure_list_pat es &&
  (pure_op_pat op || (op = Op_pat(Op_i2 Equality) && fo_list_pat es))
and
pure_pat (If_pat e1 e2 e3) = pure_pat e1 && pure_pat e2 && pure_pat e3
and
pure_pat (Let_pat e1 e2) = pure_pat e1 && pure_pat e2
and
pure_pat (Seq_pat e1 e2) = pure_pat e1 && pure_pat e2
and
pure_pat (Letrec_pat _ e) = pure_pat e
and
pure_pat (Extend_global_pat _) = false
and
pure_list_pat [] = true
and
pure_list_pat (e::es) = pure_pat e && pure_list_pat es
declare termination_argument pure_pat = automatic
declare termination_argument pure_list_pat = automatic

val ground_pat : nat -> exp_pat -> bool
let rec
ground_pat n (Raise_pat e) = ground_pat n e
and
ground_pat n (Handle_pat e1 e2) = ground_pat n e1 && ground_pat (n+1) e2
and
ground_pat _ (Lit_pat _) = true
and
ground_pat n (Con_pat _ es) = ground_list_pat n es
and
ground_pat n (Var_local_pat k) = k < n
and
ground_pat _ (Var_global_pat _) = true
and
ground_pat _ (Fun_pat _) = false
and
ground_pat n (App_pat _ es) = ground_list_pat n es
and
ground_pat n (If_pat e1 e2 e3) = ground_pat n e1 && ground_pat n e2 && ground_pat n e3
and
ground_pat n (Let_pat e1 e2) = ground_pat n e1 && ground_pat (n+1) e2
and
ground_pat n (Seq_pat e1 e2) = ground_pat n e1 && ground_pat n e2
and
ground_pat _ (Letrec_pat _ _) = false
and
ground_pat _ (Extend_global_pat _) = true
and
ground_list_pat _ [] = true
and
ground_list_pat n (e::es) = ground_pat n e && ground_list_pat n es
declare termination_argument ground_pat = automatic
declare termination_argument ground_list_pat = automatic

val sLet_pat : exp_pat -> exp_pat -> exp_pat
let rec
sLet_pat e1 (Var_local_pat 0) = e1
and
sLet_pat e1 e2 =
  if ground_pat 0 e2
  then if pure_pat e1
  then e2
  else Seq_pat e1 e2
  else Let_pat e1 e2

(* bind elements 0..k of the variable n in reverse order above e (first element
 * becomes most recently bound) *)
val Let_Els_pat : nat -> nat -> exp_pat -> exp_pat
let rec
Let_Els_pat _ 0 e = e
and
Let_Els_pat n k e =
  sLet_pat (App_pat (El_pat (k-1)) [Var_local_pat n])
     (Let_Els_pat (n+1) (k-1) e)

(* return an expression that evaluates to whether the pattern matches the most
 * recently bound variable *)
val pat_to_pat : pat_exh -> exp_pat
(* return an expression that evaluates to whether all the m patterns match the
 * m most recently bound variables; n counts 0..m *)
val pats_to_pat : nat -> list pat_exh -> exp_pat
let rec
pat_to_pat (Pvar_exh _) = Lit_pat (Bool true)
and
pat_to_pat (Plit_exh l) = App_pat (Op_pat (Op_i2 Equality)) [Var_local_pat 0; Lit_pat l]
and
pat_to_pat (Pcon_exh tag []) =
  App_pat (Op_pat (Op_i2 Equality)) [Var_local_pat 0; Con_pat tag []]
and
pat_to_pat (Pcon_exh tag ps) =
  sIf_pat (App_pat (Tag_eq_pat tag) [Var_local_pat 0])
    (Let_Els_pat 0 (List.length ps) (pats_to_pat 0 ps))
    (Lit_pat (Bool false))
and
pat_to_pat (Pref_exh p) =
  sLet_pat (App_pat (Op_pat (Op_i2 Opderef)) [Var_local_pat 0])
    (pat_to_pat p)
and
pats_to_pat _ [] = Lit_pat (Bool true)
and
pats_to_pat n (p::ps) =
  sIf_pat (sLet_pat (Var_local_pat n) (pat_to_pat p))
    (pats_to_pat (n+1) ps)
    (Lit_pat (Bool false))

(* given a pattern in a context of bound variables where the most recently
 * bound variable is the value to be matched, return a function that binds new
 * variables (including all the pattern variables) over an expression and the
 * new context of bound variables for the expression as well as the number of
 * newly bound variables *)
val row_to_pat : list (maybe varN) -> pat_exh -> list (maybe varN) * nat * (exp_pat -> exp_pat)
val cols_to_pat : list (maybe varN) -> nat -> nat -> list pat_exh -> list (maybe varN) * nat * (exp_pat -> exp_pat)
let rec
row_to_pat (Nothing::bvs) (Pvar_exh x) = (Just x::bvs, 0, fun e -> e)
and
row_to_pat bvs (Plit_exh _) = (bvs, 0, fun e -> e)
and
row_to_pat bvs (Pcon_exh _ ps) = cols_to_pat bvs 0 0 ps
and
row_to_pat bvs (Pref_exh p) =
  let (bvs,m,f) = row_to_pat (Nothing::bvs) p in
    (bvs, 1+m, fun e -> sLet_pat (App_pat (Op_pat (Op_i2 Opderef)) [Var_local_pat 0]) (f e))
and
row_to_pat bvs _ = (bvs, 0, fun e -> e) (* should not happen *)
and
cols_to_pat bvs _ _ [] = (bvs, 0, fun e -> e)
and
cols_to_pat bvs n k (p::ps) =
  let (bvs,m,f) = row_to_pat (Nothing::bvs) p in
  let (bvs,ms,fs) = cols_to_pat bvs (n+1+m) (k+1) ps in
    (bvs, 1+m+ms,
       fun e ->
           sLet_pat (App_pat (El_pat k) [Var_local_pat n])
             (f (fs e)))

(* translate to i4 under a context of bound variables *)
val exp_to_pat : list (maybe varN) -> exp_exh -> exp_pat
val exps_to_pat : list (maybe varN) -> list exp_exh -> list exp_pat
val funs_to_pat : list (maybe varN) -> list (varN * varN * exp_exh) -> list exp_pat
(* assumes the value being matched is most recently bound *)
val pes_to_pat : list (maybe varN) -> list (pat_exh * exp_exh) -> exp_pat
let rec
exp_to_pat bvs (Raise_exh e) = Raise_pat (exp_to_pat bvs e)
and
exp_to_pat bvs (Handle_exh e1 pes) =
  Handle_pat (exp_to_pat bvs e1) (pes_to_pat (Nothing::bvs) pes)
and
exp_to_pat _ (Lit_exh l) = Lit_pat l
and
exp_to_pat bvs (Con_exh tag es) = Con_pat tag (exps_to_pat bvs es)
and
exp_to_pat bvs (Var_local_exh x) =
  match find_index (Just x) bvs 0 with
  | Just k -> Var_local_pat k
  | Nothing -> Lit_pat Unit (* should not happen *)
  end
and
exp_to_pat _ (Var_global_exh n) = Var_global_pat n
and
exp_to_pat bvs (Fun_exh x e) = Fun_pat (exp_to_pat (Just x::bvs) e)
and
exp_to_pat bvs (App_exh op es) =
  App_pat (Op_pat op) (exps_to_pat bvs es)
and
exp_to_pat bvs (If_exh e1 e2 e3) =
  sIf_pat (exp_to_pat bvs e1) (exp_to_pat bvs e2) (exp_to_pat bvs e3)
and
exp_to_pat bvs (Mat_exh e pes) =
  sLet_pat (exp_to_pat bvs e) (pes_to_pat (Nothing::bvs) pes)
and
exp_to_pat bvs (Let_exh (Just x) e1 e2) =
  sLet_pat (exp_to_pat bvs e1) (exp_to_pat (Just x::bvs) e2)
and
exp_to_pat bvs (Let_exh Nothing e1 e2) =
  Seq_pat (exp_to_pat bvs e1) (exp_to_pat bvs e2)
and
exp_to_pat bvs (Letrec_exh funs e) =
  let bvs = (List.map (fun (f,_,_) -> Just f) funs) ++ bvs in
  Letrec_pat (funs_to_pat bvs funs) (exp_to_pat bvs e)
and
exp_to_pat _ (Extend_global_exh n) = Extend_global_pat n
and
exps_to_pat _ [] = []
and
exps_to_pat bvs (e::es) =
  exp_to_pat bvs e :: exps_to_pat bvs es
and
funs_to_pat _ [] = []
and
funs_to_pat bvs ((_,x,e)::funs) =
  exp_to_pat (Just x::bvs) e :: funs_to_pat bvs funs
and
pes_to_pat bvs [(p,e)] =
  let (bvs,_,f) = row_to_pat bvs p in f (exp_to_pat bvs e)
and
pes_to_pat bvs ((p,e)::pes) =
  sIf_pat (pat_to_pat p)
    (let (bvs,_,f) = row_to_pat bvs p in f (exp_to_pat bvs e))
    (pes_to_pat bvs pes)
and
pes_to_pat _ _ = Lit_pat Unit (* should not happen *)

val build_rec_env_pat : list exp_pat -> list v_pat -> list v_pat
let build_rec_env_pat funs cl_env =
  List.genlist (Recclosure_pat cl_env funs) (List.length funs)

val do_opapp_pat : list v_pat -> maybe (list v_pat * exp_pat)
let do_opapp_pat vs =
  match vs with
    | [Closure_pat env e; v] -> Just (v::env, e)
    | [Recclosure_pat env funs n; v] ->
        if n < List.length funs then
          Just (v::(build_rec_env_pat funs env)++env, List_extra.nth funs n)
        else
          Nothing
    | _ -> Nothing
    end

val do_eq_pat : v_pat -> v_pat -> eq_result
let rec
do_eq_pat (Litv_pat l1) (Litv_pat l2) =
  if lit_same_type l1 l2 then Eq_val (l1 = l2)
  else Eq_type_error
and
do_eq_pat (Loc_pat l1) (Loc_pat l2) = Eq_val (l1 = l2)
and
do_eq_pat (Conv_pat tag1 vs1) (Conv_pat tag2 vs2) =
  if tag1 = tag2 && (List.length vs1 = List.length vs2) then
    do_eq_list_pat vs1 vs2
  else
    Eq_val false
and
do_eq_pat (Closure_pat _ _) (Closure_pat _ _) = Eq_closure
and
do_eq_pat (Closure_pat _ _) (Recclosure_pat _ _ _) = Eq_closure
and
do_eq_pat (Recclosure_pat _ _ _) (Closure_pat _ _) = Eq_closure
and
do_eq_pat (Recclosure_pat _ _ _) (Recclosure_pat _ _ _) = Eq_closure
and
do_eq_pat _ _ = Eq_type_error
and
do_eq_list_pat [] [] = Eq_val true
and
do_eq_list_pat (v1::vs1) (v2::vs2) =
  match do_eq_pat v1 v2 with
    | Eq_closure -> Eq_closure
    | Eq_type_error -> Eq_type_error
    | Eq_val r ->
        if not r then
          Eq_val false
        else
          do_eq_list_pat vs1 vs2
  end
and
do_eq_list_pat _ _ = Eq_val false

val prim_exn_pat : nat -> v_pat
let prim_exn_pat tag = Conv_pat tag []

val do_app_pat : count_store_genv v_pat -> op_pat -> list v_pat -> maybe (count_store_genv v_pat * result v_pat v_pat)
let do_app_pat ((cnt,s),genv) op vs =
  match (op,vs) with
    | (Op_pat (Op_i2 (Opn op)), [Litv_pat (IntLit n1); Litv_pat (IntLit n2)]) ->
        if (op = Divide || (op = Modulo)) && (n2 = 0) then
          Just (((cnt,s),genv), Rerr (Rraise (prim_exn_pat div_tag)))
        else
          Just (((cnt,s),genv), Rval (Litv_pat (IntLit (opn_lookup op n1 n2))))
    | (Op_pat (Op_i2 (Opb op)), [Litv_pat (IntLit n1); Litv_pat (IntLit n2)]) ->
        Just (((cnt,s),genv), Rval (Litv_pat (Bool (opb_lookup op n1 n2))))
    | (Op_pat (Op_i2 Equality), [v1; v2]) ->
        match do_eq_pat v1 v2 with
          | Eq_type_error -> Nothing
          | Eq_closure -> Just (((cnt,s),genv), Rerr (Rraise (prim_exn_pat eq_tag)))
          | Eq_val b -> Just (((cnt,s),genv), Rval(Litv_pat (Bool b)))
        end
    | (Op_pat (Op_i2 Opassign), [Loc_pat lnum; v]) ->
        match store_assign lnum (Refv v) s with
        | Just st -> Just (((cnt,st),genv), Rval (Litv_pat Unit))
        | Nothing -> Nothing
        end
    | (Op_pat (Op_i2 Opderef), [Loc_pat n]) ->
        match store_lookup n s with
          | Just (Refv v) -> Just (((cnt,s),genv),Rval v)
          | _ -> Nothing
        end
    | (Op_pat (Op_i2 Opref), [v]) ->
        let (s',n) = store_alloc (Refv v) s in
          Just (((cnt,s'),genv), Rval (Loc_pat n))
    | (Op_pat (Init_global_var_i2 idx), [v]) ->
        if idx < List.length genv then
          match List_extra.nth genv idx with
            | Nothing -> Just (((cnt,s), List.update genv idx (Just v)), Rval (Litv_pat Unit))
            | Just _ -> Nothing
          end
        else
          Nothing
    | (Op_pat (Op_i2 Aalloc), [Litv_pat (IntLit n); Litv_pat (Word8 w)]) ->
        if n < 0 then
          Just (((cnt,s),genv), Rerr (Rraise (prim_exn_pat subscript_tag)))
        else
          let (st,lnum) =
            store_alloc (W8array (List.replicate (natFromInteger n) w)) s
          in
            Just (((cnt,st),genv), Rval (Loc_pat lnum))
    | (Op_pat (Op_i2 Asub), [Loc_pat lnum; Litv_pat (IntLit i)]) ->
        match store_lookup lnum s with
          | Just (W8array ws) ->
              if i < 0 then
                Just (((cnt,s),genv), Rerr (Rraise (prim_exn_pat subscript_tag)))
              else
                let n = natFromInteger i in
                  if n >= List.length ws then
                    Just (((cnt,s),genv), Rerr (Rraise (prim_exn_pat subscript_tag)))
                  else
                    Just (((cnt,s),genv), Rval (Litv_pat (Word8 (List_extra.nth ws n))))
          | _ -> Nothing
        end
    | (Op_pat (Op_i2 Alength), [Loc_pat n]) ->
        match store_lookup n s with
          | Just (W8array ws) ->
              Just (((cnt,s),genv),Rval (Litv_pat (IntLit (integerFromNat (List.length ws)))))
          | _ -> Nothing
        end
    | (Op_pat (Op_i2 Aupdate), [Loc_pat lnum; Litv_pat (IntLit i); Litv_pat (Word8 w)]) ->
        match store_lookup lnum s with
        | Just (W8array ws) ->
            if i < 0 then
              Just (((cnt,s),genv), Rerr (Rraise (prim_exn_pat subscript_tag)))
            else
              let n = natFromInteger i in
                if n >= List.length ws then
                  Just (((cnt,s),genv), Rerr (Rraise (prim_exn_pat subscript_tag)))
                else
                  match store_assign lnum (W8array (List.update ws n w)) s with
                    | Nothing -> Nothing
                    | Just st -> Just (((cnt,st),genv), Rval (Litv_pat Unit))
                  end
        | _ -> Nothing
        end
    | (Tag_eq_pat n, [Conv_pat tag _]) ->
        Just (((cnt,s),genv), Rval (Litv_pat (Bool (tag = n))))
    | (El_pat n, [Conv_pat _ vs]) ->
        if n < List.length vs then
          Just (((cnt,s),genv), Rval (List_extra.nth vs n))
        else
          Nothing
    | _ -> Nothing
  end

val do_if_pat : v_pat -> exp_pat -> exp_pat -> maybe exp_pat
let do_if_pat v e1 e2 =
  if v = Litv_pat (Bool true) then
    Just e1
  else if v = Litv_pat (Bool false) then
    Just e2
  else
    Nothing

indreln [evaluate_pat : bool -> list v_pat -> count_store_genv v_pat -> exp_pat -> count_store_genv v_pat * result v_pat v_pat -> bool]
and [evaluate_list_pat : bool -> list v_pat -> count_store_genv v_pat -> list exp_pat -> count_store_genv v_pat * result (list v_pat) v_pat -> bool]

lit : forall ck env l s.
true
==>
evaluate_pat ck env s (Lit_pat l) (s, Rval (Litv_pat l))

and

raise1 : forall ck env e s1 s2 v.
evaluate_pat ck s1 env e (s2, Rval v)
==>
evaluate_pat ck s1 env (Raise_pat e) (s2, Rerr (Rraise v))

and

raise2 : forall ck env e s1 s2 err.
evaluate_pat ck s1 env e (s2, Rerr err)
==>
evaluate_pat ck s1 env (Raise_pat e) (s2, Rerr err)

and

handle1 : forall ck s1 s2 env e1 v e2.
evaluate_pat ck s1 env e1 (s2, Rval v)
==>
evaluate_pat ck s1 env (Handle_pat e1 e2) (s2, Rval v)

and

handle2 : forall ck s1 s2 env e1 e2 v bv.
evaluate_pat ck env s1 e1 (s2, Rerr (Rraise v)) &&
evaluate_pat ck (v::env) s2 e2 bv
==>
evaluate_pat ck env s1 (Handle_pat e1 e2) bv

and

handle3 : forall ck s1 s2 env e1 e2 err.
evaluate_pat ck env s1 e1 (s2, Rerr err) &&
(err = Rtimeout_error || (err = Rtype_error))
==>
evaluate_pat ck env s1 (Handle_pat e1 e2) (s2, Rerr err)

and

con1 : forall ck env tag es vs s s'.
evaluate_list_pat ck env s es (s', Rval vs)
==>
evaluate_pat ck env s (Con_pat tag es) (s', Rval (Conv_pat tag vs))

and

con3 : forall ck env tag es err s s'.
evaluate_list_pat ck env s es (s', Rerr err)
==>
evaluate_pat ck env s (Con_pat tag es) (s', Rerr err)

and

var1 : forall ck env n s.
List.length env > n
==>
evaluate_pat ck env s (Var_local_pat n) (s, Rval (List_extra.nth env n))

and

var2 : forall ck env n s.
not (List.length env > n)
==>
evaluate_pat ck env s (Var_local_pat n) (s, Rerr Rtype_error)

and

var3 : forall ck env n v s genv.
(List.length genv > n) &&
(List_extra.nth genv n = Just v)
==>
evaluate_pat ck env (s,genv) (Var_global_pat n) ((s,genv), Rval v)

and

var4 : forall ck env n s genv.
(List.length genv > n) &&
(List_extra.nth genv n = Nothing)
==>
evaluate_pat ck env (s,genv) (Var_global_pat n) ((s,genv), Rerr Rtype_error)

and

var5 : forall ck env n s genv.
not (List.length genv > n)
==>
evaluate_pat ck env (s,genv) (Var_global_pat n) ((s,genv), Rerr Rtype_error)

and

fn : forall ck env e s.
true
==>
evaluate_pat ck env s (Fun_pat e) (s, Rval (Closure_pat env e))

and

app1 : forall ck env s1 es count s2 genv2 vs env2 e2 bv.
evaluate_list_pat ck env s1 es (((count,s2),genv2), Rval vs) &&
do_opapp_pat vs = Just (env2, e2) &&
(ck --> count <> 0) &&
evaluate_pat ck env2 (((if ck then count-1 else count),s2),genv2) e2 bv
==>
evaluate_pat ck env s1 (App_pat (Op_pat (Op_i2 Opapp)) es) bv

and

app2 : forall ck env s1 es count s2 genv2 vs env2 e2.
evaluate_list_pat ck env s1 es (((count,s2),genv2), Rval vs) &&
do_opapp_pat vs = Just (env2, e2) &&
count = 0 &&
ck
==>
evaluate_pat ck env s1 (App_pat (Op_pat (Op_i2 Opapp)) es) (((0,s2),genv2), Rerr Rtimeout_error)

and

app3 : forall ck env s1 es s2 vs.
evaluate_list_pat ck env s1 es (s2, Rval vs) &&
do_opapp_pat vs = Nothing
==>
evaluate_pat ck env s1 (App_pat (Op_pat (Op_i2 Opapp)) es) (s2, Rerr Rtype_error)

and

app4 : forall ck env s1 op es s2 vs s3 res.
evaluate_list_pat ck env s1 es (s2, Rval vs) &&
do_app_pat s2 op vs = Just (s3, res) &&
op <> Op_pat (Op_i2 Opapp)
==>
evaluate_pat ck env s1 (App_pat op es) (s3, res)

and

app5 : forall ck env s1 op es s2 vs.
evaluate_list_pat ck env s1 es (s2, Rval vs) &&
do_app_pat s2 op vs = Nothing &&
op <> Op_pat (Op_i2 Opapp)
==>
evaluate_pat ck env s1 (App_pat op es) (s2, Rerr Rtype_error)

and

app6 : forall ck env s1 op es s2 err.
evaluate_list_pat ck env s1 es (s2, Rerr err)
==>
evaluate_pat ck env s1 (App_pat op es) (s2, Rerr err)

and

if1 : forall ck env e1 e2 e3 v e' bv s1 s2.
evaluate_pat ck env s1 e1 (s2, Rval v) &&
do_if_pat v e2 e3 = Just e' &&
evaluate_pat ck env s2 e' bv
==>
evaluate_pat ck env s1 (If_pat e1 e2 e3) bv

and

if2 : forall ck env e1 e2 e3 v s1 s2.
evaluate_pat ck env s1 e1 (s2, Rval v) &&
do_if_pat v e2 e3 = Nothing
==>
evaluate_pat ck env s1 (If_pat e1 e2 e3) (s2, Rerr Rtype_error)

and

if3 : forall ck env e1 e2 e3 err s s'.
evaluate_pat ck env s e1 (s', Rerr err)
==>
evaluate_pat ck env s (If_pat e1 e2 e3) (s', Rerr err)

and

let1 : forall ck env e1 e2 v bv s1 s2.
evaluate_pat ck env s1 e1 (s2, Rval v) &&
evaluate_pat ck (v::env) s2 e2 bv
==>
evaluate_pat ck env s1 (Let_pat e1 e2) bv

and

let2 : forall ck env e1 e2 err s s'.
evaluate_pat ck env s e1 (s', Rerr err)
==>
evaluate_pat ck env s (Let_pat e1 e2) (s', Rerr err)

and

seq1 : forall ck env e1 e2 v bv s1 s2.
evaluate_pat ck env s1 e1 (s2, Rval v) &&
evaluate_pat ck env s2 e2 bv
==>
evaluate_pat ck env s1 (Seq_pat e1 e2) bv

and

seq2 : forall ck env e1 e2 err s s'.
evaluate_pat ck env s e1 (s', Rerr err)
==>
evaluate_pat ck env s (Seq_pat e1 e2) (s', Rerr err)

and

letrec1 : forall ck env funs e bv s.
evaluate_pat ck ((build_rec_env_pat funs env)++env) s e bv
==>
evaluate_pat ck env s (Letrec_pat funs e) bv

and

extend : forall ck env n s genv.
true
==>
evaluate_pat ck env (s,genv) (Extend_global_pat n) ((s,genv++List.genlist (fun _ -> Nothing) n), Rval (Litv_pat Unit))

and

empty : forall ck env s.
true
==>
evaluate_list_pat ck env s [] (s, Rval [])

and

cons1 : forall ck env e es v vs s1 s2 s3.
evaluate_pat ck env s1 e (s2, Rval v) &&
evaluate_list_pat ck env s2 es (s3, Rval vs)
==>
evaluate_list_pat ck env s1 (e::es) (s3, Rval (v::vs))

and

cons2 : forall ck env e es err s s'.
evaluate_pat ck env s e (s', Rerr err)
==>
evaluate_list_pat ck env s (e::es) (s', Rerr err)

and

cons3 : forall ck env e es v err s1 s2 s3.
evaluate_pat ck env s1 e (s2, Rval v) &&
evaluate_list_pat ck env s2 es (s3, Rerr err)
==>
evaluate_list_pat ck env s1 (e::es) (s3, Rerr err)
