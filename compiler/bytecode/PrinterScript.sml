(*Generated by Lem from printer.lem.*)
open bossLib Theory Parse res_quanTheory
open fixedPointTheory finite_mapTheory listTheory pairTheory pred_setTheory
open integerTheory set_relationTheory sortingTheory stringTheory wordsTheory

val _ = numLib.prefer_num();



open CompilerLibTheory SemanticPrimitivesTheory AstTheory LibTheory

val _ = new_theory "Printer"

(* observable values *)

(*open Ast*)
(*open SemanticPrimitives*)
(*open CompilerLib*)

val _ = Hol_datatype `
 ov =
    OLit of lit
  | OConv of conN id => ov list
  | OFn
  | OLoc of num (* machine, not semantic, address *)
  | OError`;
 (* internal machine value (pointer) that should not appear *)

 val v_to_ov_defn = Hol_defn "v_to_ov" `

(v_to_ov _ (Litv l) = (OLit l))
/\
(v_to_ov s (Conv cn vs) = (OConv cn ( MAP (v_to_ov s) vs)))
/\
(v_to_ov _ (Closure _ _ _) = OFn)
/\
(v_to_ov _ (Recclosure _ _ _) = OFn)
/\
(v_to_ov s (Loc n) = (OLoc ( EL  n  s)))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn v_to_ov_defn;

 val ov_to_string_def = Define `

(ov_to_string (OLit (IntLit (i:int))) =  
(if int_lt i i0 then STRCAT  "-" ( num_to_dec_string ( Num ( int_neg i)))
  else num_to_dec_string ( Num i)))
/\
(ov_to_string (OLit (Bool T)) = "true")
/\
(ov_to_string (OLit (Bool F)) = "false")
/\
(ov_to_string (OLit Unit) = "()")
/\
(ov_to_string (OConv _ _) = "<constructor>")
(*
ov_to_string (OConv cn vs) =
  (id_to_string cn)^" "^
  match intersperse ", " (List.map ov_to_string vs) with
  | [s] -> s
  | ls -> "("^Hol.FLAT ls^")"
  end
*)
/\
(ov_to_string (OLoc _) = "<ref>")
/\
(ov_to_string OFn = "<fn>")
/\
(ov_to_string OError = "<error>")`;


(*
open Compiler

let stack_index cs v = cs.rsz - (the 0 (Lib.lookup v cs.renv)) - 1

let rec
preprint_dec _ (Dtype _) = []
and
preprint_dec cs (Dlet p _) =
  List.map (fun v -> (stack_index cs v,v)) (pat_bindings p [])
and
preprint_dec cs (Dletrec defs) =
  List.map (fun (v,_,_) -> (stack_index cs v,v)) defs

let simple_printer ds cs stack =
  Hol.FLAT
    (List.map
       (fun (n,v) ->
         "val "^v^" = "^
         (ov_to_string
           (bv_to_ov cs
             (List.nth stack n)))^"\n")
       ds)
*)
val _ = export_theory()

