(*Generated by Lem from infer_t.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasivesTheory lem_string_extraTheory astTheory semanticPrimitivesTheory;

val _ = numLib.prefer_num();



val _ = new_theory "infer_t"

(*open import Pervasives*)
(*open import String_extra*)
(*open import Ast*)
(*open import SemanticPrimitives*)


val _ = Hol_datatype `
 infer_t =
    Infer_Tvar_db of num
  | Infer_Tapp of infer_t list => tctor
  | Infer_Tuvar of num`;


 val inf_type_to_string_defn = Hol_defn "inf_type_to_string" `
 (inf_type_to_string (Infer_Tuvar _) = "<unification variable>")
/\ (inf_type_to_string (Infer_Tvar_db n) = (num_to_dec_string n))
/\ (inf_type_to_string (Infer_Tapp [t1;t2] TC_fn) =   
(STRCAT"("  (STRCAT(inf_type_to_string t1)  (STRCAT"->"  (STRCAT(inf_type_to_string t2) ")")))))
/\ (inf_type_to_string (Infer_Tapp ts TC_fn) = "<bad function type>")
/\ (inf_type_to_string (Infer_Tapp ts TC_tup) =   
(STRCAT"("  (STRCAT(inf_types_to_string ts) ")")))
/\ (inf_type_to_string (Infer_Tapp [] tc1) = (tc_to_string tc1))
/\ (inf_type_to_string (Infer_Tapp ts tc1) =   
(STRCAT"("  (STRCAT(inf_types_to_string ts)  (STRCAT") " (tc_to_string tc1)))))
/\ (inf_types_to_string [] = "")
/\ (inf_types_to_string [t] = (inf_type_to_string t))
/\ (inf_types_to_string (t::ts) =  (STRCAT(inf_type_to_string t)  (STRCAT", " (inf_types_to_string ts))))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn inf_type_to_string_defn;


(*
(WF_REL_TAC `measure (\x. case x of INL x => infer_t_size x | INR x => infer_t1_size x)`);
*)

val _ = export_theory()

