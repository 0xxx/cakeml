(*Generated by Lem from patLang.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasivesTheory semanticPrimitivesTheory astTheory bigStepTheory exhLangTheory conLangTheory compilerLibTheory;

val _ = numLib.prefer_num();



val _ = new_theory "patLang"

(* Removes pattern-matching and variable names. Follows exhLang.
 *
 * The AST of patLang differs from exhLang in that it uses de Bruijn indices,
 * there are no Mat expressions, Handle expressions are simplified to catch and
 * bind any exception without matching on it, and there are new Tag_eq and El
 * expressions for checking the constructor of a compound value and retrieving
 * its arguments. 
 *
 * The values and semantics of patLang are the same as exhLang, modulo the
 * changes to expressions.
 *
 *)

(*open import Pervasives*)
(*open import SemanticPrimitives*)
(*open import Ast*)
(*open import BigStep*)
(*open import ExhLang*)
(*open import ConLang*)
(*open import CompilerLib*)

(* TODO: Lem's builtin find index has a different type *)
(*val find_index : forall 'a. 'a -> list 'a -> nat -> maybe nat*) (* to pick up the definition in miscTheory *)

(* TODO: move *)
val _ = type_abbrev((*  'a *) "store_genv" , ``: 'a store # ( 'a option) list``);

val _ = Hol_datatype `
 uop_pat =
    Opderef_pat
  | Opref_pat
  | Init_global_var_pat of num
  | Tag_eq_pat of num
  | El_pat of num`;


val _ = Hol_datatype `
 exp_pat =
    Raise_pat of exp_pat
  | Handle_pat of exp_pat => exp_pat
  | Lit_pat of lit
  | Con_pat of num => exp_pat list
  | Var_local_pat of num
  | Var_global_pat of num
  | Fun_pat of exp_pat
  | Uapp_pat of uop_pat => exp_pat
  | App_pat of op => exp_pat => exp_pat
  | If_pat of exp_pat => exp_pat => exp_pat
  | Let_pat of exp_pat => exp_pat
  | Seq_pat of exp_pat => exp_pat
  | Letrec_pat of exp_pat list => exp_pat
  | Extend_global_pat of num`;


val _ = Hol_datatype `
 v_pat =
    Litv_pat of lit
  | Conv_pat of num => v_pat list
  | Closure_pat of v_pat list => exp_pat
  | Recclosure_pat of v_pat list => exp_pat list => num
  | Loc_pat of num`;


(*val uop_to_pat : uop_i2 -> uop_pat*)
 val _ = Define `

(uop_to_pat Opderef_i2 = Opderef_pat)
/\
(uop_to_pat Opref_i2 = Opref_pat)
/\
(uop_to_pat (Init_global_var_i2 n) = (Init_global_var_pat n))`;


(*val sIf_pat : exp_pat -> exp_pat -> exp_pat -> exp_pat*)
val _ = Define `

(sIf_pat e1 e2 e3 =  
(if (e2 = Lit_pat (Bool T)) /\ (e3 = Lit_pat (Bool F)) then e1 else
  (case e1 of
    Lit_pat (Bool b) => if b then e2 else e3
  | _ => If_pat e1 e2 e3
  )))`;


(*val fo_pat : exp_pat -> bool*)
 val _ = Define `

(fo_pat (Raise_pat _) = T)
/\
(fo_pat (Handle_pat e1 e2) = (fo_pat e1 /\ fo_pat e2))
/\
(fo_pat (Lit_pat _) = T)
/\
(fo_pat (Con_pat _ es) = (fo_list_pat es))
/\
(fo_pat (Var_local_pat _) = F)
/\
(fo_pat (Var_global_pat _) = F)
/\
(fo_pat (Fun_pat _) = F)
/\
(fo_pat (Uapp_pat uop _) = ((uop <> Opderef_pat) /\ (! n. uop <> El_pat n)))
/\
(fo_pat (App_pat op _ _) = (op <> Opapp))
/\
(fo_pat (If_pat _ e2 e3) = (fo_pat e2 /\ fo_pat e3))
/\
(fo_pat (Let_pat _ e2) = (fo_pat e2))
/\
(fo_pat (Seq_pat _ e2) = (fo_pat e2))
/\
(fo_pat (Letrec_pat _ e) = (fo_pat e))
/\
(fo_pat (Extend_global_pat _) = T)
/\
(fo_list_pat [] = T)
/\
(fo_list_pat (e::es) = (fo_pat e /\ fo_list_pat es))`;


(*val pure_uop_pat : uop_pat -> bool*)
 val _ = Define `

(pure_uop_pat Opderef_pat = T)
/\
(pure_uop_pat Opref_pat = F)
/\
(pure_uop_pat (Init_global_var_pat _) = F)
/\
(pure_uop_pat (Tag_eq_pat _) = T)
/\
(pure_uop_pat (El_pat _) = T)`;


(*val pure_op : op -> bool*)
 val _ = Define `

(pure_op (Opn opn) = ((opn <> Divide) /\ (opn <> Modulo)))
/\
(pure_op (Opb _) = T)
/\
(pure_op Equality = F)
/\
(pure_op Opapp = F)
/\
(pure_op Opassign = F)`;


(*val pure_pat : exp_pat -> bool*)
 val _ = Define `

(pure_pat (Raise_pat _) = F)
/\
(pure_pat (Handle_pat e1 _) = (pure_pat e1))
/\
(pure_pat (Lit_pat _) = T)
/\
(pure_pat (Con_pat _ es) = (pure_list_pat es))
/\
(pure_pat (Var_local_pat _) = T)
/\
(pure_pat (Var_global_pat _) = T)
/\
(pure_pat (Fun_pat _) = T)
/\
(pure_pat (Uapp_pat uop e) = (pure_uop_pat uop /\ pure_pat e))
/\
(pure_pat (App_pat op e1 e2) = (pure_pat e1 /\ pure_pat e2 /\
  (pure_op op \/ ((op = Equality) /\ fo_pat e1 /\ fo_pat e2))))
/\
(pure_pat (If_pat e1 e2 e3) = (pure_pat e1 /\ pure_pat e2 /\ pure_pat e3))
/\
(pure_pat (Let_pat e1 e2) = (pure_pat e1 /\ pure_pat e2))
/\
(pure_pat (Seq_pat e1 e2) = (pure_pat e1 /\ pure_pat e2))
/\
(pure_pat (Letrec_pat _ e) = (pure_pat e))
/\
(pure_pat (Extend_global_pat _) = F)
/\
(pure_list_pat [] = T)
/\
(pure_list_pat (e::es) = (pure_pat e /\ pure_list_pat es))`;


(*val ground_pat : nat -> exp_pat -> bool*)
 val _ = Define `

(ground_pat n (Raise_pat e) = (ground_pat n e))
/\
(ground_pat n (Handle_pat e1 e2) = (ground_pat n e1 /\ ground_pat (n+ 1) e2))
/\
(ground_pat _ (Lit_pat _) = T)
/\
(ground_pat n (Con_pat _ es) = (ground_list_pat n es))
/\
(ground_pat n (Var_local_pat k) = (k < n))
/\
(ground_pat _ (Var_global_pat _) = T)
/\
(ground_pat _ (Fun_pat _) = F)
/\
(ground_pat n (Uapp_pat _ e) = (ground_pat n e))
/\
(ground_pat n (App_pat _ e1 e2) = (ground_pat n e1 /\ ground_pat n e2))
/\
(ground_pat n (If_pat e1 e2 e3) = (ground_pat n e1 /\ ground_pat n e2 /\ ground_pat n e3))
/\
(ground_pat n (Let_pat e1 e2) = (ground_pat n e1 /\ ground_pat (n+ 1) e2))
/\
(ground_pat n (Seq_pat e1 e2) = (ground_pat n e1 /\ ground_pat n e2))
/\
(ground_pat _ (Letrec_pat _ _) = F)
/\
(ground_pat _ (Extend_global_pat _) = T)
/\
(ground_list_pat _ [] = T)
/\
(ground_list_pat n (e::es) = (ground_pat n e /\ ground_list_pat n es))`;


(*val sLet_pat : exp_pat -> exp_pat -> exp_pat*)
 val _ = Define `

(sLet_pat e1 (Var_local_pat 0) = e1)
/\
(sLet_pat e1 e2 =  
(if ground_pat( 0) e2
  then if pure_pat e1
  then e2
  else Seq_pat e1 e2
  else Let_pat e1 e2))`;


(* bind elements 0..k of the variable n in reverse order above e (first element
 * becomes most recently bound) *)
(*val Let_Els_pat : nat -> nat -> exp_pat -> exp_pat*)
 val Let_Els_pat_defn = Hol_defn "Let_Els_pat" `

(Let_Els_pat _ 0 e = e)
/\
(Let_Els_pat n k e =  
(sLet_pat (Uapp_pat (El_pat (k -  1)) (Var_local_pat n))
     (Let_Els_pat (n+ 1) (k -  1) e)))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn Let_Els_pat_defn;

(* return an expression that evaluates to whether the pattern matches the most
 * recently bound variable *)
(*val pat_to_pat : pat_exh -> exp_pat*)
(* return an expression that evaluates to whether all the m patterns match the
 * m most recently bound variables; n counts 0..m *)
(*val pats_to_pat : nat -> list pat_exh -> exp_pat*)
 val pat_to_pat_defn = Hol_defn "pat_to_pat" `

(pat_to_pat (Pvar_exh _) = (Lit_pat (Bool T)))
/\
(pat_to_pat (Plit_exh l) = (App_pat Equality (Var_local_pat( 0)) (Lit_pat l)))
/\
(pat_to_pat (Pcon_exh tag []) =  
(App_pat Equality (Var_local_pat( 0)) (Con_pat tag [])))
/\
(pat_to_pat (Pcon_exh tag ps) =  
(sIf_pat (Uapp_pat (Tag_eq_pat tag) (Var_local_pat( 0)))
    (Let_Els_pat( 0) (LENGTH ps) (pats_to_pat( 0) ps))
    (Lit_pat (Bool F))))
/\
(pat_to_pat (Pref_exh p) =  
(sLet_pat (Uapp_pat Opderef_pat (Var_local_pat( 0)))
    (pat_to_pat p)))
/\
(pats_to_pat _ [] = (Lit_pat (Bool T)))
/\
(pats_to_pat n (p::ps) =  
(sIf_pat (sLet_pat (Var_local_pat n) (pat_to_pat p))
    (pats_to_pat (n+ 1) ps)
    (Lit_pat (Bool F))))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn pat_to_pat_defn;

(* given a pattern in a context of bound variables where the most recently
 * bound variable is the value to be matched, return a function that binds new
 * variables (including all the pattern variables) over an expression and the
 * new context of bound variables for the expression as well as the number of
 * newly bound variables *)
(*val row_to_pat : list (maybe varN) -> pat_exh -> list (maybe varN) * nat * (exp_pat -> exp_pat)*)
(*val cols_to_pat : list (maybe varN) -> nat -> nat -> list pat_exh -> list (maybe varN) * nat * (exp_pat -> exp_pat)*)
 val row_to_pat_defn = Hol_defn "row_to_pat" `

(row_to_pat (NONE::bvs) (Pvar_exh x) = ((SOME x::bvs), 0, (\ e .  e)))
/\
(row_to_pat bvs (Plit_exh _) = (bvs, 0, (\ e .  e)))
/\
(row_to_pat bvs (Pcon_exh _ ps) = (cols_to_pat bvs( 0)( 0) ps))
/\
(row_to_pat bvs (Pref_exh p) =  
(let (bvs,m,f) = (row_to_pat (NONE::bvs) p) in
    (bvs,( 1+m), (\ e .  sLet_pat (Uapp_pat Opderef_pat (Var_local_pat( 0))) (f e)))))
/\
(row_to_pat bvs _ = (bvs, 0, (\ e .  e))) (* should not happen *)
/\
(cols_to_pat bvs _ _ [] = (bvs, 0, (\ e .  e)))
/\
(cols_to_pat bvs n k (p::ps) =  
(let (bvs,m,f) = (row_to_pat (NONE::bvs) p) in
  let (bvs,ms,fs) = (cols_to_pat bvs ((n+ 1)+m) (k+ 1) ps) in
    (bvs,(( 1+m)+ms),       
(\ e . 
           sLet_pat (Uapp_pat (El_pat k) (Var_local_pat n))
             (f (fs e))))))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn row_to_pat_defn;

(* translate to i4 under a context of bound variables *)
(*val exp_to_pat : list (maybe varN) -> exp_exh -> exp_pat*)
(*val exps_to_pat : list (maybe varN) -> list exp_exh -> list exp_pat*)
(*val funs_to_pat : list (maybe varN) -> list (varN * varN * exp_exh) -> list exp_pat*)
(* assumes the value being matched is most recently bound *)
(*val pes_to_pat : list (maybe varN) -> list (pat_exh * exp_exh) -> exp_pat*)
 val exp_to_pat_defn = Hol_defn "exp_to_pat" `

(exp_to_pat bvs (Raise_exh e) = (Raise_pat (exp_to_pat bvs e)))
/\
(exp_to_pat bvs (Handle_exh e1 pes) =  
(Handle_pat (exp_to_pat bvs e1) (pes_to_pat (NONE::bvs) pes)))
/\
(exp_to_pat _ (Lit_exh l) = (Lit_pat l))
/\
(exp_to_pat bvs (Con_exh tag es) = (Con_pat tag (exps_to_pat bvs es)))
/\
(exp_to_pat bvs (Var_local_exh x) =  
((case misc$find_index (SOME x) bvs( 0) of
    SOME k => Var_local_pat k
  | NONE => Lit_pat Unit (* should not happen *)
  )))
/\
(exp_to_pat _ (Var_global_exh n) = (Var_global_pat n))
/\
(exp_to_pat bvs (Fun_exh x e) = (Fun_pat (exp_to_pat (SOME x::bvs) e)))
/\
(exp_to_pat bvs (Uapp_exh uop e) = (Uapp_pat (uop_to_pat uop) (exp_to_pat bvs e)))
/\
(exp_to_pat bvs (App_exh op e1 e2) =  
(App_pat op (exp_to_pat bvs e1) (exp_to_pat bvs e2)))
/\
(exp_to_pat bvs (If_exh e1 e2 e3) =  
(sIf_pat (exp_to_pat bvs e1) (exp_to_pat bvs e2) (exp_to_pat bvs e3)))
/\
(exp_to_pat bvs (Mat_exh e pes) =  
(sLet_pat (exp_to_pat bvs e) (pes_to_pat (NONE::bvs) pes)))
/\
(exp_to_pat bvs (Let_exh (SOME x) e1 e2) =  
(sLet_pat (exp_to_pat bvs e1) (exp_to_pat (SOME x::bvs) e2)))
/\
(exp_to_pat bvs (Let_exh NONE e1 e2) =  
(Seq_pat (exp_to_pat bvs e1) (exp_to_pat bvs e2)))
/\
(exp_to_pat bvs (Letrec_exh funs e) =  
(let bvs = ((MAP (\p7325 .  
  (case (p7325 ) of ( (f,_,_) ) => SOME f )) funs) ++ bvs) in
  Letrec_pat (funs_to_pat bvs funs) (exp_to_pat bvs e)))
/\
(exp_to_pat _ (Extend_global_exh n) = (Extend_global_pat n))
/\
(exps_to_pat _ [] = ([]))
/\
(exps_to_pat bvs (e::es) =  
(exp_to_pat bvs e :: exps_to_pat bvs es))
/\
(funs_to_pat _ [] = ([]))
/\
(funs_to_pat bvs ((_,x,e)::funs) =  
(exp_to_pat (SOME x::bvs) e :: funs_to_pat bvs funs))
/\
(pes_to_pat bvs [(p,e)] = 
  ((case row_to_pat bvs p of (bvs,_,f) => f (exp_to_pat bvs e) )))
/\
(pes_to_pat bvs ((p,e)::pes) =  
(sIf_pat (pat_to_pat p)
    ((case row_to_pat bvs p of (bvs,_,f) => f (exp_to_pat bvs e) ))
    (pes_to_pat bvs pes)))
/\
(pes_to_pat _ _ = (Lit_pat Unit))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn exp_to_pat_defn; (* should not happen *)

(*val do_uapp_pat : store_genv v_pat -> uop_pat -> v_pat -> maybe (store_genv v_pat * v_pat)*)
val _ = Define `
 (do_uapp_pat (s,genv) uop v =  
((case uop of
      Opderef_pat =>
        (case v of
            Loc_pat n =>
              (case store_lookup n s of
                  SOME v => SOME ((s,genv),v)
                | NONE => NONE
              )
          | _ => NONE
        )
    | Opref_pat =>
        let (s',n) = (store_alloc v s) in
          SOME ((s',genv), Loc_pat n)
    | Init_global_var_pat idx =>
        if idx < LENGTH genv then
          (case EL idx genv of
              NONE => SOME ((s, LUPDATE (SOME v) idx genv), Litv_pat Unit)
            | SOME _ => NONE
          )
        else
          NONE
    | Tag_eq_pat n =>
        (case v of
            Conv_pat tag _ =>
              SOME ((s,genv), Litv_pat (Bool (tag = n)))
          | _ => NONE
        )
    | El_pat n =>
        (case v of
            Conv_pat _ vs =>
              if n < LENGTH vs then
                SOME ((s,genv), EL n vs)
              else
                NONE
          | _ => NONE
        )
  )))`;


(*val build_rec_env_pat : list exp_pat -> list v_pat -> list v_pat*)
val _ = Define `
 (build_rec_env_pat funs cl_env =  
(GENLIST (Recclosure_pat cl_env funs) (LENGTH funs)))`;


(*val exn_env_pat : list v_pat*)
val _ = Define `
 (exn_env_pat = ([]))`;


(*val do_eq_pat : v_pat -> v_pat -> eq_result*)
 val do_eq_pat_defn = Hol_defn "do_eq_pat" `

(do_eq_pat (Litv_pat l1) (Litv_pat l2) =  
(Eq_val (l1 = l2)))
/\
(do_eq_pat (Loc_pat l1) (Loc_pat l2) = (Eq_val (l1 = l2)))
/\
(do_eq_pat (Conv_pat tag1 vs1) (Conv_pat tag2 vs2) =  
(if (tag1 = tag2) /\ (LENGTH vs1 = LENGTH vs2) then
    do_eq_list_pat vs1 vs2
  else
    Eq_val F))
/\
(do_eq_pat (Closure_pat _ _) (Closure_pat _ _) = Eq_closure)
/\
(do_eq_pat (Closure_pat _ _) (Recclosure_pat _ _ _) = Eq_closure)
/\
(do_eq_pat (Recclosure_pat _ _ _) (Closure_pat _ _) = Eq_closure)
/\
(do_eq_pat (Recclosure_pat _ _ _) (Recclosure_pat _ _ _) = Eq_closure)
/\
(do_eq_pat _ _ = Eq_type_error)
/\
(do_eq_list_pat [] [] = (Eq_val T))
/\
(do_eq_list_pat (v1::vs1) (v2::vs2) =  
((case do_eq_pat v1 v2 of
      Eq_closure => Eq_closure
    | Eq_type_error => Eq_type_error
    | Eq_val r =>
        if ~ r then
          Eq_val F
        else
          do_eq_list_pat vs1 vs2
  )))
/\
(do_eq_list_pat _ _ = (Eq_val F))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn do_eq_pat_defn;

(*val do_app_pat : list v_pat -> store v_pat -> op -> v_pat -> v_pat -> maybe (list v_pat * store v_pat * exp_pat)*)
val _ = Define `
 (do_app_pat env' s op v1 v2 =  
((case (op, v1, v2) of
      (Opapp, Closure_pat env e, v) =>
        SOME ((v::env), s, e)
    | (Opapp, Recclosure_pat env funs n, v) =>
        if n < LENGTH funs then
          SOME ((v::((build_rec_env_pat funs env)++env)), s, EL n funs)
        else
          NONE
    | (Opn op, Litv_pat (IntLit n1), Litv_pat (IntLit n2)) =>
        if ((op = Divide) \/ (op = Modulo)) /\ (n2 =( 0 : int)) then
          SOME (exn_env_pat, s, Raise_pat (Con_pat div_tag []))
        else
          SOME (env', s, Lit_pat (IntLit (opn_lookup op n1 n2)))
    | (Opb op, Litv_pat (IntLit n1), Litv_pat (IntLit n2)) =>
        SOME (env', s, Lit_pat (Bool (opb_lookup op n1 n2)))
    | (Equality, v1, v2) =>
        (case do_eq_pat v1 v2 of
            Eq_type_error => NONE
          | Eq_closure => SOME (exn_env_pat, s, Raise_pat (Con_pat eq_tag []))
          | Eq_val b => SOME (env', s, Lit_pat (Bool b))
        )
    | (Opassign, (Loc_pat lnum), v) =>
        (case store_assign lnum v s of
          SOME st => SOME (env', st, Lit_pat Unit)
        | NONE => NONE
        )
    | _ => NONE
  )))`;


(*val do_if_pat : v_pat -> exp_pat -> exp_pat -> maybe exp_pat*)
val _ = Define `
 (do_if_pat v e1 e2 =  
(if v = Litv_pat (Bool T) then
    SOME e1
  else if v = Litv_pat (Bool F) then
    SOME e2
  else
    NONE))`;


val _ = Hol_reln ` (! ck env l s.
T
==>
evaluate_pat ck env s (Lit_pat l) (s, Rval (Litv_pat l)))

/\ (! ck env e s1 s2 v.
(evaluate_pat ck s1 env e (s2, Rval v))
==>
evaluate_pat ck s1 env (Raise_pat e) (s2, Rerr (Rraise v)))

/\ (! ck env e s1 s2 err.
(evaluate_pat ck s1 env e (s2, Rerr err))
==>
evaluate_pat ck s1 env (Raise_pat e) (s2, Rerr err))

/\ (! ck s1 s2 env e1 v e2.
(evaluate_pat ck s1 env e1 (s2, Rval v))
==>
evaluate_pat ck s1 env (Handle_pat e1 e2) (s2, Rval v))

/\ (! ck s1 s2 env e1 e2 v bv.
(evaluate_pat ck env s1 e1 (s2, Rerr (Rraise v)) /\
evaluate_pat ck (v::env) s2 e2 bv)
==>
evaluate_pat ck env s1 (Handle_pat e1 e2) bv)

/\ (! ck s1 s2 env e1 e2 err.
(evaluate_pat ck env s1 e1 (s2, Rerr err) /\
((err = Rtimeout_error) \/ (err = Rtype_error)))
==>
evaluate_pat ck env s1 (Handle_pat e1 e2) (s2, Rerr err))

/\ (! ck env tag es vs s s'.
(evaluate_list_pat ck env s es (s', Rval vs))
==>
evaluate_pat ck env s (Con_pat tag es) (s', Rval (Conv_pat tag vs)))

/\ (! ck env tag es err s s'.
(evaluate_list_pat ck env s es (s', Rerr err))
==>
evaluate_pat ck env s (Con_pat tag es) (s', Rerr err))

/\ (! ck env n s.
(LENGTH env > n)
==>
evaluate_pat ck env s (Var_local_pat n) (s, Rval (EL n env)))

/\ (! ck env n s.
(~ (LENGTH env > n))
==>
evaluate_pat ck env s (Var_local_pat n) (s, Rerr Rtype_error))

/\ (! ck env n v s genv.
((LENGTH genv > n) /\
(EL n genv = SOME v))
==>
evaluate_pat ck env (s,genv) (Var_global_pat n) ((s,genv), Rval v))

/\ (! ck env n s genv.
((LENGTH genv > n) /\
(EL n genv = NONE))
==>
evaluate_pat ck env (s,genv) (Var_global_pat n) ((s,genv), Rerr Rtype_error))

/\ (! ck env n s genv.
(~ (LENGTH genv > n))
==>
evaluate_pat ck env (s,genv) (Var_global_pat n) ((s,genv), Rerr Rtype_error))

/\ (! ck env e s.
T
==>
evaluate_pat ck env s (Fun_pat e) (s, Rval (Closure_pat env e)))

/\ (! ck env uop e v v' s1 s2 count s3 genv2 genv3.
(evaluate_pat ck env s1 e (((count,s2),genv2), Rval v) /\
(do_uapp_pat (s2,genv2) uop v = SOME ((s3,genv3),v')))
==>
evaluate_pat ck env s1 (Uapp_pat uop e) (((count,s3),genv3), Rval v'))

/\ (! ck env uop e v s1 s2 count genv2.
(evaluate_pat ck env s1 e (((count,s2),genv2), Rval v) /\
(do_uapp_pat (s2,genv2) uop v = NONE))
==>
evaluate_pat ck env s1 (Uapp_pat uop e) (((count,s2),genv2), Rerr Rtype_error))

/\ (! ck env uop e err s s'.
(evaluate_pat ck env s e (s', Rerr err))
==>
evaluate_pat ck env s (Uapp_pat uop e) (s', Rerr err))

/\ (! ck env op e1 e2 v1 v2 env' e3 bv s1 s2 s3 count s4 genv3.
(evaluate_pat ck env s1 e1 (s2, Rval v1) /\
evaluate_pat ck env s2 e2 (((count,s3),genv3), Rval v2) /\
(do_app_pat env s3 op v1 v2 = SOME (env', s4, e3)) /\
((ck /\ (op = Opapp)) ==> ~ (count =( 0))) /\
evaluate_pat ck env' (((if ck then bigStep$dec_count op count else count),s4),genv3) e3 bv)
==>
evaluate_pat ck env s1 (App_pat op e1 e2) bv)

/\ (! ck env op e1 e2 v1 v2 env' e3 s1 s2 s3 count s4 genv3.
(evaluate_pat ck env s1 e1 (s2, Rval v1) /\
evaluate_pat ck env s2 e2 (((count,s3),genv3), Rval v2) /\
(do_app_pat env s3 op v1 v2 = SOME (env', s4, e3)) /\
(count = 0) /\
(op = Opapp) /\
ck)
==>
evaluate_pat ck env s1 (App_pat op e1 e2) ((( 0,s4),genv3),Rerr Rtimeout_error))

/\ (! ck env op e1 e2 v1 v2 s1 s2 s3 count genv3.
(evaluate_pat ck env s1 e1 (s2, Rval v1) /\
evaluate_pat ck env s2 e2 (((count,s3),genv3),Rval v2) /\
(do_app_pat env s3 op v1 v2 = NONE))
==>
evaluate_pat ck env s1 (App_pat op e1 e2) (((count,s3),genv3), Rerr Rtype_error))

/\ (! ck env op e1 e2 v1 err s1 s2 s3.
(evaluate_pat ck env s1 e1 (s2, Rval v1) /\
evaluate_pat ck env s2 e2 (s3, Rerr err))
==>
evaluate_pat ck env s1 (App_pat op e1 e2) (s3, Rerr err))

/\ (! ck env op e1 e2 err s s'.
(evaluate_pat ck env s e1 (s', Rerr err))
==>
evaluate_pat ck env s (App_pat op e1 e2) (s', Rerr err))

/\ (! ck env e1 e2 e3 v e' bv s1 s2.
(evaluate_pat ck env s1 e1 (s2, Rval v) /\
(do_if_pat v e2 e3 = SOME e') /\
evaluate_pat ck env s2 e' bv)
==>
evaluate_pat ck env s1 (If_pat e1 e2 e3) bv)

/\ (! ck env e1 e2 e3 v s1 s2.
(evaluate_pat ck env s1 e1 (s2, Rval v) /\
(do_if_pat v e2 e3 = NONE))
==>
evaluate_pat ck env s1 (If_pat e1 e2 e3) (s2, Rerr Rtype_error))

/\ (! ck env e1 e2 e3 err s s'.
(evaluate_pat ck env s e1 (s', Rerr err))
==>
evaluate_pat ck env s (If_pat e1 e2 e3) (s', Rerr err))

/\ (! ck env e1 e2 v bv s1 s2.
(evaluate_pat ck env s1 e1 (s2, Rval v) /\
evaluate_pat ck (v::env) s2 e2 bv)
==>
evaluate_pat ck env s1 (Let_pat e1 e2) bv)

/\ (! ck env e1 e2 err s s'.
(evaluate_pat ck env s e1 (s', Rerr err))
==>
evaluate_pat ck env s (Let_pat e1 e2) (s', Rerr err))

/\ (! ck env e1 e2 v bv s1 s2.
(evaluate_pat ck env s1 e1 (s2, Rval v) /\
evaluate_pat ck env s2 e2 bv)
==>
evaluate_pat ck env s1 (Seq_pat e1 e2) bv)

/\ (! ck env e1 e2 err s s'.
(evaluate_pat ck env s e1 (s', Rerr err))
==>
evaluate_pat ck env s (Seq_pat e1 e2) (s', Rerr err))

/\ (! ck env funs e bv s.
(evaluate_pat ck ((build_rec_env_pat funs env)++env) s e bv)
==>
evaluate_pat ck env s (Letrec_pat funs e) bv)

/\ (! ck env n s genv.
T
==>
evaluate_pat ck env (s,genv) (Extend_global_pat n) ((s,(genv++GENLIST (\n7441 .  
  (case (n7441 ) of ( _ ) => NONE )) n)), Rval (Litv_pat Unit)))

/\ (! ck env s.
T
==>
evaluate_list_pat ck env s [] (s, Rval []))

/\ (! ck env e es v vs s1 s2 s3.
(evaluate_pat ck env s1 e (s2, Rval v) /\
evaluate_list_pat ck env s2 es (s3, Rval vs))
==>
evaluate_list_pat ck env s1 (e::es) (s3, Rval (v::vs)))

/\ (! ck env e es err s s'.
(evaluate_pat ck env s e (s', Rerr err))
==>
evaluate_list_pat ck env s (e::es) (s', Rerr err))

/\ (! ck env e es v err s1 s2 s3.
(evaluate_pat ck env s1 e (s2, Rval v) /\
evaluate_list_pat ck env s2 es (s3, Rerr err))
==>
evaluate_list_pat ck env s1 (e::es) (s3, Rerr err))`;
val _ = export_theory()

