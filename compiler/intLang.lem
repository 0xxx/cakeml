(* Intermediate language *)
open import Pervasives

open import Lib
open import Ast
open import SemanticPrimitives
open import DecLang
open import ConLang

(* Syntax *)

(* pure applicative primitives with bytecode counterparts *)
type Cprim1 = CRef | CDer | CIsBlock | CLen | CLenB | CLenV | CLenS
            | CTagEq of nat | CProj of nat | CInitG of nat
            | CVfromList | CExplode | CImplode | CChr | COrd
type Cprim2p = CAdd | CSub | CMul | CDiv | CMod | CLt | CEq | CDerV
type Cprim2s = CRefB | CDerB | CRefA | CDerA
type Cprim2 = P2p of Cprim2p | P2s of Cprim2s
type Cupd = Up1 | UpA | UpB

(* values in compile-time environment *)
type ccbind = CCArg of nat | CCRef of nat | CCEnv of nat
type ctbind = CTLet of nat | CTDec of nat | CTEnv of ccbind
(* CTLet n means stack[sz - n]
   CTDec n means globals[n]
   CCArg n means stack[sz + n]
   CCEnv n means El n of the environment, which is at stack[sz]
   CCRef n means El n of the environment, but it's a ref pointer *)
type ccenv = list ccbind
type ceenv = list nat * list nat (* indices of recursive closures, free variables *)
type ctenv = list ctbind

type Cexp =
  | CRaise of Cexp
  | CHandle of Cexp * Cexp
  | CVar of nat
  | CGvar of nat
  | CLit of lit
  | CCon of nat * list Cexp
  | CLet of bool * Cexp * Cexp
  | CLetrec of list ((maybe (nat * (ccenv * ceenv))) * (nat * Cexp)) * Cexp
  | CCall of bool * Cexp * list Cexp
  | CPrim1 of Cprim1 * Cexp
  | CPrim2 of Cprim2 * Cexp * Cexp
  | CUpd of Cupd * Cexp * Cexp * Cexp
  | CIf of Cexp * Cexp * Cexp
  | CExtG of nat

type def = ((maybe (nat * (ccenv * ceenv))) * (nat * Cexp))

(* Semantics *)

type Cv =
  | CLitv of lit
  | CConv of nat * list Cv
  | CRecClos of list Cv * list def * nat
  | CLoc of nat
  | CVectorv of list Cv

let rec
no_closures (CLitv _) = true
and
no_closures (CConv _ vs) = List.all no_closures vs
and
no_closures (CVectorv vs) = List.all no_closures vs
and
no_closures (CRecClos _ _ _) = false
and
no_closures (CLoc _) = true

let rec
doPrim2 op (CLitv (IntLit x)) (CLitv (IntLit y)) = Rval (CLitv (IntLit (op x y)))
and
doPrim2 _ _ _ = Rerr Rtype_error

val do_Ceq : Cv -> Cv -> eq_result
let rec
do_Ceq (CLitv l1) (CLitv l2) =
  if lit_same_type l1 l2 then Eq_val (l1 = l2) else Eq_type_error
and
do_Ceq (CLoc l1) (CLoc l2) = Eq_val (l1 = l2)
and
do_Ceq (CConv cn1 vs1) (CConv cn2 vs2) =
  if cn1 = cn2 && List.length vs1 = List.length vs2 then
    do_Ceq_list vs1 vs2
  else
    Eq_val false
and
do_Ceq (CVectorv vs1) (CVectorv vs2) =
  if List.length vs1 = List.length vs2 then
    do_Ceq_list vs1 vs2
  else
    Eq_val false
and
do_Ceq (CLitv _) (CConv _ _) = Eq_val false
and
do_Ceq (CConv _ _) (CLitv _) = Eq_val false
and
do_Ceq (CRecClos _ _ _) (CRecClos _ _ _) = Eq_closure
and
do_Ceq _ _ = Eq_type_error
and
do_Ceq_list [] [] = Eq_val true
and
do_Ceq_list (v1::vs1) (v2::vs2) =
  match do_Ceq v1 v2 with
    | Eq_closure -> Eq_closure
    | Eq_type_error -> Eq_type_error
    | Eq_val r ->
        if not r then
          Eq_val false
        else
          do_Ceq_list vs1 vs2
  end
and
  do_Ceq_list _ _ = Eq_val false

let CBoolv b = CConv (if b then true_tag else false_tag) []

let rec
CevalPrim2p CAdd = doPrim2 (+)
and
CevalPrim2p CSub = doPrim2 (-)
and
CevalPrim2p CMul = doPrim2 ( * )
and
CevalPrim2p CDiv = doPrim2 (div)
and
CevalPrim2p CMod = doPrim2 (mod)
and
CevalPrim2p CLt = fun v1 v2 ->
    match (v1,v2) with
    | (CLitv (IntLit x), CLitv (IntLit y)) ->
        Rval (CBoolv (x < y))
    | _ -> Rerr Rtype_error
    end
and
CevalPrim2p CEq = fun v1 v2 ->
  match do_Ceq v1 v2 with
    | Eq_val b -> Rval (CBoolv b)
    | Eq_closure -> Rval (CLitv (IntLit 0))
    | Eq_type_error -> Rerr Rtype_error
  end
and
CevalPrim2p CDerV = fun v1 v2 ->
  match (v1,v2) with
    | (CVectorv vs, CLitv (IntLit i)) ->
      if i < 0 || List.length vs <= natFromInteger i then
        Rerr Rtype_error
      else
        Rval (List_extra.nth vs (natFromInteger i))
    | _ -> Rerr Rtype_error
  end

val CevalPrim2s : store Cv -> Cprim2s -> Cv -> Cv -> store Cv * result Cv Cv
let rec
CevalPrim2s s CRefB (CLitv (Word8 w)) (CLitv (IntLit n)) =
  if n < 0 then (s, Rerr Rtype_error) else
  (s++[W8array (List.replicate (natFromInteger n) w)],
   Rval (CLoc (List.length s)))
and
CevalPrim2s s CRefA v (CLitv (IntLit n)) =
  if n < 0 then (s, Rerr Rtype_error) else
  (s++[Varray (List.replicate (natFromInteger n) v)],
   Rval (CLoc (List.length s)))
and
CevalPrim2s s CDerB (CLoc n) (CLitv (IntLit i)) =
  (s,
  match el_check n s with
  | Just (W8array ws) ->
    if i < 0 || List.length ws <= natFromInteger i then
      Rerr Rtype_error
    else
      Rval (CLitv (Word8 (List_extra.nth ws (natFromInteger i))))
  | _ -> Rerr Rtype_error
  end)
and
CevalPrim2s s CDerA (CLoc n) (CLitv (IntLit i)) =
  (s,
  match el_check n s with
  | Just (Varray vs) ->
    if i < 0 || List.length vs <= natFromInteger i then
      Rerr Rtype_error
    else
      Rval (List_extra.nth vs (natFromInteger i))
  | _ -> Rerr Rtype_error
  end)
and
CevalPrim2s s _ _ _ = (s, Rerr Rtype_error)

let rec
CevalPrim2 csg (P2p x) y z = (csg, CevalPrim2p x y z)
and
CevalPrim2 ((c,s),g) (P2s x) y z =
  let (s,r) = CevalPrim2s s x y z in (((c,s),g),r)

val CevalUpd : Cupd -> store Cv -> Cv -> Cv -> Cv -> store Cv * result Cv Cv
let rec
CevalUpd Up1 s (CLoc n) (CLitv (IntLit i)) (v:Cv) =
  match el_check n s with
  | Just (Refv _) ->
    if i = 0 then
      (List.update s n (Refv v), Rval (CConv tuple_tag []))
    else (s, Rerr Rtype_error)
  | _ -> (s, Rerr Rtype_error)
  end
and
CevalUpd UpA s (CLoc n) (CLitv (IntLit i)) (v:Cv) =
  match el_check n s with
  | Just (Varray vs) ->
    if 0 <= i && natFromInteger i < List.length vs then
      (List.update s n (Varray (List.update vs (natFromInteger i) v)), Rval (CConv tuple_tag []))
    else (s, Rerr Rtype_error)
  | _ -> (s, Rerr Rtype_error)
  end
and
CevalUpd UpB s (CLoc n) (CLitv (IntLit i)) (CLitv (Word8 w)) =
  match el_check n s with
  | Just (W8array ws) ->
    if 0 <= i && natFromInteger i < List.length ws then
      (List.update s n (W8array (List.update ws (natFromInteger i) w)), Rval (CConv tuple_tag []))
    else (s, Rerr Rtype_error)
  | _ -> (s, Rerr Rtype_error)
  end
and
CevalUpd _ s _ _ _ = (s, Rerr Rtype_error)

val CvFromList : Cv -> maybe (list Cv)
let rec CvFromList (CConv g []) = if g = nil_tag then Just [] else Nothing
and CvFromList (CConv g [h;t]) = if g = cons_tag then
  match CvFromList t with
  | Just t -> Just (h::t)
  | Nothing -> Nothing
  end
                                  else Nothing
and CvFromList _ = Nothing
declare termination_argument CvFromList = automatic

val Cimplode : Cv -> maybe (list char)
let rec Cimplode (CConv g []) = if g = nil_tag then Just [] else Nothing
and Cimplode (CConv g [CLitv(Char c);t]) = if g = cons_tag then
  match Cimplode t with
  | Just t -> Just (c::t)
  | Nothing -> Nothing
  end
                                  else Nothing
and Cimplode _ = Nothing
declare termination_argument Cimplode = automatic

val Cexplode : list char -> Cv
let rec Cexplode [] = CConv nil_tag []
and Cexplode (c::cs) = CConv cons_tag [CLitv(Char c);Cexplode cs]

val CevalPrim1 : Cprim1 -> store_genv Cv -> Cv -> store_genv Cv * result Cv Cv
let rec
CevalPrim1 CRef (s,g) v = ((s++[Refv v],g), Rval (CLoc (List.length s)))
and
CevalPrim1 CDer (s,g) (CLoc n) =
  ((s,g), match el_check n s with
      | Just (Refv v) -> Rval v
      | _ -> Rerr Rtype_error
      end)
and
CevalPrim1 CLen (s,g) (CLoc n) =
  ((s,g), match el_check n s with
      | Just (Refv _) -> Rval (CLitv (IntLit 1))
      | Just (Varray vs) -> Rval (CLitv (IntLit (integerFromNat (List.length vs))))
      | _ -> Rerr Rtype_error
      end)
and
CevalPrim1 CLenB (s,g) (CLoc n) =
  ((s,g), match el_check n s with
      | Just (W8array ws) -> Rval (CLitv (IntLit (integerFromNat (List.length ws))))
      | _ -> Rerr Rtype_error
      end)
and
CevalPrim1 CLenV sg (CVectorv vs) =
  (sg, Rval (CLitv (IntLit (integerFromNat (List.length vs)))))
and
CevalPrim1 CLenS sg (CLitv (StrLit str)) =
  (sg, Rval (CLitv (IntLit (integerFromNat (stringLength str)))))
and
CevalPrim1 CIsBlock sg (CLitv l) =
  (sg, Rval (CBoolv (match l with IntLit _ -> false | Word8 _ -> false | Char _ -> false | _ -> true end)))
and
CevalPrim1 CIsBlock sg (CConv t []) =
  (sg, Rval (CBoolv true))
and
CevalPrim1 (CTagEq n) sg (CConv t _) =
  (sg, Rval (CBoolv (n = t)))
and
CevalPrim1 (CProj n) sg (CConv _ vs) =
  (sg, match el_check n vs with
      | Nothing -> Rerr Rtype_error
      | Just v -> Rval v
      end)
and
CevalPrim1 (CInitG n) (s,g) v =
  if n < List.length g && List_extra.nth g n = Nothing
  then ((s,List.update g n (Just v)),Rval (CConv tuple_tag []))
  else ((s,g), Rerr Rtype_error)
and
CevalPrim1 CExplode sg (CLitv (StrLit s)) =
  (sg, Rval (Cexplode (toCharList s)))
and
CevalPrim1 CImplode sg v =
  (sg, match Cimplode v with
       | Just s -> Rval (CLitv (StrLit (toString s)))
       | Nothing -> Rerr Rtype_error
       end)
and
CevalPrim1 CVfromList sg v =
  (sg, match CvFromList v with
       | Just vs -> Rval (CVectorv vs)
       | Nothing -> Rerr Rtype_error
       end)
and
CevalPrim1 CChr sg (CLitv (IntLit i)) =
  (sg, if i < 0 || i > 255 then Rerr Rtype_error
       else Rval (CLitv (Char (String_extra.chr (natFromInteger i)))))
and
CevalPrim1 COrd sg (CLitv (Char c)) =
  (sg, Rval (CLitv (IntLit (integerFromNat (String_extra.ord c)))))
and
CevalPrim1 _ sg _ = (sg, Rerr Rtype_error)

indreln
[Cevaluate : count_store_genv Cv -> list Cv -> Cexp -> (count_store_genv Cv * result Cv Cv) -> bool]
and
[Cevaluate_list : count_store_genv Cv -> list Cv -> list Cexp -> (count_store_genv Cv * result (list Cv) Cv) -> bool]

raise1 : forall s env exp s' v.
Cevaluate s env exp (s', Rval v)
==>
Cevaluate s env (CRaise exp) (s', Rerr (Rraise v))

and
raise2 : forall s env exp s' err.
Cevaluate s env exp (s', Rerr err)
==>
Cevaluate s env (CRaise exp) (s', Rerr err)

and
handle1 : forall s1 env e1 e2 s2 v.
Cevaluate s1 env e1 (s2, Rval v)
==>
Cevaluate s1 env (CHandle e1 e2) (s2, Rval v)
and
handle2 : forall s1 env e1 e2 s2 v res.
Cevaluate s1 env e1 (s2, Rerr (Rraise v)) &&
Cevaluate s2 (v::env) e2 res
==>
Cevaluate s1 env (CHandle e1 e2) res
and
handle3 : forall s1 env e1 e2 s2 err.
Cevaluate s1 env e1 (s2, Rerr err) &&
(forall v. not (err = Rraise v))
==>
Cevaluate s1 env (CHandle e1 e2) (s2, Rerr err)

and
var : forall s env n.
n < List.length env
==>
Cevaluate s env (CVar n) (s, Rval (List_extra.nth env n))

and
gvar : forall s g n v env.
n < List.length g &&
List_extra.nth g n = Just v
==>
Cevaluate (s,g) env (CGvar n) ((s,g), Rval v)

and
lit : forall s env l.
true
==>
Cevaluate s env (CLit l) (s, Rval (CLitv l))

and
con1 : forall s env n es s' vs.
Cevaluate_list s env es (s', Rval vs)
==>
Cevaluate s env (CCon n es) (s', Rval (CConv n vs))
and
con2 : forall s env n es s' err.
Cevaluate_list s env es (s', Rerr err)
==>
Cevaluate s env (CCon n es) (s', Rerr err)

and
let1 : forall s env bd e b s' v r.
Cevaluate s env e (s', Rval v) &&
Cevaluate s' (if bd then (v::env) else env) b r
==>
Cevaluate s env (CLet bd e b) r
and
let2 : forall s env bd e b s' err.
Cevaluate s env e (s', Rerr err)
==>
Cevaluate s env (CLet bd e b) (s', Rerr err)

and
letrec : forall s env defs b r.
Cevaluate s
  (List.append (genlist (CRecClos env defs) (List.length defs)) env)
  b r
==>
Cevaluate s env (CLetrec defs b) r

and
call1 : forall s env ck e es s' cenv defs n def b env'' count s'' g vs r.
Cevaluate s env e (s', Rval (CRecClos cenv defs n)) &&
n < List.length defs && List_extra.nth defs n = def &&
Cevaluate_list s' env es (((count,s''),g), Rval vs) &&
(ck --> count > 0) &&
(true,List.length vs,env'',b) =
  match def with
  | (Nothing,(k,b)) ->
    (true
    ,k
    ,(List.reverse vs)++((genlist (CRecClos cenv defs) (List.length defs))++cenv)
    ,b)
  | (Just (_,(_,(recs,envs))),(k,b)) ->
    (List.all (fun n -> n < List.length cenv) envs &&
     List.all (fun n -> n < List.length defs) recs
    ,k
    ,List.reverse vs
    ++(((CRecClos cenv defs n)::List.map (CRecClos cenv defs) recs)
    ++List.map (List_extra.nth cenv) envs)
    ,b)
  end &&
Cevaluate ((if ck then count-1 else count,s''),g) env'' b r
==>
Cevaluate s env (CCall ck e es) r

and
call2 : forall s env ck e es s' cenv defs n def count s'' g vs.
Cevaluate s env e (s', Rval (CRecClos cenv defs n)) &&
n < List.length defs && List_extra.nth defs n = def &&
Cevaluate_list s' env es (((count,s''),g), Rval vs) &&
ck && count = 0
==>
Cevaluate s env (CCall ck e es) (((count,s''),g), Rerr Rtimeout_error)

and
call3 : forall s env ck e s' v es s'' err.
Cevaluate s env e (s', Rval v) &&
Cevaluate_list s' env es (s'', Rerr err)
==>
Cevaluate s env (CCall ck e es) (s'', Rerr err)

and
call4 : forall s env ck e es s' err.
Cevaluate s env e (s', Rerr err)
==>
Cevaluate s env (CCall ck e es) (s', Rerr err)

and
prim11 : forall s env uop e count s' g v s'' g' res.
Cevaluate s env e (((count,s'),g), Rval v) &&
((s'',g'),res) = CevalPrim1 uop (s',g) v
==>
Cevaluate s env (CPrim1 uop e) (((count,s''),g'),res)
and
prim12 : forall s env uop e s' err.
Cevaluate s env e (s', Rerr err)
==>
Cevaluate s env (CPrim1 uop e) (s', Rerr err)

and
prim21 : forall s env p2 e1 e2 s' v1 v2.
Cevaluate_list s env [e1;e2] (s', Rval [v1;v2]) &&
(v2 = CLitv (IntLit 0) --> p2 <> (P2p CDiv) && p2 <> (P2p CMod))
==>
Cevaluate s env (CPrim2 p2 e1 e2) (CevalPrim2 s' p2 v1 v2)
and
prim22 : forall s env p2 e1 e2 s' err.
Cevaluate_list s env [e1;e2] (s', Rerr err)
==>
Cevaluate s env (CPrim2 p2 e1 e2) (s', Rerr err)

and
upd1 : forall s env b e1 e2 e3 count s' g v1 v2 v3 s'' res.
Cevaluate_list s env [e1;e2;e3] (((count,s'),g), Rval [v1;v2;v3]) &&
(s'',res) = CevalUpd b s' v1 v2 v3
==>
Cevaluate s env (CUpd b e1 e2 e3) (((count,s''),g),res)
and
upd2 : forall s env b e1 e2 e3 s' err.
Cevaluate_list s env [e1;e2;e3] (s', Rerr err)
==>
Cevaluate s env (CUpd b e1 e2 e3) (s', Rerr err)

and
if1 : forall s env e1 e2 e3 s' b1 r.
Cevaluate s env e1 (s', Rval (CBoolv b1)) &&
Cevaluate s' env (if b1 then e2 else e3) r
==>
Cevaluate s env (CIf e1 e2 e3) r
and
if2 : forall s env e1 e2 e3 s' err.
Cevaluate s env e1 (s', Rerr err)
==>
Cevaluate s env (CIf e1 e2 e3) (s', Rerr err)

and
extg : forall cs g env n.
true
==>
Cevaluate (cs,g) env (CExtG n) ((cs,g++(genlist (fun _ -> Nothing) n)),Rval (CConv tuple_tag []))

and
empty : forall s env.
true
==>
Cevaluate_list s env [] (s, Rval [])
and
cons1 : forall s env e es s' v s'' vs.
Cevaluate s env e (s', Rval v) &&
Cevaluate_list s' env es (s'', Rval vs)
==>
Cevaluate_list s env (e::es) (s'', Rval (v::vs))
and
cons2 : forall s env e es s' err.
Cevaluate s env e (s', Rerr err)
==>
Cevaluate_list s env (e::es) (s', Rerr err)
and
cons3 : forall s env e es s' v s'' err.
Cevaluate s env e (s', Rval v) &&
Cevaluate_list s' env es (s'', Rerr err)
==>
Cevaluate_list s env (e::es) (s'', Rerr err)

(* Equivalence relations on expressions and values *)

let rec
syneq_cb_aux d nz ez (Nothing,(az,e)) = (d<nz,az,e,nz+ez,
  fun n -> if n < nz then CCRef n else
           if n < nz+ez then CCEnv (n-nz)
           else CCArg n)
and
syneq_cb_aux d nz ez (Just(_,(_,(recs,envs))),(az,e)) =
  (List.all (fun n -> n < nz) recs &&
   List.all (fun n -> n < ez) envs &&
   d < nz
  ,az
  ,e
  ,1+List.length recs+List.length envs
  ,fun n -> if n = 0 then if d < nz then CCRef d else CCArg n else
            if n < 1+List.length recs then
              if (List_extra.nth recs (n-1)) < nz
              then CCRef (List_extra.nth recs (n-1))
              else CCArg n
            else
            if n < 1+List.length recs+List.length envs then
              if (List_extra.nth envs (n-1-List.length recs)) < ez
              then CCEnv (List_extra.nth envs (n-1-List.length recs))
              else CCArg n
            else CCArg n
  )

let rec syneq_cb_V (az:nat) r1 r2 V V' v1 v2 =
  (v1 < az && v2 = v1) ||
  (az <= v1 && az <= v2 &&
   ((exists j1 j2. (r1 (v1-az) = CCRef j1 && r2 (v2-az) = CCRef j2 && V' j1 j2)) ||
    (exists j1 j2. (r1 (v1-az) = CCEnv j1 && r2 (v2-az) = CCEnv j2 && V  j1 j2)) ||
    (exists j. (r1 (v1-az) = CCArg j) && r2 (v2-az) = CCArg j)))

indreln
[syneq_exp : nat -> nat -> (nat -> nat -> bool) -> Cexp -> Cexp -> bool]
and
[syneq_defs : nat -> nat -> (nat -> nat -> bool) -> list def -> list def -> (nat -> nat -> bool) -> bool]

raise : forall ez1 ez2 V e1 e2.
syneq_exp ez1 ez2 V e1 e2
==>
syneq_exp ez1 ez2 V (CRaise e1) (CRaise e2)
and
handle : forall ez1 ez2 V e1 b1 e2 b2.
syneq_exp ez1 ez2 V e1 e2 &&
syneq_exp (ez1+1) (ez2+1) (fun v1 v2 -> (v1 = 0 && v2 = 0) || 0 < v1 && 0 < v2 && V (v1-1) (v2-1)) b1 b2
==>
syneq_exp ez1 ez2 V (CHandle e1 b1) (CHandle e2 b2)
and
var : forall ez1 ez2 V v1 v2.
(v1 < ez1 && v2 < ez2 && V v1 v2) ||
(ez1 <= v1 && ez2 <= v2 && v1 = v2)
==>
syneq_exp ez1 ez2 V (CVar v1) (CVar v2)
and
gvar : forall ez1 ez2 V vn.
true
==>
syneq_exp ez1 ez2 V (CGvar vn) (CGvar vn)
and
lit : forall ez1 ez2 V lit.
true
==>
syneq_exp ez1 ez2 V (CLit lit) (CLit lit)
and
con : forall ez1 ez2 V cn es1 es2.
all2 (syneq_exp ez1 ez2 V) es1 es2
==>
syneq_exp ez1 ez2 V (CCon cn es1) (CCon cn es2)
and
lt : forall ez1 ez2 V bd e1 b1 e2 b2.
syneq_exp ez1 ez2 V e1 e2 &&
if bd then
  syneq_exp (ez1+1) (ez2+1) (fun v1 v2 -> (v1 = 0 && v2 = 0) || 0 < v1 && 0 < v2 && V (v1-1) (v2-1)) b1 b2
else
  syneq_exp ez1 ez2 V b1 b2
==>
syneq_exp ez1 ez2 V (CLet bd e1 b1) (CLet bd e2 b2)
and
letrec : forall ez1 ez2 V defs1 defs2 b1 b2 V'.
syneq_defs ez1 ez2 V defs1 defs2 V' &&
syneq_exp (ez1+(List.length defs1)) (ez2+(List.length defs2))
 (fun v1 v2 -> (v1 < List.length defs1 && v2 < List.length defs2
                && V' v1 v2) ||
               (List.length defs1 <= v1 && List.length defs2 <= v2
                && V (v1-List.length defs1) (v2-List.length defs2)))
 b1 b2
==>
syneq_exp ez1 ez2 V (CLetrec defs1 b1) (CLetrec defs2 b2)
and
call : forall ez1 ez2 V ck e1 e2 es1 es2.
syneq_exp ez1 ez2 V e1 e2 &&
all2 (syneq_exp ez1 ez2 V) es1 es2
==>
syneq_exp ez1 ez2 V (CCall ck e1 es1) (CCall ck e2 es2)
and
prim1 : forall ez1 ez2 V p1 e1 e2.
syneq_exp ez1 ez2 V e1 e2
==>
syneq_exp ez1 ez2 V (CPrim1 p1 e1) (CPrim1 p1 e2)
and
prim2 : forall ez1 ez2 V p2 e11 e21 e12 e22.
syneq_exp ez1 ez2 V e11 e12 &&
syneq_exp ez1 ez2 V e21 e22
==>
syneq_exp ez1 ez2 V (CPrim2 p2 e11 e21) (CPrim2 p2 e12 e22)
and
upd : forall ez1 ez2 V b e11 e21 e31 e12 e22 e32.
syneq_exp ez1 ez2 V e11 e12 &&
syneq_exp ez1 ez2 V e21 e22 &&
syneq_exp ez1 ez2 V e31 e32
==>
syneq_exp ez1 ez2 V (CUpd b e11 e21 e31) (CUpd b e12 e22 e32)
and
if_ : forall ez1 ez2 V e11 e21 e31 e12 e22 e32.
syneq_exp ez1 ez2 V e11 e12 &&
syneq_exp ez1 ez2 V e21 e22 &&
syneq_exp ez1 ez2 V e31 e32
==>
syneq_exp ez1 ez2 V (CIf e11 e21 e31) (CIf e12 e22 e32)
and
extg : forall ez1 ez2 V n.
true
==>
syneq_exp ez1 ez2 V (CExtG n) (CExtG n)
and
dont_know : forall ez1 ez2 V defs1 defs2 U.
(forall n1 n2. U n1 n2 -->
  n1 < List.length defs1 && n2 < List.length defs2 &&
  exists b az e1 j1 r1 e2 j2 r2.
  (forall d e.
     List_extra.nth defs1 n1 = (Just d,e)
     --> List_extra.nth defs2 n2 = List_extra.nth defs1 n1) &&
  (b,az,e1,j1,r1) = syneq_cb_aux n1 (List.length defs1) ez1 (List_extra.nth defs1 n1) &&
  (b,az,e2,j2,r2) = syneq_cb_aux n2 (List.length defs2) ez2 (List_extra.nth defs2 n2) &&
  (b --> syneq_exp (az+j1) (az+j2) (syneq_cb_V az r1 r2 V U) e1 e2 &&
    forall l ccenv recs envs b.
      List_extra.nth defs1 n1 = (Just(l,(ccenv,(recs,envs))),b)
      --> List.all (fun v -> U v v) recs &&
          List.all (fun v -> V v v) envs))
==>
syneq_defs ez1 ez2 V defs1 defs2 U

indreln
[syneq : Cv -> Cv -> bool]
litv : forall l.
true
==>
syneq (CLitv l) (CLitv l)
and
conv : forall cn vs1 vs2.
all2 (syneq) vs1 vs2
==>
syneq (CConv cn vs1) (CConv cn vs2)
and
vectorv : forall vs1 vs2.
all2 (syneq) vs1 vs2
==>
syneq (CVectorv vs1) (CVectorv vs2)
and
recClos : forall V env1 env2 defs1 defs2 d1 d2 V'.
(forall v1 v2. V v1 v2 -->
  (v1 < List.length env1 && v2 < List.length env2 &&
   syneq (List_extra.nth env1 v1) (List_extra.nth env2 v2))) &&
syneq_defs (List.length env1) (List.length env2) V defs1 defs2 V' &&
((d1 < List.length defs1 && d2 < List.length defs2 && V' d1 d2) ||
 (List.length defs1 <= d1 && List.length defs2 <= d2 && d1 = d2))
==>
syneq (CRecClos env1 defs1 d1) (CRecClos env2 defs2 d2)
and
loc : forall n.
true
==>
syneq (CLoc n) (CLoc n)

(* auxiliary functions over the syntax *)

let rec
no_labs (CRaise e) = no_labs e
and
no_labs (CHandle e1 e2) = no_labs e1 && no_labs e2
and
no_labs (CVar _) = true
and
no_labs (CGvar _) = true
and
no_labs (CLit _) = true
and
no_labs (CCon _ es) = no_labs_list es
and
no_labs (CLet _ e b) = no_labs e && no_labs b
and
no_labs (CLetrec defs e) = no_labs_defs defs && no_labs e
and
no_labs (CCall _ e es) = no_labs e && no_labs_list es
and
no_labs (CPrim2 _ e1 e2) = no_labs e1 && no_labs e2
and
no_labs (CUpd _ e1 e2 e3) = no_labs e1 && no_labs e2 && no_labs e3
and
no_labs (CPrim1 _ e) = no_labs e
and
no_labs (CIf e1 e2 e3) = no_labs e1 && no_labs e2 && no_labs e3
and
no_labs (CExtG _) = true
and
no_labs_list [] = true
and
no_labs_list (e::es) = no_labs e && no_labs_list es
and
no_labs_defs [] = true
and
no_labs_defs (d::ds) = no_labs_def d && no_labs_defs ds
and
no_labs_def (Just _,_) = false
and
no_labs_def (Nothing,(_,b)) = no_labs b

let rec
all_labs (CRaise e) = all_labs e
and
all_labs (CHandle e1 e2) = all_labs e1 && all_labs e2
and
all_labs (CVar _) = true
and
all_labs (CGvar _) = true
and
all_labs (CLit _) = true
and
all_labs (CCon _ es) = all_labs_list es
and
all_labs (CLet _ e b) = all_labs e && all_labs b
and
all_labs (CLetrec defs e) = all_labs_defs defs && all_labs e
and
all_labs (CCall _ e es) = all_labs e && all_labs_list es
and
all_labs (CPrim2 _ e1 e2) = all_labs e1 && all_labs e2
and
all_labs (CUpd _ e1 e2 e3) = all_labs e1 && all_labs e2 && all_labs e3
and
all_labs (CPrim1 _ e) = all_labs e
and
all_labs (CIf e1 e2 e3) = all_labs e1 && all_labs e2 && all_labs e3
and
all_labs (CExtG _) = true
and
all_labs_list [] = true
and
all_labs_list (e::es) = all_labs e && all_labs_list es
and
all_labs_defs [] = true
and
all_labs_defs (d::ds) = all_labs_def d && all_labs_defs ds
and
all_labs_def (Just _,(_,b)) = all_labs b
and
all_labs_def (Nothing,_) = false
