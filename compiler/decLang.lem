(* Removes declarations. Follows conLang.
 *
 * The AST of decLang differs from conLang in that there is no declarations
 * level, the program is represented by an expressions.
 *
 * The values of decLang are the same as conLang.
 *
 * The semantics of decLang differ in that the global environment is now
 * store-like rather than environment-like. The expressions for extending and
 * initialising it modify the global environment (instead of just rasing a
 * type error).
 *
 * The translator to decLang maps a declaration to an expression that sets of
 * the global environment in the right way. If evaluating the expression
 * results in an exception, then the exception is handled, and a SOME
 * containing the exception is returned. Otherwise, a NONE is returned.
 *
 *)

open import Pervasives
open import Lib
open import Ast
open import SemanticPrimitives
open import List_extra
open import BigStep
open import ConLang

val init_globals : list varN -> nat -> exp_i2
let rec init_globals [] idx = Con_i2 Nothing []
and init_globals (x::vars) idx =
  Let_i2 Nothing (App_i2 (Init_global_var_i2 idx) [Var_local_i2 x]) (init_globals vars (idx + 1))

declare termination_argument init_globals = automatic

val init_global_funs : nat -> list (varN * varN * exp_i2) -> exp_i2
let rec init_global_funs next [] = Con_i2 Nothing []
and init_global_funs next ((f,x,e)::funs) =
  Let_i2 Nothing (App_i2 (Init_global_var_i2 next) [Fun_i2 x e]) (init_global_funs (next+1) funs)

declare termination_argument init_global_funs = automatic

val decs_to_i3 : nat -> list dec_i2 -> exp_i2
let rec decs_to_i3 next [] = Con_i2 Nothing []
and decs_to_i3 next (d::ds) =
  match d with
    | Dlet_i2 n e ->
        let vars = List.genlist (fun n -> "x" ^ show n) n in
          Let_i2 Nothing (Mat_i2 e [(Pcon_i2 Nothing (List.map Pvar_i2 vars), init_globals vars next)]) (decs_to_i3 (next+n) ds)
    | Dletrec_i2 funs ->
        let n = List.length funs in
          Let_i2 Nothing (init_global_funs next funs) (decs_to_i3 (next+n) ds)
  end

declare termination_argument decs_to_i3 = automatic

val prompt_to_i3 : (nat * tid_or_exn) -> (nat * tid_or_exn) -> nat -> prompt_i2 -> nat * exp_i2
let prompt_to_i3 none_tag some_tag next prompt =
  match prompt with
    | Prompt_i2 ds ->
        let n = num_defs ds in
          (next+n, Let_i2 Nothing (Extend_global_i2 n) (Handle_i2 (Let_i2 Nothing (decs_to_i3 next ds) (Con_i2 (Just none_tag) [])) [(Pvar_i2 "x", Con_i2 (Just some_tag) [Var_local_i2 "x"])]))
  end

val prog_to_i3 : (nat * tid_or_exn) -> (nat * tid_or_exn) -> nat -> list prompt_i2 -> nat * exp_i2
let rec
prog_to_i3 none_tag some_tag next [] = (next, Con_i2 (Just none_tag) [])
and
prog_to_i3 none_tag some_tag next (p::ps) =
  let (next',p') = prompt_to_i3 none_tag some_tag next p in
  let (next'',ps') = prog_to_i3 none_tag some_tag next' ps in
    (next'',Mat_i2 p' [(Pcon_i2 (Just none_tag) [], ps'); (Pvar_i2 "x", Var_local_i2 "x")])

declare termination_argument prog_to_i2 = automatic

type count_store_genv 'a = count_store_trace 'a * list (maybe 'a)
type store_genv 'a = store_trace 'a * list (maybe 'a)

val do_app_i3 : count_store_genv v_i2 -> op_i2 -> list v_i2 -> maybe (count_store_genv v_i2 * result v_i2 v_i2)
let do_app_i3 ((count,s,t),genv) op vs =
  match (op,vs) with
    | (Op_i2 op, vs) ->
        match do_app_i2 (s,t) (Op_i2 op) vs with
          | Nothing -> Nothing
          | Just ((s,t),r) -> Just (((count,s,t),genv),r)
        end 
    | (Init_global_var_i2 idx, [v]) ->
        if idx < List.length genv then
          match List_extra.nth genv idx with
            | Nothing -> Just (((count,s,t), List.update genv idx (Just v)), (Rval (Conv_i2 Nothing [])))
            | Just x -> Nothing
          end
        else
          Nothing
    | _ -> Nothing
  end

type all_env_i3 = exh_ctors_env * alist varN v_i2

indreln [evaluate_i3 : bool -> all_env_i3 -> count_store_genv v_i2 -> exp_i2 -> count_store_genv v_i2 * result v_i2 v_i2 -> bool]
and [evaluate_list_i3 : bool -> all_env_i3 -> count_store_genv v_i2 -> list exp_i2 -> count_store_genv v_i2 * result (list v_i2) v_i2 -> bool]
and [evaluate_match_i3 : bool -> all_env_i3 -> count_store_genv v_i2 -> v_i2 -> list (pat_i2 * exp_i2) -> v_i2 -> count_store_genv v_i2 * result v_i2 v_i2 -> bool]

lit : forall ck env l s.
true
==>
evaluate_i3 ck env s (Lit_i2 l) (s, Rval (Litv_i2 l))

and

raise1 : forall ck env e s1 s2 v.
evaluate_i3 ck s1 env e (s2, Rval v)
==>
evaluate_i3 ck s1 env (Raise_i2 e) (s2, Rerr (Rraise v))

and

raise2 : forall ck env e s1 s2 err.
evaluate_i3 ck s1 env e (s2, Rerr err)
==>
evaluate_i3 ck s1 env (Raise_i2 e) (s2, Rerr err)

and

handle1 : forall ck s1 s2 env e v pes.
evaluate_i3 ck s1 env e (s2, Rval v)
==>
evaluate_i3 ck s1 env (Handle_i2 e pes) (s2, Rval v)

and

handle2 : forall ck s1 s2 env e pes v bv.
evaluate_i3 ck env s1 e (s2, Rerr (Rraise v)) &&
evaluate_match_i3 ck env s2 v pes v bv
==>
evaluate_i3 ck env s1 (Handle_i2 e pes) bv

and

handle3 : forall ck s1 s2 env e pes a.
evaluate_i3 ck env s1 e (s2, Rerr (Rabort a))
==>
evaluate_i3 ck env s1 (Handle_i2 e pes) (s2, Rerr (Rabort a))

and

con1 : forall ck env tag es vs s s'.
evaluate_list_i3 ck env s (List.reverse es) (s', Rval vs)
==>
evaluate_i3 ck env s (Con_i2 tag es) (s', Rval (Conv_i2 tag (List.reverse vs)))

and

con3 : forall ck env tag es err s s'.
evaluate_list_i3 ck env s (List.reverse es) (s', Rerr err)
==>
evaluate_i3 ck env s (Con_i2 tag es) (s', Rerr err)

and

var1 : forall ck exh env n v s.
(lookup n env = Just v)
==>
evaluate_i3 ck (exh,env) s (Var_local_i2 n) (s, Rval v)

and

var3 : forall ck env n v s genv.
(List.length genv > n) &&
(List_extra.nth genv n = Just v)
==>
evaluate_i3 ck env (s,genv) (Var_global_i2 n) ((s,genv), Rval v)

and

fn : forall ck exh env n e s.
true
==>
evaluate_i3 ck (exh,env) s (Fun_i2 n e) (s, Rval (Closure_i2 env n e))

and

app1 : forall ck exh genv env es vs env' e bv s1 s2 t2 count genv'.
evaluate_list_i3 ck (exh,env) (s1,genv) (List.reverse es) (((count,s2,t2),genv'), Rval vs) &&
do_opapp_i2 (List.reverse vs) = Just (env', e) &&
(ck --> count <> 0) &&
evaluate_i3 ck (exh,env') (((if ck then count-1 else count),s2,t2),genv') e bv
==>
evaluate_i3 ck (exh,env) (s1,genv) (App_i2 (Op_i2 Opapp) es) bv

and

app2 : forall ck env es vs env' e s1 s2 t2 count genv.
evaluate_list_i3 ck env s1 (List.reverse es) (((count,s2,t2), genv), Rval vs) &&
do_opapp_i2 (List.reverse vs) = Just (env', e) &&
count = 0 &&
ck
==>
evaluate_i3 ck env s1 (App_i2 (Op_i2 Opapp) es) (((0,s2,t2),genv), Rerr (Rabort Rtimeout_error))

and

app4 : forall ck env s1 op es s2 vs s3 res.
evaluate_list_i3 ck env s1 (List.reverse es) (s2, Rval vs) &&
do_app_i3 s2 op (List.reverse vs) = Just (s3, res) &&
op <> Op_i2 Opapp
==>
evaluate_i3 ck env s1 (App_i2 op es) (s3, res)

and

app6 : forall ck env s1 op es s2 err.
evaluate_list_i3 ck env s1 (List.reverse es) (s2, Rerr err)
==>
evaluate_i3 ck env s1 (App_i2 op es) (s2, Rerr err)

and

if1 : forall ck env e1 e2 e3 v e' bv s1 s2.
evaluate_i3 ck env s1 e1 (s2, Rval v) &&
do_if_i2 v e2 e3 = Just e' &&
evaluate_i3 ck env s2 e' bv
==>
evaluate_i3 ck env s1 (If_i2 e1 e2 e3) bv

and

if3 : forall ck env e1 e2 e3 err s s'.
evaluate_i3 ck env s e1 (s', Rerr err)
==>
evaluate_i3 ck env s (If_i2 e1 e2 e3) (s', Rerr err)

and

mat1 : forall ck env e pes v bv s1 s2.
evaluate_i3 ck env s1 e (s2, Rval v) &&
evaluate_match_i3 ck env s2 v pes (Conv_i2 (Just (bind_tag, (TypeExn (Short "Bind")))) []) bv
==>
evaluate_i3 ck env s1 (Mat_i2 e pes) bv

and

mat2 : forall ck env e pes err s s'.
evaluate_i3 ck env s e (s', Rerr err)
==>
evaluate_i3 ck env s (Mat_i2 e pes) (s', Rerr err)

and

let1 : forall ck exh env n e1 e2 v bv s1 s2.
evaluate_i3 ck (exh,env) s1 e1 (s2, Rval v) &&
evaluate_i3 ck (exh,opt_bind n v env) s2 e2 bv
==>
evaluate_i3 ck (exh,env) s1 (Let_i2 n e1 e2) bv

and

let2 : forall ck env n e1 e2 err s s'.
evaluate_i3 ck env s e1 (s', Rerr err)
==>
evaluate_i3 ck env s (Let_i2 n e1 e2) (s', Rerr err)

and

letrec1 : forall ck exh env funs e bv s.
List.allDistinct (List.map (fun (x,y,z) -> x) funs) &&
evaluate_i3 ck (exh,build_rec_env_i2 funs env env) s e bv
==>
evaluate_i3 ck (exh,env) s (Letrec_i2 funs e) bv

and

extend : forall ck env n s genv.
true
==>
evaluate_i3 ck env (s,genv) (Extend_global_i2 n) ((s,genv++List.genlist (fun x -> Nothing) n), Rval (Conv_i2 Nothing []))

and

empty : forall ck env s.
true
==>
evaluate_list_i3 ck env s [] (s, Rval [])

and

cons1 : forall ck env e es v vs s1 s2 s3.
evaluate_i3 ck env s1 e (s2, Rval v) &&
evaluate_list_i3 ck env s2 es (s3, Rval vs)
==>
evaluate_list_i3 ck env s1 (e::es) (s3, Rval (v::vs))

and

cons2 : forall ck env e es err s s'.
evaluate_i3 ck env s e (s', Rerr err)
==>
evaluate_list_i3 ck env s (e::es) (s', Rerr err)

and

cons3 : forall ck env e es v err s1 s2 s3.
evaluate_i3 ck env s1 e (s2, Rval v) &&
evaluate_list_i3 ck env s2 es (s3, Rerr err)
==>
evaluate_list_i3 ck env s1 (e::es) (s3, Rerr err)

and

mat_empty : forall ck env v s err_v.
true
==>
evaluate_match_i3 ck env s v [] err_v (s, Rerr (Rraise err_v))

and

mat_cons1 : forall ck exh env env' v p pes e bv s t count genv err_v.
List.allDistinct (pat_bindings_i2 p []) &&
pmatch_i2 exh s p v env = Match env' &&
evaluate_i3 ck (exh,env') ((count,s,t),genv) e bv
==>
evaluate_match_i3 ck (exh,env) ((count,s,t),genv) v ((p,e)::pes) err_v bv

and

mat_cons2 : forall ck exh genv env v p e pes bv s t count err_v.
List.allDistinct (pat_bindings_i2 p []) &&
pmatch_i2 exh s p v env = No_match &&
evaluate_match_i3 ck (exh,env) ((count,s,t),genv) v pes err_v bv
==>
evaluate_match_i3 ck (exh,env) ((count,s,t),genv) v ((p,e)::pes) err_v bv
