open SemanticPrimitives
open Ast
open CompilerLib
open IntLang
open ToIntLang
open ToBytecode
open Bytecode

type contab = Pmap.map (id conN) num * list (num * id conN) * num
val cmap : contab -> Pmap.map (id conN) num
let rec cmap (m,_,_) = m

type compiler_state =
  <| contab : contab
   ; renv : list (string * num)
   ; rmenv : Pmap.map string (list (string * num))
   ; rsz : num
   ; rnext_label : num
   |>

val cpam : compiler_state -> list (num * id conN)
let rec cpam s = match s.contab with (_,w,_) -> w end

let init_compiler_state =
  <| contab = (Pmap.add (Short "") tuple_cn Pmap.empty
              ,[(tuple_cn,Short "")]
              ,3)
   ; renv = []
   ; rmenv = Pmap.empty
   ; rsz = 0
   ; rnext_label = 0
   |>

let rec
number_constructors _ [] ct = ct
and
number_constructors mn ((c,_)::cs) (m,w,n) =
  number_constructors mn cs (Pmap.add (mk_id mn c) n m, (n,mk_id mn c)::w, n+1)

let rec
dec_to_contab mn ct (Dtype ts) =
  List.fold_left (fun ct (_,_,cs) -> number_constructors mn cs ct) ct ts
and
dec_to_contab _ ct _ = ct

let rec
decs_to_contab _ ct [] = ct
and
decs_to_contab mn ct (d::ds) = decs_to_contab mn (dec_to_contab mn ct d) ds

let rec
compile_news cs _ [] = emit cs [Stack Pop]
and
compile_news cs i (_::vs) =
  let cs = emit cs (List.map Stack [Load 0; Load 0; El i]) in
  let cs = emit cs [Stack (Store 1)] in
  compile_news cs (i+1) vs

let compile_Cexp menv env rsz cs Ce =
  let (Ce,nl) = label_closures (List.length env) cs.next_label Ce in
  let cs = compile_code_env menv <| cs with next_label = nl |> Ce in
  compile menv env TCNonTail rsz cs Ce

let compile_fake_exp menv m env rsz cs vs e =
  let Ce = exp_to_Cexp m (e (Con (Short "") (List.map (fun v -> Var (Short v)) (List.rev vs)))) in
  compile_Cexp menv env rsz cs Ce

let rec
compile_dec _ _ _ _ cs (Dtype _) = (None, emit cs [Stack (Cons (block_tag+tuple_cn) 0)])
and
compile_dec menv m env rsz cs (Dletrec defs) =
  let vs = List.map (fun (n,_,_) -> n) defs in
  (Some vs, compile_fake_exp menv m env rsz cs vs (fun b -> Letrec defs b))
and
compile_dec menv m env rsz cs (Dlet p e) =
  let vs = pat_bindings p [] in
  (Some vs, compile_fake_exp menv m env rsz cs vs (fun b -> Mat e [(p,b)]))

let rec
compile_decs _ _ ct m _ rsz cs [] = (ct,m,rsz,cs)
and
compile_decs mn menv ct m env rsz cs (dec::decs) =
  let (vso,cs) = compile_dec menv m env rsz cs dec in
  let ct = dec_to_contab mn ct dec in
  let vs = match vso with None -> [] | Some vs -> vs end in
  let n = List.length vs in
  let m = <| m with cnmap = cmap ct; bvars = vs@m.bvars |> in
  let env = (genlist(fun i -> CTDec (rsz+n-1-i))n)@env in
  let rsz = rsz+n in
  let cs = compile_news cs 0 vs in
  compile_decs mn menv ct m env rsz cs decs

let compile_decs_wrap mn rs decs =
  let cs = <| out = []; next_label = rs.rnext_label |> in
  let cs = emit cs [PushPtr (Addr 0); PushExc] in
  let menv = Hol.o_f (List.map snd) rs.rmenv in
  let m = <| bvars = List.map fst rs.renv
           ; mvars = Hol.o_f (List.map fst) rs.rmenv
           ; cnmap = cmap rs.contab
           |> in
  let env = List.map (Hol.o CTDec snd) rs.renv in
  let (ct,m,rsz,cs) = compile_decs mn menv rs.contab m env (rs.rsz+2) cs decs in
  let n = rsz-2-rs.rsz in
  let news = Hol.TAKE n m.bvars in
  let cs = emit cs [Stack (Cons tuple_cn n)] in
  let cs = emit cs [PopExc; Stack(Pops 1)] in
  let cs = compile_news cs 0 news in
  let env = List.combine news (genlist (fun i -> rs.rsz+n-1-i) n) in
  (ct,env,cs)

let rec
compile_print_vals _ [] s = s
and
compile_print_vals n (v::vs) s =
  let s = emit s (List.map PrintC (Hol.EXPLODE (Hol.CONCAT ["val ";v;" = "]))) in
  let s = emit s [Stack(Load n); Print] in
  compile_print_vals (n+1) vs s

let rec
compile_print_dec (Dtype ts) s =
  List.fold_left (fun s (_,_,cs) ->
    List.fold_left (fun s (c,_) ->
      emit s (List.map PrintC (Hol.EXPLODE (Hol.CONCAT [c;" = <constructor>"]))))
    s cs) s ts
and
compile_print_dec (Dlet p e) s =
  compile_print_vals 0 (pat_bindings p []) s
and
compile_print_dec (Dletrec defs) s =
  compile_print_vals 0 (List.map (fun (n,_,_) -> n) defs) s

let rec
compile_top rs (Tmod mn _ decs) =
  let (ct,env,cs) = compile_decs_wrap (Some mn) rs decs in
  let str = Hol.CONCAT["structure ";mn;" = <structure>"] in
  (<| rs with
      contab = ct
    ; rnext_label = cs.next_label
    ; rmenv = Pmap.add mn env rs.rmenv
    ; rsz = rs.rsz + List.length env |>
  ,<| rs with
      contab = ct
    ; rnext_label = cs.next_label
    ; rmenv = Pmap.add mn [] rs.rmenv |>
  ,(emit cs (List.map PrintC (Hol.EXPLODE str))).out)
and
compile_top rs (Tdec dec) =
  let (ct,env,cs) = compile_decs_wrap None rs [dec] in
  (<| rs with
      contab = ct
    ; rnext_label = cs.next_label
    ; renv = env@rs.renv
    ; rsz = rs.rsz+List.length env |>
  ,<| rs with
      contab = ct
    ; rnext_label = cs.next_label |>
  ,(compile_print_dec dec cs).out)
