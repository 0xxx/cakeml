open Ast
open CompilerLib
open IntLang
open ToIntLang
open ToBytecode
open Bytecode

type contab = Pmap.map (id conN) num * list (num * string) * num
val cmap : contab -> Pmap.map (id conN) num
let rec cmap (m,_,_) = m

type compiler_state =
  <| contab : contab
   ; rbvars : list string
   ; rnext_label : num
   |>

val cpam : compiler_state -> list (num * string)
let rec cpam s = match s.contab with (_,w,_) -> w end

val etC : compiler_state -> exp_to_Cexp_state
let etC rs = <| bvars = rs.rbvars; cnmap = cmap rs.contab |>

let init_compiler_state =
  <| contab = (Pmap.empty, [], 0)
   ; rbvars = []
   ; rnext_label = 0
   |>

let compile_Cexp rs Ce =
  let rsz = List.length rs.rbvars in
  let (Ce,n) = label_closures rsz rs.rnext_label Ce in
  let cs = <| out = []; next_label = n |> in
  let cs = compile_code_env cs Ce in
  compile (genlist (fun i -> CTLet (rsz-i)) rsz) TCNonTail rsz cs Ce

let rec
number_constructors [] ct = ct
and
number_constructors ((c,_)::cs) (m,w,n) =
  number_constructors cs (Pmap.add (Short c) n m, (n,c)::w, n+1)

let rec
compile_shadows bvs cs i [] = cs
and
compile_shadows bvs cs i (v::vs) =
  let j = the 0 (find_index v bvs 1) in
  let cs = emit cs (List.map Stack [Load 0; El i; Store j]) in
  compile_shadows bvs cs (i+1) vs

let rec
compile_news cs i [] = cs
and
compile_news cs i (v::vs) =
  let cs = emit cs (List.map Stack [Load 0; Load 0; El i; Store 1]) in
  compile_news cs (i+1) vs

let compile_fake_exp rs vs e =
  let m = etC rs in
  let cn = Short "" in
  let (shadows,news) = Hol.PARTITION (fun v -> List.mem v rs.rbvars) vs in
  let Ce = exp_to_Cexp <| m with cnmap = Pmap.add cn 0 m.cnmap |>
           (e (Con cn (List.map (fun v -> Var (Short v)) (shadows@news)))) in
  let cs = compile_Cexp rs Ce in
  let cs = compile_shadows rs.rbvars cs 0 shadows in
  let cs = compile_news cs (List.length shadows) news in
  let cs = emit cs [Stack Pop; Stack (PushInt i0)] in
  (<| rs with rbvars = (List.rev news)@rs.rbvars
    ; rnext_label = cs.next_label |>
  ,List.rev cs.out)

let rec
compile_dec rs (Dtype ts) =
  (<| rs with contab =
      List.fold_left
        (fun ct (_,_,cs) -> number_constructors cs ct)
        rs.contab ts |>
  ,[Stack (PushInt i0)])
and
compile_dec rs (Dletrec defs) =
  let vs = List.map (fun (n,_,_) -> n) defs in
  compile_fake_exp rs vs (fun b -> Letrec defs b)
and
compile_dec rs (Dlet p e) =
  let vs = pat_bindings p [] in
  compile_fake_exp rs vs (fun b -> Mat e [(p,b)])
