val alist_to_fmap : forall 'a 'b. list ('a * 'b) -> fmap 'a 'b
val LEAST : (num -> bool) -> num
val IMAGE : forall 'a 'b. ('a -> 'b) -> set 'a -> set 'b
val PRE : num -> num
val count : num -> set num
val QSORT : forall 'a. ('a -> 'a -> bool) -> list 'a -> list 'a
(* TODO: lem library can't handle option type *)
val THE : forall 'a 'b. 'a -> 'b
val OPTREL : forall 'a 'b 'c 'd. ('a -> 'b -> bool) -> 'c -> 'd -> bool
val FLOOKUP : forall 'a 'b 'c. fmap 'a 'b -> 'a -> 'c
val int_of_num : num -> int
val GENLIST : forall 'a. (num -> 'a) -> num -> list 'a
val UNIT : forall 'a 'b. 'a -> 'b -> 'a * 'b
val BIND : forall 'a 'b 'c. ('a -> 'b * 'a) -> ('b -> 'a -> 'c * 'a) -> 'a -> 'c * 'a
val IGNORE_BIND : forall 'a 'b 'c. ('a -> 'b * 'a) -> ('a -> 'c * 'a) -> 'a -> 'c * 'a
