(* Removes named datatype constructors. Follows modLang.
 *
 * The AST of conLang differs from modLang by using numbered tags instead of
 * constructor name identifiers for all data constructor patterns and
 * expressions. Constructors explicitly mention the type they are constructing.
 * Also type and exception declarations are removed.
 *
 * The values of conLang differ in that the closures do not contain a constructor
 * name environment.
 *
 * The semantics of conLang differ in that there is no lexical constructor name
 * environment. However, there is a mapping (exh_ctors_env) from types to the
 * (arity-indexed) tags of the constructors of that type. This is for use later
 * on in determining whether a pattern match is exhaustive.
 *
 * The translator to conLang keeps a mapping (tag_env) of each constructor to
 * its arity, tag, and type. Tags need only be unique for each arity-type pair,
 * and are reused as much as possible otherwise.
 *
 * The expressions include the unary operation for initialising the global
 * store, even though it can't be used until decLang. However, including it here
 * means that the conLang->decLang translation can just be (\x.x). Also
 * includes the expression for extending the global store.
 *
 *)

open import Pervasives
open import Lib
open import Ast
open import SemanticPrimitives
open import List_extra
open import BigStep
open import ModLang

(* these must match what the prim_types_program generates *)

val bind_tag : nat
let bind_tag = 0

val chr_tag : nat
let chr_tag = 1

val div_tag : nat
let div_tag = 2

val eq_tag : nat
let eq_tag = 3

val subscript_tag : nat
let subscript_tag = 4

val true_tag : nat
let true_tag = 0

val false_tag : nat
let false_tag = 1

val nil_tag : nat
let nil_tag = 0

val cons_tag : nat
let cons_tag = 0

val none_tag : nat
let none_tag = 0

val some_tag : nat
let some_tag = 0

type op_i2 =
  | Op_i2 of op
  | Init_global_var_i2 of nat

type pat_i2 =
  | Pvar_i2 of varN
  | Plit_i2 of lit
  | Pcon_i2 of maybe (nat * tid_or_exn) * list pat_i2
  | Pref_i2 of pat_i2

type exp_i2 =
  | Raise_i2 of exp_i2
  | Handle_i2 of exp_i2 * list (pat_i2 * exp_i2)
  | Lit_i2 of lit
  | Con_i2 of maybe (nat * tid_or_exn) * list exp_i2
  | Var_local_i2 of varN
  | Var_global_i2 of nat
  | Fun_i2 of varN * exp_i2
  | App_i2 of op_i2 * list exp_i2
  | If_i2 of exp_i2 * exp_i2 * exp_i2
  | Mat_i2 of exp_i2 * list (pat_i2 * exp_i2)
  | Let_i2 of maybe varN * exp_i2 * exp_i2
  | Letrec_i2 of list (varN * varN * exp_i2) * exp_i2
  | Extend_global_i2 of nat

type dec_i2 =
  | Dlet_i2 of nat * exp_i2
  | Dletrec_i2 of list (varN * varN * exp_i2)

type prompt_i2 =
  | Prompt_i2 of list dec_i2

type v_i2 =
  | Litv_i2 of lit
  | Conv_i2 of maybe (nat * tid_or_exn) * list v_i2
  | Closure_i2 of alist varN v_i2 * varN * exp_i2
  | Recclosure_i2 of alist varN v_i2 * list (varN * varN * exp_i2) * varN
  | Loc_i2 of nat
  | Vectorv_i2 of list v_i2

val pat_bindings_i2 : pat_i2 -> list varN -> list varN
let rec
pat_bindings_i2 (Pvar_i2 n) already_bound =
  n::already_bound
and
pat_bindings_i2 (Plit_i2 l) already_bound =
  already_bound
and
pat_bindings_i2 (Pcon_i2 _ ps) already_bound =
  pats_bindings_i2 ps already_bound
and
pat_bindings_i2 (Pref_i2 p) already_bound =
  pat_bindings_i2 p already_bound
and
pats_bindings_i2 [] already_bound =
  already_bound
and
pats_bindings_i2 (p::ps) already_bound =
  pats_bindings_i2 ps (pat_bindings_i2 p already_bound)

(* for each type, for each arity, the number of constructors of that arity *)
type exh_ctors_env = Map.map (id typeN) (nat_map nat)

(* for each constructor, its arity, tag, and type *)
type flat_tag_env = Map.map conN (nat * nat * tid_or_exn)
type tag_env = Map.map modN flat_tag_env * flat_tag_env

val lookup_tag_flat : conN -> flat_tag_env -> maybe (nat * tid_or_exn)
let lookup_tag_flat cn ftagenv =
  match Map.lookup cn ftagenv with
    | Nothing -> Nothing
    | Just (a,n,t) -> Just (n,t)
  end

val lookup_tag_env : maybe (id conN) -> tag_env -> maybe (nat * tid_or_exn)
let lookup_tag_env id (mtagenv,tagenv) =
  match id with
    | Nothing -> Nothing
    | Just (Short x) -> lookup_tag_flat x tagenv
    | Just (Long x y) ->
        match Map.lookup x mtagenv with
          | Nothing -> Nothing
          | Just tagenv -> lookup_tag_flat y tagenv
        end
  end

val pat_to_i2 : tag_env -> pat -> pat_i2
let rec
pat_to_i2 tagenv (Pvar x) = Pvar_i2 x
and
pat_to_i2 tagenv (Plit l) = Plit_i2 l
and
pat_to_i2 tagenv (Pcon con_id ps) =
  Pcon_i2 (lookup_tag_env con_id tagenv) (List.map (pat_to_i2 tagenv) ps)
and
pat_to_i2 tagenv (Pref p) = Pref_i2 (pat_to_i2 tagenv p)

val exp_to_i2 : tag_env -> exp_i1 -> exp_i2
val exps_to_i2 : tag_env -> list exp_i1 -> list exp_i2
val pat_exp_to_i2 : tag_env -> list (pat * exp_i1) -> list (pat_i2 * exp_i2)
val funs_to_i2 : tag_env -> list (varN * varN * exp_i1) -> list (varN * varN * exp_i2)
let rec
exp_to_i2 tagenv (Raise_i1 e) =
  Raise_i2 (exp_to_i2 tagenv e)
and
exp_to_i2 tagenv (Handle_i1 e pes) =
  Handle_i2 (exp_to_i2 tagenv e) (pat_exp_to_i2 tagenv pes)
and
exp_to_i2 tagenv (Lit_i1 l) =
  Lit_i2 l
and
exp_to_i2 tagenv (Con_i1 cn es) =
  Con_i2 (lookup_tag_env cn tagenv) (exps_to_i2 tagenv es)
and
exp_to_i2 tagenv (Var_local_i1 x) = Var_local_i2 x
and
exp_to_i2 tagenv (Var_global_i1 x) = Var_global_i2 x
and
exp_to_i2 tagenv (Fun_i1 x e) =
  Fun_i2 x (exp_to_i2 tagenv e)
and
exp_to_i2 tagenv (App_i1 op es) =
  App_i2 (Op_i2 op) (exps_to_i2 tagenv es)
and
exp_to_i2 tagenv (If_i1 e1 e2 e3) =
  If_i2 (exp_to_i2 tagenv e1) (exp_to_i2 tagenv e2) (exp_to_i2 tagenv e3)
and
exp_to_i2 tagenv (Mat_i1 e pes) =
  Mat_i2 (exp_to_i2 tagenv e) (pat_exp_to_i2 tagenv pes)
and
exp_to_i2 tagenv (Let_i1 x e1 e2) =
  Let_i2 x (exp_to_i2 tagenv e1) (exp_to_i2 tagenv e2)
and
exp_to_i2 tagenv (Letrec_i1 funs e) =
  Letrec_i2 (funs_to_i2 tagenv funs)
            (exp_to_i2 tagenv e)
and
exps_to_i2 tagenv [] = []
and
exps_to_i2 tagenv (e::es) =
  exp_to_i2 tagenv e :: exps_to_i2 tagenv es
and
pat_exp_to_i2 tagenv [] = []
and
pat_exp_to_i2 tagenv ((p,e)::pes) =
  (pat_to_i2 tagenv p, exp_to_i2 tagenv e) :: pat_exp_to_i2 tagenv pes
and
funs_to_i2 tagenv [] = []
and
funs_to_i2 tagenv ((f,x,e)::funs) =
  (f,x,exp_to_i2 tagenv e) :: funs_to_i2 tagenv funs

(* next exception tag (arity-indexed),
 * current tag env,
 * current exh_ctors_env,
 * accumulator (for use on module exit) *)
type tagenv_state = nat_map nat * tag_env * exh_ctors_env
type tagenv_state_acc = tagenv_state * flat_tag_env

let get_tagenv ((next,tagenv,exh),acc) = tagenv
let get_exh (next,tagenv,exh) = exh

val insert_tag_env : conN -> (nat * nat * tid_or_exn) -> tag_env  -> tag_env
let insert_tag_env cn tag (mtagenv,ftagenv) =
  (mtagenv,Map.insert cn tag ftagenv)

val alloc_tag : tid_or_exn -> conN -> nat -> tagenv_state_acc -> tagenv_state_acc
let alloc_tag tn cn arity ((next,tagenv,exh),acc) =
  match tn with
  | TypeExn _ ->
      let tag =
        match nat_map_lookup next arity with
        | Nothing -> 0
        | Just n -> n
        end in
      ((nat_map_insert next arity (tag+1),
        insert_tag_env cn (arity,tag,tn) tagenv,
        exh),
       Map.insert cn (arity,tag,tn) acc)
  | TypeId tid ->
      let (tag,exh) =
        match Map.lookup tid exh with
        | Nothing -> (0, Map.insert tid (nat_map_insert nat_map_empty arity 1) exh)
        | Just m -> match nat_map_lookup m arity with
                    | Nothing -> (0, Map.insert tid (nat_map_insert m arity 1) exh)
                    | Just t -> (t, Map.insert tid (nat_map_insert m arity (t+1)) exh)
                    end
        end in
      ((next,
        insert_tag_env cn (arity,tag,tn) tagenv,
        exh),
       Map.insert cn (arity,tag,tn) acc)
  end

val alloc_tags : maybe modN -> tagenv_state_acc -> type_def -> tagenv_state_acc
let rec
alloc_tags mn st [] = st
and
alloc_tags mn st ((tvs,tn,constrs)::types) =
  let st' =
    List.foldl (fun st' (cn,ts) -> alloc_tag (TypeId (mk_id mn tn)) cn (List.length ts) st') st constrs
  in
    alloc_tags mn st' types

declare termination_argument alloc_tags = automatic

val decs_to_i2 : tagenv_state_acc -> list dec_i1 -> tagenv_state_acc * list dec_i2
let rec
decs_to_i2 st [] = (st,[])
and
decs_to_i2 st (d::ds) =
  match d with
    | Dlet_i1 n e ->
        let (st', ds') = decs_to_i2 st ds in
          (st', Dlet_i2 n (exp_to_i2 (get_tagenv st) e)::ds')
    | Dletrec_i1 funs ->
        let (st', ds') = decs_to_i2 st ds in
          (st', Dletrec_i2 (funs_to_i2 (get_tagenv st) funs)::ds')
    | Dtype_i1 mn type_def ->
        let st'' = alloc_tags mn st type_def in
        let (st',ds') = decs_to_i2 st'' ds in
          (st', ds')
    | Dexn_i1 mn cn ts ->
        let (st', ds') = decs_to_i2 (alloc_tag (TypeExn (mk_id mn cn)) cn (List.length ts) st) ds in
          (st', ds')
  end

declare termination_argument decs_to_i2 = automatic

val mod_tagenv : maybe modN -> flat_tag_env -> tag_env -> tag_env
let mod_tagenv mn l (mtagenv,tagenv) =
  match mn with
    | Nothing -> (mtagenv,Map.(union) l tagenv)
    | Just mn -> (Map.insert mn l mtagenv,tagenv)
  end

val prompt_to_i2 : tagenv_state -> prompt_i1 -> tagenv_state * prompt_i2
let prompt_to_i2 tagenv_st prompt =
  match prompt with
    | Prompt_i1 mn ds ->
        let (((next',tagenv',exh'),acc'), ds') = decs_to_i2 (tagenv_st,Map.empty) ds in
          ((next',mod_tagenv mn acc' (get_tagenv (tagenv_st,acc')),exh'), Prompt_i2 ds')
  end

val prog_to_i2 : tagenv_state -> list prompt_i1 -> tagenv_state * list prompt_i2
let rec
prog_to_i2 st [] = (st, [])
and
prog_to_i2 st (p::ps) =
  let (st',p') = prompt_to_i2 st p in
  let (st'',ps') = prog_to_i2 st' ps in
    (st'',p'::ps')

declare termination_argument prog_to_i2 = automatic

val build_rec_env_i2 : list (varN * varN * exp_i2) -> alist varN v_i2 -> alist varN v_i2 -> alist varN v_i2
let build_rec_env_i2 funs cl_env add_to_env =
  foldr
    (fun (f,x,e) env' -> (f, Recclosure_i2 cl_env funs f) :: env')
    add_to_env
    funs

val do_eq_i2 : v_i2 -> v_i2 -> eq_result
let rec
do_eq_i2 (Litv_i2 l1) (Litv_i2 l2) =
  if lit_same_type l1 l2 then Eq_val (l1 = l2)
  else Eq_type_error
and
do_eq_i2 (Loc_i2 l1) (Loc_i2 l2) = Eq_val (l1 = l2)
and
do_eq_i2 (Conv_i2 Nothing vs1) (Conv_i2 Nothing vs2) =
  if List.length vs1 = List.length vs2 then
    do_eq_list_i2 vs1 vs2
  else
    Eq_val false
and
do_eq_i2 (Conv_i2 (Just tag1) vs1) (Conv_i2 (Just tag2) vs2) =
  if tag1 = tag2 && (List.length vs1 = List.length vs2) then
    do_eq_list_i2 vs1 vs2
  else
    Eq_val false
and
do_eq_i2 (Conv_i2 _ _) (Conv_i2 _ _) = Eq_val false
and
do_eq_i2 (Vectorv_i2 vs1) (Vectorv_i2 vs2) =
  if List.length vs1 = List.length vs2 then
    do_eq_list_i2 vs1 vs2
  else
    Eq_val false
and
do_eq_i2 (Closure_i2 _ _ _) (Closure_i2 _ _ _) = Eq_closure
and
do_eq_i2 (Closure_i2 _ _ _) (Recclosure_i2 _ _ _) = Eq_closure
and
do_eq_i2 (Recclosure_i2 _ _ _) (Closure_i2 _ _ _) = Eq_closure
and
do_eq_i2 (Recclosure_i2 _ _ _) (Recclosure_i2 _ _ _) = Eq_closure
and
do_eq_i2 _ _ = Eq_type_error
and
do_eq_list_i2 [] [] = Eq_val true
and
do_eq_list_i2 (v1::vs1) (v2::vs2) =
  match do_eq_i2 v1 v2 with
    | Eq_closure -> Eq_closure
    | Eq_type_error -> Eq_type_error
    | Eq_val r ->
        if not r then
          Eq_val false
        else
          do_eq_list_i2 vs1 vs2
  end
and
do_eq_list_i2 _ _ = Eq_val false

type all_env_i2 = (exh_ctors_env * list (maybe v_i2) * alist varN v_i2)

let all_env_i2_to_genv (exh,genv,env) = genv
let all_env_i2_to_env (exh,genv,env) = env

val exn_env_i2 : alist varN v_i2
let exn_env_i2 = []

val do_opapp_i2 : list v_i2 -> maybe (alist varN v_i2 * exp_i2)
let do_opapp_i2 vs =
  match vs with
    | [Closure_i2 env n e; v] ->
        Just ((n,v)::env, e)
    | [Recclosure_i2 env funs n; v] ->
        if allDistinct (List.map (fun (f,x,e) -> f) funs) then
          match find_recfun n funs with
            | Just (n,e) -> Just ((n,v)::build_rec_env_i2 funs env env, e)
            | Nothing -> Nothing
          end
        else
          Nothing
    | _ -> Nothing
  end

val prim_exn_i2 : nat -> conN -> v_i2
let prim_exn_i2 tag cn = Conv_i2 (Just (tag, (TypeExn (Short cn)))) []

val v_to_list_i2 : v_i2 -> maybe (list v_i2)
let rec v_to_list_i2 (Conv_i2 (Just (tag, (TypeId (Short tn)))) []) =
  if tag = nil_tag && tn = "list" then
    Just []
  else
    Nothing
and v_to_list_i2 (Conv_i2 (Just (tag, (TypeId (Short tn)))) [v1;v2]) =
  if tag = cons_tag  && tn = "list" then
    match v_to_list_i2 v2 with
      | Just vs -> Just (v1::vs)
      | Nothing -> Nothing
    end
  else
    Nothing
and v_to_list_i2 _ = Nothing
declare termination_argument v_to_list_i2 = automatic

val v_i2_to_char_list : v_i2 -> maybe (list char)
let rec v_i2_to_char_list (Conv_i2 (Just (tag, (TypeId (Short tn)))) []) =
  if tag = nil_tag && tn = "list" then
    Just []
  else
    Nothing
and v_i2_to_char_list (Conv_i2 (Just (tag, (TypeId (Short tn)))) [Litv_i2 (Char c);v]) =
  if tag = cons_tag  && tn = "list" then
    match v_i2_to_char_list v with
      | Just cs -> Just (c::cs)
      | Nothing -> Nothing
    end
  else
    Nothing
and v_i2_to_char_list _ = Nothing
declare termination_argument v_i2_to_char_list = automatic

val char_list_to_v_i2 : list char -> v_i2
let rec char_list_to_v_i2 [] = Conv_i2 (Just (nil_tag, (TypeId (Short "list")))) []
and char_list_to_v_i2 (c::cs) =
  Conv_i2 (Just (cons_tag, (TypeId (Short "list")))) [Litv_i2 (Char c); char_list_to_v_i2 cs]

let Boolv_i2 b = Conv_i2 (Just (if b then true_tag else false_tag, TypeId(Short"bool"))) []

val do_app_i2 : store v_i2 -> op_i2 -> list v_i2 -> maybe (store v_i2 * result v_i2 v_i2)
let do_app_i2 s op vs =
  match (op, vs) with
    | (Op_i2 (Opn op), [Litv_i2 (IntLit n1); Litv_i2 (IntLit n2)]) ->
        if (op = Divide || (op = Modulo)) && (n2 = 0) then
          Just (s, Rerr (Rraise (prim_exn_i2 div_tag "Div")))
        else
          Just (s, Rval (Litv_i2 (IntLit (opn_lookup op n1 n2))))
    | (Op_i2 (Opb op), [Litv_i2 (IntLit n1); Litv_i2 (IntLit n2)]) ->
        Just (s, Rval (Boolv_i2 (opb_lookup op n1 n2)))
    | (Op_i2 Equality, [v1; v2]) ->
        match do_eq_i2 v1 v2 with
          | Eq_type_error -> Nothing
          | Eq_closure -> Just (s, Rerr (Rraise (prim_exn_i2 eq_tag "Eq")))
          | Eq_val b -> Just (s, Rval (Boolv_i2 b))
        end
    | (Op_i2 Opassign, [Loc_i2 lnum; v]) ->
        match store_assign lnum (Refv v) s with
          | Just st -> Just (st, Rval (Conv_i2 Nothing []))
          | Nothing -> Nothing
        end
    | (Op_i2 Opref, [v]) ->
        let (s',n) = store_alloc (Refv v) s in
          Just (s', Rval (Loc_i2 n))
    | (Op_i2 Opderef, [Loc_i2 n]) ->
        match store_lookup n s with
          | Just (Refv v) -> Just (s,Rval v)
          | _ -> Nothing
        end
    | (Init_global_var_i2 idx, _) -> Nothing
    | (Op_i2 Aw8alloc, [Litv_i2 (IntLit n); Litv_i2 (Word8 w)]) ->
        if n < 0 then
          Just (s, Rerr (Rraise (prim_exn_i2 subscript_tag "Subscript")))
        else
          let (s',lnum) =
            store_alloc (W8array (List.replicate (natFromInteger n) w)) s
          in 
            Just (s', Rval (Loc_i2 lnum))
    | (Op_i2 Aw8sub, [Loc_i2 lnum; Litv_i2 (IntLit i)]) ->
        match store_lookup lnum s with
          | Just (W8array ws) ->
              if i < 0 then
                Just (s, Rerr (Rraise (prim_exn_i2 subscript_tag "Subscript")))
              else
                let n = natFromInteger i in
                  if n >= List.length ws then
                    Just (s, Rerr (Rraise (prim_exn_i2 subscript_tag "Subscript")))
                  else 
                    Just (s, Rval (Litv_i2 (Word8 (List_extra.nth ws n))))
          | _ -> Nothing
        end
    | (Op_i2 Aw8length, [Loc_i2 n]) ->
        match store_lookup n s with
          | Just (W8array ws) ->
              Just (s,Rval (Litv_i2(IntLit(integerFromNat(List.length ws)))))
          | _ -> Nothing
         end
    | (Op_i2 Aw8update, [Loc_i2 lnum; Litv_i2(IntLit i); Litv_i2(Word8 w)]) ->
        match store_lookup lnum s with
        | Just (W8array ws) ->
            if i < 0 then
              Just (s, Rerr (Rraise (prim_exn_i2 subscript_tag "Subscript")))
            else 
              let n = natFromInteger i in
                if n >= List.length ws then
                  Just (s, Rerr (Rraise (prim_exn_i2 subscript_tag "Subscript")))
                else
                  match store_assign lnum (W8array (List.update ws n w)) s with
                    | Nothing -> Nothing
                    | Just s' -> Just (s', Rval (Conv_i2 Nothing []))
                  end
        | _ -> Nothing
      end
    | (Op_i2 Ord, [Litv_i2 (Char c)]) ->
          Just (s, Rval (Litv_i2(IntLit(integerFromNat(String_extra.ord c)))))
    | (Op_i2 Chr, [Litv_i2 (IntLit i)]) ->
        Just (s,
          if i < 0 || i > 255 then
            Rerr (Rraise (prim_exn_i2 chr_tag "Chr"))
          else
            Rval (Litv_i2(Char(String_extra.chr(natFromInteger i)))))
    | (Op_i2 (Chopb op), [Litv_i2 (Char c1); Litv_i2 (Char c2)]) ->
        Just (s, Rval (Boolv_i2 (opb_lookup op (integerFromNat(String_extra.ord c1)) (integerFromNat(String_extra.ord c2)))))
    | (Op_i2 Implode, [v]) ->
          match v_i2_to_char_list v with
          | Just ls ->
              Just (s, Rval (Litv_i2 (StrLit (toString ls))))
          | Nothing -> Nothing
          end
    | (Op_i2 Explode, [Litv_i2 (StrLit str)]) ->
        Just (s, Rval (char_list_to_v_i2 (toCharList str)))
    | (Op_i2 Strlen, [Litv_i2 (StrLit str)]) ->
        Just (s, Rval (Litv_i2(IntLit(integerFromNat(stringLength str)))))
    | (Op_i2 VfromList, [v]) ->
          match v_to_list_i2 v with
            | Just vs ->
                Just (s, Rval (Vectorv_i2 vs))
            | Nothing -> Nothing
          end
    | (Op_i2 Vsub, [Vectorv_i2 vs; Litv_i2 (IntLit i)]) ->
        if i < 0 then
          Just (s, Rerr (Rraise (prim_exn_i2 subscript_tag "Subscript")))
        else
          let n = natFromInteger i in
            if n >= List.length vs then
              Just (s, Rerr (Rraise (prim_exn_i2 subscript_tag "Subscript")))
            else 
              Just (s, Rval (List_extra.nth vs n))
    | (Op_i2 Vlength, [Vectorv_i2 vs]) ->
        Just (s, Rval (Litv_i2 (IntLit (integerFromNat (List.length vs)))))
    | (Op_i2 Aalloc, [Litv_i2 (IntLit n); v]) ->
        if n < 0 then
          Just (s, Rerr (Rraise (prim_exn_i2 subscript_tag "Subscript")))
        else
          let (s',lnum) =
            store_alloc (Varray (List.replicate (natFromInteger n) v)) s
          in 
            Just (s', Rval (Loc_i2 lnum))
    | (Op_i2 Asub, [Loc_i2 lnum; Litv_i2 (IntLit i)]) ->
        match store_lookup lnum s with
          | Just (Varray vs) ->
              if i < 0 then
                Just (s, Rerr (Rraise (prim_exn_i2 subscript_tag "Subscript")))
              else
                let n = natFromInteger i in
                  if n >= List.length vs then
                    Just (s, Rerr (Rraise (prim_exn_i2 subscript_tag "Subscript")))
                  else 
                    Just (s, Rval (List_extra.nth vs n))
          | _ -> Nothing
        end
    | (Op_i2 Alength, [Loc_i2 n]) ->
        match store_lookup n s with
          | Just (Varray ws) ->
              Just (s,Rval (Litv_i2 (IntLit(integerFromNat(List.length ws)))))
          | _ -> Nothing
         end
    | (Op_i2 Aupdate, [Loc_i2 lnum; Litv_i2 (IntLit i); v]) ->
        match store_lookup lnum s with
        | Just (Varray vs) ->
            if i < 0 then
              Just (s, Rerr (Rraise (prim_exn_i2 subscript_tag "Subscript")))
            else 
              let n = natFromInteger i in
                if n >= List.length vs then
                  Just (s, Rerr (Rraise (prim_exn_i2 subscript_tag "Subscript")))
                else
                  match store_assign lnum (Varray (List.update vs n v)) s with
                    | Nothing -> Nothing
                    | Just s' -> Just (s', Rval (Conv_i2 Nothing []))
                  end
        | _ -> Nothing
      end
    | _ -> Nothing
  end

val do_if_i2 : v_i2 -> exp_i2 -> exp_i2 -> maybe exp_i2
let do_if_i2 v e1 e2 =
  if v = (Boolv_i2 true) then
    Just e1
  else if v = (Boolv_i2 false) then
    Just e2
  else
    Nothing

val pmatch_i2 : exh_ctors_env -> store v_i2 -> pat_i2 -> v_i2 -> alist varN v_i2 -> match_result (alist varN v_i2)
let rec
pmatch_i2 exh s (Pvar_i2 x) v' env = Match ((x,v')::env)
and
pmatch_i2 exh s (Plit_i2 l) (Litv_i2 l') env =
  if l = l' then
    Match env
  else if lit_same_type l l' then
    No_match
  else
    Match_type_error
and
pmatch_i2 exh s (Pcon_i2 (Just (n, (TypeExn _))) ps) (Conv_i2 (Just (n', (TypeExn _))) vs) env =
  if n = n' && List.length ps = List.length vs then
    pmatch_list_i2 exh s ps vs env
  else
    No_match
and
pmatch_i2 exh s (Pcon_i2 (Just (n, (TypeId t))) ps) (Conv_i2 (Just (n', (TypeId t'))) vs) env =
  if t = t' then
    match Map.lookup t exh with
      | Nothing -> Match_type_error
      | Just m ->
          let a = List.length ps in
          match nat_map_lookup m a with
          | Nothing -> Match_type_error
          | Just max ->
              if n = n' && a = List.length vs then
                if n < max then
                  pmatch_list_i2 exh s ps vs env
                else Match_type_error
              else
                match nat_map_lookup m (List.length vs) with
                | Nothing -> Match_type_error
                | Just max' ->
                    if n < max && n' < max' then
                      No_match
                    else Match_type_error
                end
          end
    end
  else Match_type_error
and
pmatch_i2 exh s (Pcon_i2 Nothing ps) (Conv_i2 Nothing vs) env =
  if List.length ps = List.length vs then
    pmatch_list_i2 exh s ps vs env
  else
    Match_type_error
and
pmatch_i2 exh s (Pref_i2 p) (Loc_i2 lnum) env =
  match store_lookup lnum s with
    | Just (Refv v) -> pmatch_i2 exh s p v env
    | _ -> Match_type_error
  end
and
pmatch_i2 exh _ _ _ env = Match_type_error
and
pmatch_list_i2 exh s [] [] env = Match env
and
pmatch_list_i2 exh s (p::ps) (v::vs) env =
  match pmatch_i2 exh s p v env with
    | No_match -> No_match
    | Match_type_error -> Match_type_error
    | Match env' -> pmatch_list_i2 exh s ps vs env'
  end
and
pmatch_list_i2 exh s _ _ env = Match_type_error


indreln [evaluate_i2 : bool -> all_env_i2 -> count_store v_i2 -> exp_i2 -> count_store v_i2 * result v_i2 v_i2 -> bool]
and [evaluate_list_i2 : bool -> all_env_i2 -> count_store v_i2 -> list exp_i2 -> count_store v_i2 * result (list v_i2) v_i2 -> bool]
and [evaluate_match_i2 : bool -> all_env_i2 -> count_store v_i2 -> v_i2 -> list (pat_i2 * exp_i2) -> v_i2 -> count_store v_i2 * result v_i2 v_i2 -> bool]

lit : forall ck env l s.
true
==>
evaluate_i2 ck env s (Lit_i2 l) (s, Rval (Litv_i2 l))

and

raise1 : forall ck env e s1 s2 v.
evaluate_i2 ck s1 env e (s2, Rval v)
==>
evaluate_i2 ck s1 env (Raise_i2 e) (s2, Rerr (Rraise v))

and

raise2 : forall ck env e s1 s2 err.
evaluate_i2 ck s1 env e (s2, Rerr err)
==>
evaluate_i2 ck s1 env (Raise_i2 e) (s2, Rerr err)

and

handle1 : forall ck s1 s2 env e v pes.
evaluate_i2 ck s1 env e (s2, Rval v)
==>
evaluate_i2 ck s1 env (Handle_i2 e pes) (s2, Rval v)

and

handle2 : forall ck s1 s2 env e pes v bv.
evaluate_i2 ck env s1 e (s2, Rerr (Rraise v)) &&
evaluate_match_i2 ck env s2 v pes v bv
==>
evaluate_i2 ck env s1 (Handle_i2 e pes) bv

and

handle3 : forall ck s1 s2 env e pes err.
evaluate_i2 ck env s1 e (s2, Rerr err) &&
(err = Rtimeout_error || (err = Rtype_error))
==>
evaluate_i2 ck env s1 (Handle_i2 e pes) (s2, Rerr err)

and

con1 : forall ck env tag es vs s s'.
evaluate_list_i2 ck env s (List.reverse es) (s', Rval vs)
==>
evaluate_i2 ck env s (Con_i2 tag es) (s', Rval (Conv_i2 tag (List.reverse vs)))

and

con3 : forall ck env tag es err s s'.
evaluate_list_i2 ck env s (List.reverse es) (s', Rerr err)
==>
evaluate_i2 ck env s (Con_i2 tag es) (s', Rerr err)

and

var1 : forall ck env n v s.
(lookup n (all_env_i2_to_env env) = Just v)
==>
evaluate_i2 ck env s (Var_local_i2 n) (s, Rval v)

and

var2 : forall ck env n s.
(lookup n (all_env_i2_to_env env) = Nothing)
==>
evaluate_i2 ck env s (Var_local_i2 n) (s, Rerr Rtype_error)

and

var3 : forall ck env n v s.
(List.length (all_env_i2_to_genv env) > n) &&
(List_extra.nth (all_env_i2_to_genv env) n = Just v)
==>
evaluate_i2 ck env s (Var_global_i2 n) (s, Rval v)

and

var4 : forall ck env n s.
(List.length (all_env_i2_to_genv env) > n) &&
(List_extra.nth (all_env_i2_to_genv env) n = Nothing)
==>
evaluate_i2 ck env s (Var_global_i2 n) (s, Rerr Rtype_error)

and

var5 : forall ck env n s.
not (List.length (all_env_i2_to_genv env) > n)
==>
evaluate_i2 ck env s (Var_global_i2 n) (s, Rerr Rtype_error)

and

fn : forall ck env n e s.
true
==>
evaluate_i2 ck env s (Fun_i2 n e) (s, Rval (Closure_i2 (all_env_i2_to_env env) n e))

and

app1 : forall ck exh genv env es vs env' e bv s1 s2 count.
evaluate_list_i2 ck (exh,genv,env) s1 (List.reverse es) ((count,s2), Rval vs) &&
do_opapp_i2 (List.reverse vs) = Just (env', e) &&
(ck --> count <> 0) &&
evaluate_i2 ck (exh,genv,env') ((if ck then count-1 else count),s2) e bv
==>
evaluate_i2 ck (exh,genv,env) s1 (App_i2 (Op_i2 Opapp) es) bv

and

app2 : forall ck env es vs env' e s1 s2 count.
evaluate_list_i2 ck env s1 (List.reverse es) ((count,s2), Rval vs) &&
do_opapp_i2 (List.reverse vs) = Just (env', e) &&
count = 0 &&
ck
==>
evaluate_i2 ck env s1 (App_i2 (Op_i2 Opapp) es) ((0,s2), Rerr Rtimeout_error)

and

app3 : forall ck env es vs s1 s2.
evaluate_list_i2 ck env s1 (List.reverse es) (s2, Rval vs) &&
do_opapp_i2 (List.reverse vs) = Nothing
==>
evaluate_i2 ck env s1 (App_i2 (Op_i2 Opapp) es) (s2, Rerr Rtype_error)

and

app4 : forall ck env op es vs res s1 s2 s3 count.
evaluate_list_i2 ck env s1 (List.reverse es) ((count,s2), Rval vs) &&
do_app_i2 s2 op (List.reverse vs) = Just (s3, res) &&
op <> Op_i2 Opapp
==>
evaluate_i2 ck env s1 (App_i2 op es) ((count,s3), res)

and

app5 : forall ck env op es vs s1 s2 count.
evaluate_list_i2 ck env s1 (List.reverse es) ((count,s2), Rval vs) &&
do_app_i2 s2 op (List.reverse vs) = Nothing &&
op <> Op_i2 Opapp
==>
evaluate_i2 ck env s1 (App_i2 op es) ((count,s2), Rerr Rtype_error)

and

app6 : forall ck env op es err s1 s2.
evaluate_list_i2 ck env s1 (List.reverse es) (s2, Rerr err)
==>
evaluate_i2 ck env s1 (App_i2 op es) (s2, Rerr err)

and

if1 : forall ck env e1 e2 e3 v e' bv s1 s2.
evaluate_i2 ck env s1 e1 (s2, Rval v) &&
do_if_i2 v e2 e3 = Just e' &&
evaluate_i2 ck env s2 e' bv
==>
evaluate_i2 ck env s1 (If_i2 e1 e2 e3) bv

and

if2 : forall ck env e1 e2 e3 v s1 s2.
evaluate_i2 ck env s1 e1 (s2, Rval v) &&
do_if_i2 v e2 e3 = Nothing
==>
evaluate_i2 ck env s1 (If_i2 e1 e2 e3) (s2, Rerr Rtype_error)

and

if3 : forall ck env e1 e2 e3 err s s'.
evaluate_i2 ck env s e1 (s', Rerr err)
==>
evaluate_i2 ck env s (If_i2 e1 e2 e3) (s', Rerr err)

and

mat1 : forall ck env e pes v bv s1 s2.
evaluate_i2 ck env s1 e (s2, Rval v) &&
evaluate_match_i2 ck env s2 v pes (Conv_i2 (Just (bind_tag,(TypeExn (Short "Bind")))) []) bv
==>
evaluate_i2 ck env s1 (Mat_i2 e pes) bv

and

mat2 : forall ck env e pes err s s'.
evaluate_i2 ck env s e (s', Rerr err)
==>
evaluate_i2 ck env s (Mat_i2 e pes) (s', Rerr err)

and

let1 : forall ck exh genv env n e1 e2 v bv s1 s2.
evaluate_i2 ck (exh,genv,env) s1 e1 (s2, Rval v) &&
evaluate_i2 ck (exh,genv,opt_bind n v env) s2 e2 bv
==>
evaluate_i2 ck (exh,genv,env) s1 (Let_i2 n e1 e2) bv

and

let2 : forall ck env n e1 e2 err s s'.
evaluate_i2 ck env s e1 (s', Rerr err)
==>
evaluate_i2 ck env s (Let_i2 n e1 e2) (s', Rerr err)

and

letrec1 : forall ck exh genv env funs e bv s.
List.allDistinct (List.map (fun (x,y,z) -> x) funs) &&
evaluate_i2 ck (exh,genv,build_rec_env_i2 funs env env) s e bv
==>
evaluate_i2 ck (exh,genv,env) s (Letrec_i2 funs e) bv

and

letrec2 : forall ck env funs e s.
not (List.allDistinct (List.map (fun (x,y,z) -> x) funs))
==>
evaluate_i2 ck env s (Letrec_i2 funs e) (s, Rerr Rtype_error)

and

extend : forall ck env n s.
true
==>
evaluate_i2 ck env s (Extend_global_i2 n) (s, Rerr Rtype_error)

and

empty : forall ck env s.
true
==>
evaluate_list_i2 ck env s [] (s, Rval [])

and

cons1 : forall ck env e es v vs s1 s2 s3.
evaluate_i2 ck env s1 e (s2, Rval v) &&
evaluate_list_i2 ck env s2 es (s3, Rval vs)
==>
evaluate_list_i2 ck env s1 (e::es) (s3, Rval (v::vs))

and

cons2 : forall ck env e es err s s'.
evaluate_i2 ck env s e (s', Rerr err)
==>
evaluate_list_i2 ck env s (e::es) (s', Rerr err)

and

cons3 : forall ck env e es v err s1 s2 s3.
evaluate_i2 ck env s1 e (s2, Rval v) &&
evaluate_list_i2 ck env s2 es (s3, Rerr err)
==>
evaluate_list_i2 ck env s1 (e::es) (s3, Rerr err)

and

mat_empty : forall ck env v s err_v.
true
==>
evaluate_match_i2 ck env s v [] err_v (s, Rerr (Rraise err_v))

and

mat_cons1 : forall ck exh genv env env' v p pes e bv s count err_v.
List.allDistinct (pat_bindings_i2 p []) &&
(pmatch_i2 exh s p v env = Match env') &&
evaluate_i2 ck (exh,genv,env') (count,s) e bv
==>
evaluate_match_i2 ck (exh,genv,env) (count,s) v ((p,e)::pes) err_v bv

and

mat_cons2 : forall ck exh genv env v p e pes bv s count err_v.
List.allDistinct (pat_bindings_i2 p []) &&
(pmatch_i2 exh s p v env = No_match) &&
evaluate_match_i2 ck (exh,genv,env) (count,s) v pes err_v bv
==>
evaluate_match_i2 ck (exh,genv,env) (count,s) v ((p,e)::pes) err_v bv

and

mat_cons3 : forall ck exh genv env v p e pes s count err_v.
(pmatch_i2 exh s p v env = Match_type_error)
==>
evaluate_match_i2 ck (exh,genv,env) (count,s) v ((p,e)::pes) err_v ((count,s), Rerr Rtype_error)

and

mat_cons4 : forall ck env v p e pes s err_v.
not (List.allDistinct (pat_bindings_i2 p []))
==>
evaluate_match_i2 ck env s v ((p,e)::pes) err_v (s, Rerr Rtype_error)

indreln [evaluate_dec_i2 : bool -> exh_ctors_env -> list (maybe v_i2) -> count_store v_i2 -> dec_i2 -> count_store v_i2 * result (list v_i2) v_i2 -> bool]

dlet1 : forall ck exh genv n e vs s1 s2.
evaluate_i2 ck (exh,genv,[]) s1 e (s2, Rval (Conv_i2 Nothing vs)) &&
List.length vs = n
==>
evaluate_dec_i2 ck exh genv s1 (Dlet_i2 n e) (s2, Rval vs)

and

dlet3 : forall ck exh genv n e vs s1 s2.
evaluate_i2 ck (exh,genv,[]) s1 e (s2, Rval (Conv_i2 Nothing vs)) &&
List.length vs <> n
==>
evaluate_dec_i2 ck exh genv s1 (Dlet_i2 n e) (s2, Rerr Rtype_error)

and

dlet4 : forall ck exh genv n e v s1 s2.
evaluate_i2 ck (exh,genv,[]) s1 e (s2, Rval v) &&
not (exists vs. v = Conv_i2 Nothing vs)
==>
evaluate_dec_i2 ck exh genv s1 (Dlet_i2 n e) (s2, Rerr Rtype_error)

and

dlet5 : forall ck exh genv n e err s s'.
evaluate_i2 ck (exh,genv,[]) s e (s', Rerr err)
==>
evaluate_dec_i2 ck exh genv s (Dlet_i2 n e) (s', Rerr err)

and

dletrec1 : forall ck exh genv funs s.
true
==>
evaluate_dec_i2 ck exh genv s (Dletrec_i2 funs) (s, Rval (List.map (fun (f,x,e) -> Closure_i2 [] x e) funs))

indreln [evaluate_decs_i2 : bool -> exh_ctors_env -> list (maybe v_i2) -> count_store v_i2 -> list dec_i2 -> count_store v_i2 * list v_i2 * maybe (error_result v_i2) -> bool]

empty : forall ck exh genv s.
true
==>
evaluate_decs_i2 ck exh genv s [] (s, [], Nothing)

and

cons1 : forall ck exh s1 s2 genv d ds e.
evaluate_dec_i2 ck exh genv s1 d (s2, Rerr e)
==>
evaluate_decs_i2 ck exh genv s1 (d::ds) (s2, [], Just e)

and

cons2 : forall ck exh s1 s2 s3 genv d ds new_env new_env' r.
evaluate_dec_i2 ck exh genv s1 d (s2, Rval new_env) &&
evaluate_decs_i2 ck exh (genv ++ List.map Just new_env) s2 ds (s3, new_env', r)
==>
evaluate_decs_i2 ck exh genv s1 (d::ds) (s3, new_env ++ new_env', r)

let rec
num_defs [] = 0
and
num_defs (Dlet_i2 n _::ds) = n + num_defs ds
and
num_defs (Dletrec_i2 funs::ds) = List.length funs + num_defs ds

declare termination_argument num_defs = automatic

indreln [evaluate_prompt_i2 : bool -> exh_ctors_env -> list (maybe v_i2) -> count_store v_i2 -> prompt_i2 -> count_store v_i2 * list (maybe v_i2) * maybe (error_result v_i2) -> bool]

prompt_val : forall ck exh genv s1 ds s2 env.
evaluate_decs_i2 ck exh genv s1 ds (s2,env,Nothing)
==>
evaluate_prompt_i2 ck exh genv s1 (Prompt_i2 ds) (s2, List.map Just env, Nothing)

and

prompt_err1 : forall ck exh genv s1 ds s2 env err.
evaluate_decs_i2 ck exh genv s1 ds (s2,env,Just err)
==>
evaluate_prompt_i2 ck exh genv s1 (Prompt_i2 ds) (s2, 
                                           List.map Just env ++ List.genlist (fun _ -> Nothing) (num_defs ds - List.length env),
                                           Just err)

indreln [evaluate_prog_i2 : bool -> exh_ctors_env -> list (maybe v_i2) -> count_store v_i2 -> list prompt_i2 -> count_store v_i2 * list (maybe v_i2) * maybe (error_result v_i2) -> bool]

prog_empty : forall ck exh genv s.
true
==>
evaluate_prog_i2 ck exh genv s [] (s, [], Nothing)

and

prog_cons_var : forall ck exh genv s1 prompt prompts s2 env2 s3 env3 r.
evaluate_prompt_i2 ck exh genv s1 prompt (s2, env2, Nothing) &&
evaluate_prog_i2 ck exh (genv++env2) s2 prompts (s3, env3, r)
==>
evaluate_prog_i2 ck exh genv s1 (prompt::prompts) (s3, env2++env3, r)

and

prog_cons_err : forall ck exh genv s1 prompt prompts s2 env2 err.
evaluate_prompt_i2 ck exh genv s1 prompt (s2, env2, Just err)
==>
evaluate_prog_i2 ck exh genv s1 (prompt::prompts) (s2, env2, Just err)
