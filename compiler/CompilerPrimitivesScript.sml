(*Generated by Lem from compilerPrimitives.lem.*)
open bossLib Theory Parse res_quanTheory
open fixedPointTheory finite_mapTheory listTheory pairTheory pred_setTheory
open integerTheory set_relationTheory sortingTheory stringTheory wordsTheory

val _ = numLib.prefer_num();



open BytecodeTheory CompilerLibTheory SemanticPrimitivesTheory AstTheory LibTheory

val _ = new_theory "CompilerPrimitives"

(*open Ast*)
(*open SemanticPrimitives*)
(*open CompilerLib*)

 val map_result_def = Define `

(map_result f (Rval v) = (Rval (f v)))
/\
(map_result _ (Rerr e) = (Rerr e))`;


 val every_result_def = Define `

(every_result _ (Rerr _) = T)
/\
(every_result P (Rval v) = (P v))`;


 val error_to_int_def = Define `

(error_to_int Bind_error = i0)
/\
(error_to_int Div_error = i1)
/\
(error_to_int (Int_error n) = ( int_add i2 n))`;


 val num_to_bool_def = Define `

(num_to_bool 0 = F)
/\
(num_to_bool _ = T)`;


 val is_Short_def = Define `

(is_Short (Short _) = T)
/\
(is_Short _ = F)`;

val _ = export_theory()

