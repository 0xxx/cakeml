(*Generated by Lem from compile.lem.*)
open bossLib Theory Parse res_quanTheory
open fixedPointTheory finite_mapTheory listTheory pairTheory pred_setTheory
open integerTheory set_relationTheory sortingTheory stringTheory wordsTheory
open alistTheory

val _ = numLib.prefer_num();



open ToIntLangTheory IntLangTheory CompilerPrimitivesTheory BytecodeTheory CompilerLibTheory SemanticPrimitivesTheory AstTheory LibTheory

val _ = new_theory "Compile"

(* Intermediate Language to Bytecode *)

(*open SemanticPrimitives*)
(*open Ast*)
(*open CompilerLib*)
(*open CompilerPrimitives*)
(*open IntLang*)
(*open ToIntLang*)
(*open Bytecode*)

(* pull closure bodies into code environment *)

 val bind_fv_def = Define `
 (bind_fv (az,e) nz ix =  
(let fvs = ( free_vars e) in
  let recs = ( FILTER (\ v . az +v IN fvs /\ ~  (v =ix)) ( GENLIST (\ n . n) nz)) in
  let envs = ( FILTER (\ v . az +nz <= v) (QSORT (\ x y . x < y) ( SET_TO_LIST fvs))) in
  let envs = ( MAP (\ v . v -(az +nz)) envs) in
  let rz = ( LENGTH recs +1) in
  let e = ( mkshift (\ v . if v < nz then THE(find_index v (ix ::recs) 0)
                            else THE(find_index (v - nz) envs rz))
                  az e) in
  let rz = (rz - 1) in
  ((( GENLIST (\ i . CCArg (2 +i)) (az +1)) ++(( GENLIST CCRef rz) ++( GENLIST (\ i . CCEnv (rz +i)) ( LENGTH envs))))
  ,(recs,envs)
  ,e
  )))`;


 val label_closures_defn = Hol_defn "label_closures" `

(label_closures ez j (CDecl xs) = (CDecl xs, j))
/\
(label_closures ez j (CRaise err) = (CRaise err, j))
/\
(label_closures ez j (CHandle e1 e2) =  
(let (e1,j) = (label_closures ez j e1) in
  let (e2,j) = (label_closures (ez +1) j e2) in
  (CHandle e1 e2, j)))
/\
(label_closures ez j (CVar x) = (CVar x, j))
/\
(label_closures ez j (CLit l) = (CLit l, j))
/\
(label_closures ez j (CCon cn es) =  
(let (es,j) = (label_closures_list ez j es) in
  (CCon cn es,j)))
/\
(label_closures ez j (CTagEq e n) =  
(let (e,j) = (label_closures ez j e) in
  (CTagEq e n,j)))
/\
(label_closures ez j (CProj e n) =  
(let (e,j) = (label_closures ez j e) in
  (CProj e n,j)))
/\
(label_closures ez j (CLet e1 e2) =  
(let (e1,j) = (label_closures ez j e1) in
  let (e2,j) = (label_closures (ez +1) j e2) in
  (CLet e1 e2, j)))
/\
(label_closures ez j (CLetrec defs e) =  
(let defs = ( MAP SND ( FILTER ((o) IS_NONE FST) defs)) in
  let nz = ( LENGTH defs) in
  let (defs,j) = (label_closures_defs ez j nz 0 defs) in
  let (e,j) = (label_closures (ez +nz) j e) in
  (CLetrec defs e, j)))
/\
(label_closures ez j (CFun (NONE, def)) =  
(let (defs,j) = (label_closures_defs ez j 1 0 [def]) in
  (CFun ( EL  0  defs), j)))
/\
(label_closures ez j (CFun (SOME x,y)) = (CFun (SOME x,y),j)) (* should not happen *)
/\
(label_closures ez j (CCall e es) =  
(let (e,j) = (label_closures ez j e) in
  let (es,j) = (label_closures_list ez j es) in
  (CCall e es,j)))
/\
(label_closures ez j (CPrim1 p1 e) =  
(let (e,j) = (label_closures ez j e) in
  (CPrim1 p1 e, j)))
/\
(label_closures ez j (CPrim2 p2 e1 e2) =  
(let (e1,j) = (label_closures ez j e1) in
  let (e2,j) = (label_closures ez j e2) in
  (CPrim2 p2 e1 e2, j)))
/\
(label_closures ez j (CUpd e1 e2) =  
(let (e1,j) = (label_closures ez j e1) in
  let (e2,j) = (label_closures ez j e2) in
  (CUpd e1 e2, j)))
/\
(label_closures ez j (CIf e1 e2 e3) =  
(let (e1,j) = (label_closures ez j e1) in
  let (e2,j) = (label_closures ez j e2) in
  let (e3,j) = (label_closures ez j e3) in
  (CIf e1 e2 e3, j)))
/\
(label_closures_list ez j [] = ([],j))
/\
(label_closures_list ez j (e::es) =  
(let (e,j) = (label_closures ez j e) in
  let (es,j) = (label_closures_list ez j es) in
  ((e ::es),j)))
/\
(label_closures_defs ez j nz k [] = ([], j))
/\
(label_closures_defs ez ld nz k ((az,b)::defs) =  
(let (ccenv,ceenv,b) = ( bind_fv (az,b) nz k) in
  let cz = (az + LENGTH ( FST ceenv) + LENGTH ( SND ceenv) + 1) in
  let (b,j) = (label_closures cz (ld +1) b) in
  let (defs,j) = (label_closures_defs ez j nz (k +1) defs) in
  (((SOME (ld,(ccenv,ceenv)),(az,b)) ::defs), j)))`;

val _ = Defn.save_defn label_closures_defn;

val _ = Hol_datatype `
 call_context = TCNonTail of bool | TCTail of num => num`;

(* TCTail j k = in tail position,
   * the called function has j arguments, and
   * k let variables have been bound *)
(* TCNonTail b = if b then in tail position, but called from top-level,
 * else not in tail position. *)

val _ = Hol_datatype `
 compiler_result =
  <| out: bc_inst list (* reversed code *)
   ; next_label: num
   ; decl: ctenv # num # string list
   |>`;


 val prim1_to_bc_def = Define `

(prim1_to_bc CRef = Ref)
/\
(prim1_to_bc CDer = Deref)`;


 val prim2_to_bc_def = Define `

(prim2_to_bc CAdd = Add)
/\
(prim2_to_bc CSub = Sub)
/\
(prim2_to_bc CMul = Mult)
/\
(prim2_to_bc CDiv = Div)
/\
(prim2_to_bc CMod = Mod)
/\
(prim2_to_bc CLt = Less)
/\
(prim2_to_bc CEq = Equal)`;


val _ = Define `
 emit = ( FOLDL (\ s i . ( s with<| out := i :: s.out |>)))`;


 val get_labels_def = Define `

(get_labels n s = (( s with<| next_label := s.next_label + n |>), GENLIST (\ i . s.next_label + i) n))`;


 val compile_envref_defn = Hol_defn "compile_envref" `

(compile_envref sz s (CCArg n) = ( emit s [Stack (Load (sz + n))]))
/\
(compile_envref sz s (CCEnv n) = ( emit s [Stack (Load sz); Stack (El n)]))
/\
(compile_envref sz s (CCRef n) = ( emit (compile_envref sz s (CCEnv n)) [Deref]))`;

val _ = Defn.save_defn compile_envref_defn;

 val compile_varref_def = Define `

(compile_varref sz s (CTLet n) = ( emit s [Stack (Load (sz - n))]))
/\
(compile_varref sz s (CTEnv x) = ( compile_envref sz s x))`;


(* calling convention:
 * before: env, CodePtr ret, argn, ..., arg1, Block 0 [CodePtr c; env],
 * thus, since env = stack[sz], argk should be CTArg (2 + n - k)
 * after:  retval,
 *)

(* closure representation:
 * Block 3 [CodePtr f; Env]
 * where Env = Number 0 for empty, or else
 * Block 3 [v1,...,vk]
 * with a value for each free variable
 * (some values may be RefPtrs to other (mutrec) closures)
 *)

(* closure construction, for a bundle of nz names, nk defs:
 * - push nz refptrs
 * - push nk CodePtrs, each pointing to the appropriate body
 * - for each def, load its CodePtr, load its environment, cons them up, and
     store them where its CodePtr was
   - for each name, load the refptr and update it with the closure
   - for each name, store the refptr back where it was
 *)

 val emit_ceenv_def = Define `

(emit_ceenv env (sz,s) fv = ((sz +1),compile_varref sz s ( EL  fv  env)))`;


 val emit_ceref_def = Define `

(* sz                                                           z                             *)
(* e, ..., e, CodePtr_k, cl_1, ..., CodePtr k, ..., CodePtr nz, RefPtr_1 0, ..., RefPtr_nz 0, *)
(emit_ceref z (sz,s) j = ((sz +1),emit s [Stack (Load ((sz - z) +j))]))`;


 val push_lab_def = Define `

(push_lab (s,ecs) (NONE,_) = (s,(([],[]) ::ecs))) (* should not happen *)
/\
(push_lab (s,ecs) (SOME (l,(_,ceenv)),_) =
  (emit s [PushPtr (Lab l)],(ceenv ::ecs)))`;


 val cons_closure_def = Define `

(cons_closure env0 sz nk (s,k) (refs,envs) =  
(
  (*                                                                      sz *)
  (* cl_1, ..., CodePtr_k, ..., CodePtr_nk, RefPtr_1 0, ..., RefPtr_nk 0,    *)let s = ( emit s [Stack (Load k)]) in
  (* CodePtr_k, cl_1, ..., CodePtr_k, ..., CodePtr_nk, RefPtr_1 0, ..., RefPtr_nk 0, *)
  let (z,s) = ( FOLDL (emit_ceref (sz +nk)) ((sz +nk +nk +1),s) refs) in
  let (z,s) = ( FOLDL (emit_ceenv env0) (z,s) envs) in
  (* e_kj, ..., e_k1, CodePtr_k, cl_1, ..., CodePtr_k, ..., CodePtr_nk, RefPtr_1 0, ..., RefPtr_nk 0, *)
  let s = ( emit s [Stack (Cons 0 ( LENGTH refs + LENGTH envs))]) in
  (* env_k, CodePtr_k, cl_1, ..., CodePtr_k, ..., CodePtr_nk, RefPtr_1 0, ..., RefPtr_nk 0, *)
  let s = ( emit s [Stack (Cons closure_tag 2)]) in
  (* cl_k,  cl_1, ..., CodePtr_k, ..., CodePtr_nk, RefPtr_1 0, ..., RefPtr_nk 0, *)
  let s = ( emit s [Stack (Store k)]) in
  (* cl_1, ..., cl_k, ..., CodePtr_nk, RefPtr_1 0, ..., RefPtr_nk 0, *)
  (s,(k +1))))`;


 val update_refptr_def = Define `

(update_refptr nk (s,k) =  
(
  (* cl_1, ..., cl_nk, RefPtr_1 cl_1, ..., RefPtr_k 0, ..., RefPtr_nk 0, *)let s = ( emit s [Stack (Load (nk + k))]) in
  (* RefPtr_k 0, cl_1, ..., cl_nk, RefPtr_1 cl_1, ..., RefPtr_k 0, ..., RefPtr_nk 0, *)
  let s = ( emit s [Stack (Load (1 + k))]) in
  (* cl_k, RefPtr_k 0, cl_1, ..., cl_nk, RefPtr_1 cl_1, ..., RefPtr_k 0, ..., RefPtr_nk 0, *)
  let s = ( emit s [Update]) in
  (* cl_1, ..., cl_nk, RefPtr_1 cl_1, ..., RefPtr_k cl_k, ..., RefPtr_nk 0, *)
  (s,(k +1))))`;


 val compile_closures_def = Define `

(compile_closures env sz s defs =  
(let nk = ( LENGTH defs) in
  let s = ( num_fold (\ s . emit s [Stack (PushInt i0); Ref]) s nk) in
  (* RefPtr_1 0, ..., RefPtr_nk 0, *)
  let (s,ecs) = ( FOLDL push_lab (s,[]) ( REVERSE defs)) in
  (* CodePtr 1, ..., CodePtr nk, RefPtr_1 0, ..., RefPtr_nk 0, *)
  let (s,k) = ( FOLDL (cons_closure env sz nk) (s,0) ecs) in
  (* cl_1, ..., cl_nk, RefPtr_1 0, ..., RefPtr_nk 0, *)
  let (s,k) = ( num_fold (update_refptr nk) (s,0) nk) in
  (* cl_1, ..., cl_nk, RefPtr_1 cl_1, ..., RefPtr_nk cl_nk, *)
  let k = (nk - 1) in
  num_fold (\ s . emit s [Stack (Store k)]) s nk))`;

  (* cl_1, ..., cl_nk, *)

 val compile_decl_def = Define `

(compile_decl env1 = ( FOLDL
    (\ (s,sz,i,env,bvs) (v,bv) .
      (case find_index bv bvs 1 of
        NONE =>
          (compile_varref sz s ( EL  v  env1)
          ,(sz +1)
          ,(i +1)
          ,((CTLet i) ::env)
          ,(bv ::bvs)
          )
      | SOME j =>
          (emit (compile_varref sz s ( EL  v  env1)) [Stack (Store ((sz +j) - i))]
          ,sz
          ,i
          ,env
          ,bvs
          )
      ))))`;


 val pushret_def = Define `

(pushret (TCNonTail _) s = s)
/\
(pushret (TCTail j k) s =  
(
 (* val, vk, ..., v1, env, CodePtr ret, argj, ..., arg1, Block 0 [CodePtr c; env], *)
  emit s [Stack (Pops (k +1));
 (* val, CodePtr ret, argj, ..., arg1, Block 0 [CodePtr c; env], *)
          Stack (Load 1);
 (* CodePtr ret, val, CodePtr ret, argj, ..., arg1, Block 0 [CodePtr c; env], *)
          Stack (Store (j +2));
 (* val, CodePtr ret, argj, ..., arg1, CodePtr ret, *)
          Stack (Pops (j +1));
 (* val, CodePtr ret, *)
          Return]))`;


 val compile_defn = Hol_defn "compile" `

(compile env t sz s (CDecl vs) =  
((case t of TCNonTail T =>
  (case s.decl of (env0,sz0,bvs0) =>
  let k = (sz - sz0) in
  let (s,sz,i,env,bvs) = ( compile_decl env (s,sz,(sz0 +1),env0,bvs0) vs) in
  let s = ( emit s [Stack (Shift (i -(sz0 +1)) k)]) in
  ( s with<| decl := (env,(sz - k),bvs) |>)
  ) | _ => pushret t (emit s [Stack (PushInt i2); PopExc]) (* should not happen *) )))
/\
(compile _ t _ s (CRaise err) =  
(
  pushret t (emit s [Stack (PushInt (error_to_int err)); PopExc])))
/\
(compile env t sz s (CHandle e1 e2) = (compile env t sz s e1))
/\
(compile _ t _ s (CLit (IntLit i)) =  
(
  pushret t (emit s [Stack (PushInt i)])))
/\
(compile _ t _ s (CLit (Bool b)) =  
(
  pushret t (emit s [Stack (Cons (bool_to_tag b) 0)])))
/\
(compile _ t _ s (CLit Unit) =  
(
  pushret t (emit s [Stack (Cons unit_tag 0)])))
/\
(compile env t sz s (CVar vn) = ( pushret t (compile_varref sz s ( EL  vn  env))))
/\
(compile env t sz s (CCon n es) =  
(
  pushret t (emit (compile_nts env sz s es) [Stack (Cons (n +block_tag) ( LENGTH es))])))
/\
(compile env t sz s (CTagEq e n) =  
(
  pushret t (emit (compile env (TCNonTail F) sz s e) [Stack (TagEq (n +block_tag))])))
/\
(compile env t sz s (CProj e n) =  
(
  pushret t (emit (compile env (TCNonTail F) sz s e) [Stack (El n)])))
/\
(compile env t sz s (CLet e eb) =  
(compile_bindings env t sz eb 0 (compile env (TCNonTail F) sz s e) 1))
/\
(compile env t sz s (CLetrec defs eb) =  
(let s = ( compile_closures env sz s defs) in
  compile_bindings env t sz eb 0 s ( LENGTH defs)))
/\
(compile env t sz s (CFun cb) =  
(
  pushret t (compile_closures env sz s [cb])))
/\
(compile env t sz s (CCall e es) =  
(let n = ( LENGTH es) in
  let s = (compile_nts env sz s (e ::es)) in
  (case t of
    TCNonTail _ =>
    (* argn, ..., arg2, arg1, Block 0 [CodePtr c; env], *)
    let s = ( emit s [Stack (Load n); Stack (El 1)]) in
    (* env, argn, ..., arg1, Block 0 [CodePtr c; env], *)
    let s = ( emit s [Stack (Load (n +1)); Stack (El 0)]) in
    (* CodePtr c, env, argn, ..., arg1, Block 0 [CodePtr c; env], *)
    emit s [CallPtr]
    (* before: env, CodePtr ret, argn, ..., arg1, Block 0 [CodePtr c; env], *)
    (* after:  retval, *)
  | TCTail j k =>
    (* argn, ..., arg1, Block 0 [CodePtr c; env],
     * vk, ..., v1, env1, CodePtr ret, argj, ..., arg1, Block 0 [CodePtr c1; env1], *)
    let s = ( emit s [Stack (Load (n +1 +k +1))]) in
    (* CodePtr ret, argn, ..., arg1, Block 0 [CodePtr c; env],
     * vk, ..., v1, env1, CodePtr ret, argj, ..., arg1, Block 0 [CodePtr c1; env1], *)
    let s = ( emit s [Stack (Load (n +1)); Stack (El 1)]) in
    (* env, CodePtr ret, argn, ..., arg1, Block 0 [CodePtr c; env],
     * vk, ..., v1, env1, CodePtr ret, argj, ..., arg1, Block 0 [CodePtr c1; env1], *)
    let s = ( emit s [Stack (Load (n +2)); Stack (El 0)]) in
    (* CodePtr c, env, CodePtr ret, argn, ..., arg1, Block 0 [CodePtr c; env],
     * vk, ..., v1, env1, CodePtr ret, argj, ..., arg1, Block 0 [CodePtr c1; env1], *)
    let s = ( emit s [Stack (Shift (1 +1 +1 +n +1) (k +1 +1 +j +1))]) in
    emit s [JumpPtr]
  )))
/\
(compile env t sz s (CPrim1 uop e) =  
(
  pushret t (emit (compile env (TCNonTail F) sz s e) [prim1_to_bc uop])))
/\
(compile env t sz s (CPrim2 op e1 e2) =  
( (* TODO: need to detect div by zero? *)
  pushret t (emit (compile_nts env sz s [e1;e2]) [Stack (prim2_to_bc op)])))
/\
(compile env t sz s (CUpd e1 e2) =  
(
  pushret t (emit (compile_nts env sz s [e1;e2]) [Update; Stack (Cons unit_tag 0)])))
/\
(compile env t sz s (CIf e1 e2 e3) =  
(let s = (compile env (TCNonTail F) sz s e1) in
  let (s,labs) = ( get_labels 2 s) in
  let n0 = ( EL  0  labs) in
  let n1 = ( EL  1  labs) in
  (case t of
    TCNonTail _ =>
    let (s,labs) = ( get_labels 1 s) in
    let n2 = ( EL  0  labs) in
    let s = ( emit s [(JumpIf (Lab n0)); (Jump (Lab n1)); Label n0]) in
    let s = (compile env t sz s e2) in
    let s = ( emit s [Jump (Lab n2); Label n1]) in
    let s = (compile env t sz s e3) in
    emit s [Label n2]
  | TCTail _ _ =>
    let s = ( emit s [(JumpIf (Lab n0)); (Jump (Lab n1)); Label n0]) in
    let s = (compile env t sz s e2) in
    let s = ( emit s [Label n1]) in
    compile env t sz s e3
  )))
/\
(compile_bindings env t sz e n s 0 =  
((case t of
    TCTail j k => compile env (TCTail j (k +n)) (sz +n) s e
  | TCNonTail F =>
    emit (compile env t (sz +n) s e) [Stack (Pops n)]
  | TCNonTail T =>
    compile env t (sz +n) s e
  )))
/\
(compile_bindings env t sz e n s m =  
(compile_bindings ((CTLet (sz +(n +1))) ::env) t sz e (n +1) s (m - 1)))
/\
(compile_nts env sz s [] = s)
/\
(compile_nts env sz s (e::es) =  
(compile_nts env (sz +1) (compile env (TCNonTail F) sz s e) es))`;

val _ = Defn.save_defn compile_defn;

(* code env to bytecode *)

(* edit free_labs to include Some/None, ez, nz, and ix, and add a free_labs_defs
 * constant, and then use free_labs as the basis for both good_code_env and
 * code_env_code *)

 val free_labs_defn = Hol_defn "free_labs" `

(free_labs ez (CDecl _) = ([]))
/\
(free_labs ez (CRaise _) = ([]))
/\
(free_labs ez (CHandle e1 e2) = (free_labs ez e1 ++ free_labs (ez +1) e2))
/\
(free_labs ez (CVar _) = ([]))
/\
(free_labs ez (CLit _) = ([]))
/\
(free_labs ez (CCon _ es) = (free_labs_list ez es))
/\
(free_labs ez (CTagEq e _) = (free_labs ez e))
/\
(free_labs ez (CProj e _) = (free_labs ez e))
/\
(free_labs ez (CLet e b) = (free_labs ez e ++ free_labs (ez +1) b))
/\
(free_labs ez (CLetrec defs e) =  
(free_labs_defs ez ( LENGTH defs) 0 defs ++
  free_labs (ez + LENGTH defs) e))
/\
(free_labs ez (CFun def) = (free_labs_def ez 1 0 def))
/\
(free_labs ez (CCall e es) = (free_labs ez e ++ free_labs_list ez es))
/\
(free_labs ez (CPrim2 _ e1 e2) = (free_labs ez e1 ++ free_labs ez e2))
/\
(free_labs ez (CUpd e1 e2) = (free_labs ez e1 ++ free_labs ez e2))
/\
(free_labs ez (CPrim1 _ e) = (free_labs ez e))
/\
(free_labs ez (CIf e1 e2 e3) = (free_labs ez e1 ++ (free_labs ez e2 ++ free_labs ez e3)))
/\
(free_labs_list ez [] = ([]))
/\
(free_labs_list ez (e::es) = (free_labs ez e ++ free_labs_list ez es))
/\
(free_labs_defs ez nz ix [] = ([]))
/\
(free_labs_defs ez nz ix (d::ds) = (free_labs_def ez nz ix d ++ free_labs_defs ez nz (ix +1) ds))
/\
(free_labs_def ez nz ix (SOME (l,(cc,(re,ev))),(az,b)) =
  (((ez,nz,ix),((l,(cc,(re,ev))),(az,b))) ::(free_labs (1 + LENGTH re + LENGTH ev + az) b)))
/\
(free_labs_def ez nz ix (NONE,(az,b)) = (free_labs (ez +nz +az) b))`;

val _ = Defn.save_defn free_labs_defn;

 val no_labs_defn = Hol_defn "no_labs" `

(no_labs (CDecl _) = T)
/\
(no_labs (CRaise _) = T)
/\
(no_labs (CHandle e1 e2) = (no_labs e1 /\ no_labs e2))
/\
(no_labs (CVar _) = T)
/\
(no_labs (CLit _) = T)
/\
(no_labs (CCon _ es) = (no_labs_list es))
/\
(no_labs (CTagEq e _) = (no_labs e))
/\
(no_labs (CProj e _) = (no_labs e))
/\
(no_labs (CLet e b) = (no_labs e /\ no_labs b))
/\
(no_labs (CLetrec defs e) = (no_labs_defs defs /\ no_labs e))
/\
(no_labs (CFun def) = (no_labs_def def))
/\
(no_labs (CCall e es) = (no_labs e /\ no_labs_list es))
/\
(no_labs (CPrim2 _ e1 e2) = (no_labs e1 /\ no_labs e2))
/\
(no_labs (CUpd e1 e2) = (no_labs e1 /\ no_labs e2))
/\
(no_labs (CPrim1 _ e) = (no_labs e))
/\
(no_labs (CIf e1 e2 e3) = (no_labs e1 /\ no_labs e2 /\ no_labs e3))
/\
(no_labs_list [] = T)
/\
(no_labs_list (e::es) = (no_labs e /\ no_labs_list es))
/\
(no_labs_defs [] = T)
/\
(no_labs_defs (d::ds) = (no_labs_def d /\ no_labs_defs ds))
/\
(no_labs_def (SOME _,_) = F)
/\
(no_labs_def (NONE,(az,b)) = (no_labs b))`;

val _ = Defn.save_defn no_labs_defn;

 val all_labs_defn = Hol_defn "all_labs" `

(all_labs (CDecl _) = T)
/\
(all_labs (CRaise _) = T)
/\
(all_labs (CHandle e1 e2) = (all_labs e1 /\ all_labs e2))
/\
(all_labs (CVar _) = T)
/\
(all_labs (CLit _) = T)
/\
(all_labs (CCon _ es) = (all_labs_list es))
/\
(all_labs (CTagEq e _) = (all_labs e))
/\
(all_labs (CProj e _) = (all_labs e))
/\
(all_labs (CLet e b) = (all_labs e /\ all_labs b))
/\
(all_labs (CLetrec defs e) = (all_labs_defs defs /\ all_labs e))
/\
(all_labs (CFun def) = (all_labs_def def))
/\
(all_labs (CCall e es) = (all_labs e /\ all_labs_list es))
/\
(all_labs (CPrim2 _ e1 e2) = (all_labs e1 /\ all_labs e2))
/\
(all_labs (CUpd e1 e2) = (all_labs e1 /\ all_labs e2))
/\
(all_labs (CPrim1 _ e) = (all_labs e))
/\
(all_labs (CIf e1 e2 e3) = (all_labs e1 /\ all_labs e2 /\ all_labs e3))
/\
(all_labs_list [] = T)
/\
(all_labs_list (e::es) = (all_labs e /\ all_labs_list es))
/\
(all_labs_defs [] = T)
/\
(all_labs_defs (d::ds) = (all_labs_def d /\ all_labs_defs ds))
/\
(all_labs_def (SOME _,(az,b)) = (all_labs b))
/\
(all_labs_def (NONE,(az,b)) = F)`;

val _ = Defn.save_defn all_labs_defn;

 val cce_aux_def = Define `
 (cce_aux s ((l,(ccenv,_)),(az,b)) =  
(
  compile ( MAP CTEnv ccenv) (TCTail az 0) 0 (emit s [Label l]) b))`;


 val compile_code_env_def = Define `

(compile_code_env s e =  
(let (s,ls) = ( get_labels 1 s) in
  let l = ( EL  0  ls) in
  let s = ( emit s [Jump (Lab l)]) in
  let s = ( FOLDL cce_aux s ( MAP SND (free_labs 0 e))) in
  emit s [Label l]))`;


(* replace labels in bytecode with addresses *)

 val calculate_labels_defn = Hol_defn "calculate_labels" `

(calculate_labels il m n a [] = (m,n,a))
/\
(calculate_labels il m n a (Label l::lbc) =  
(calculate_labels il ( FUPDATE  m ( l, n)) n a lbc))
/\
(calculate_labels il m n a (i::lbc) =  
(calculate_labels il m (n + il i + 1) (i ::a) lbc))`;

val _ = Defn.save_defn calculate_labels_defn;

 val replace_labels_defn = Hol_defn "replace_labels" `

(replace_labels m a [] = a)
/\
(replace_labels m a (Jump (Lab l)::bc) =  
(replace_labels m (Jump (Addr ( FAPPLY  m  l)) ::a) bc))
/\
(replace_labels m a (JumpIf (Lab l)::bc) =  
(replace_labels m (JumpIf (Addr ( FAPPLY  m  l)) ::a) bc))
/\
(replace_labels m a (Call (Lab l)::bc) =  
(replace_labels m (Call (Addr ( FAPPLY  m  l)) ::a) bc))
/\
(replace_labels m a (PushPtr (Lab l)::bc) =  
(replace_labels m (PushPtr (Addr ( FAPPLY  m  l)) ::a) bc))
/\
(replace_labels m a (i::bc) =  
(replace_labels m (i ::a) bc))`;

val _ = Defn.save_defn replace_labels_defn;

 val compile_labels_def = Define `

(compile_labels il lbc =  
(let (m,n,bc) = ( calculate_labels il FEMPTY 0 [] lbc) in
    replace_labels m [] bc))`;


(* repl *)

val _ = type_abbrev( "contab" , ``: (( conN id), num)fmap # (num, ( conN id))fmap # num``);
(*val cmap : contab -> Pmap.map (id conN) num*)
 val cmap_def = Define `
 (cmap (m,_,_) = m)`;


val _ = Hol_datatype `
 repl_state =
  <| contab : contab
   ; rbvars : string list
   ; renv : ctenv
   ; rsz  : num
   ; rnext_label : num
   |>`;


(*val etC : repl_state -> exp_to_Cexp_state*)
val _ = Define `
 (etC rs = (<| bvars := rs.rbvars; cnmap := ( cmap rs.contab) |>))`;


val _ = Define `
 init_repl_state =  
(<| contab := ( FEMPTY, FEMPTY, 0)
   ; rbvars := []
   ; renv := []
   ; rsz  := 0
   ; rnext_label := 0
   |>)`;


val _ = Define `
 (compile_Cexp rs decl Ce =  
(let (Ce,n) = ( label_closures ( LENGTH rs.rbvars) rs.rnext_label Ce) in
  let cs = (<| out := []; next_label := n
            ; decl := (rs.renv,rs.rsz,rs.rbvars) |>) in
  let cs = ( compile_code_env cs Ce) in
  let cs = ( compile rs.renv (TCNonTail decl) rs.rsz cs Ce) in
  let rs = (if decl then (case cs.decl of
      (env,sz,bvars) => ( rs with<| renv := env; rsz := sz; rbvars := bvars |>)
    ) else ( rs with<| rsz := rs.rsz + 1 |>)) in
  let rs = (( rs with<| rnext_label := cs.next_label |>)) in
  (rs, REVERSE cs.out)))`;


 val number_constructors_defn = Hol_defn "number_constructors" `

(number_constructors [] ct = ct)
/\
(number_constructors ((c,_)::cs) (m,w,n) =  
(number_constructors cs ( FUPDATE  m ( (Short c), n), FUPDATE  w ( n, (Short c)), (n +1))))`;

val _ = Defn.save_defn number_constructors_defn;

 val repl_dec_defn = Hol_defn "repl_dec" `

(repl_dec rs (Dtype []) = (rs,[]))
/\
(repl_dec rs (Dtype ((_,_,cs)::ts)) =  
(let ct = ( number_constructors cs rs.contab) in
  repl_dec ( rs with<| contab := ct |>) (Dtype ts)))
/\
(repl_dec rs (Dletrec defs) =  
(let m = ( etC rs) in
  let fns = ( MAP (\p . 
  (case (p ) of ( (n,_,_) ) => n )) defs) in
  let m = (( m with<| bvars := fns ++ m.bvars |>)) in
  let Cdefs = ( defs_to_Cdefs m defs) in
  compile_Cexp rs T (CLetrec Cdefs (CDecl ( ZIP ( ( GENLIST (\ i . i) ( LENGTH fns)), fns))))))
/\
(repl_dec rs (Dlet p e) =  
(let m = ( etC rs) in
  let Ce = ( exp_to_Cexp m e) in
  let (m,Cp) = ( pat_to_Cpat ( m with<| bvars := [] |>) p) in
  let vs = (m.bvars) in
  let Cpes = ([(Cp,CDecl ( ZIP ( ( GENLIST (\ i . i) ( LENGTH vs)), vs)))]) in
  compile_Cexp rs T (CLet Ce (remove_mat_var 0 Cpes))))`;

val _ = Defn.save_defn repl_dec_defn;

val _ = Define `
 (repl_exp s exp = ( compile_Cexp s F (exp_to_Cexp (etC s) exp)))`;


(* Correctness *)

(* observable values *)

val _ = Hol_datatype `
 ov =
    OLit of lit
  | OConv of conN id => ov list
  | OFn
  | OLoc of num`;
 (* machine, not semantic, address *)

 val v_to_ov_defn = Hol_defn "v_to_ov" `

(v_to_ov s (Litv l) = (OLit l))
/\
(v_to_ov s (Conv cn vs) = (OConv cn ( MAP (v_to_ov s) vs)))
/\
(v_to_ov s (Closure _ _ _) = OFn)
/\
(v_to_ov s (Recclosure _ _ _) = OFn)
/\
(v_to_ov s (Loc n) = (OLoc ( EL  n  s)))`;

val _ = Defn.save_defn v_to_ov_defn;

 val Cv_to_ov_defn = Hol_defn "Cv_to_ov" `

(Cv_to_ov m s (CLitv l) = (OLit l))
/\
(Cv_to_ov m s (CConv cn vs) = (OConv ( FAPPLY  m  cn) ( MAP (Cv_to_ov m s) vs)))
/\
(Cv_to_ov m s (CRecClos _ _ _) = OFn)
/\
(Cv_to_ov m s (CLoc n) = (OLoc ( EL  n  s)))`;

val _ = Defn.save_defn Cv_to_ov_defn;

 val bv_to_ov_defn = Hol_defn "bv_to_ov" `

(bv_to_ov m (Number i) = (OLit (IntLit i)))
/\
(bv_to_ov m (Block n vs) =  
(if n = (bool_to_tag F) then OLit (Bool F) else
  if n = (bool_to_tag T) then OLit (Bool T) else
  if n = unit_tag then OLit Unit else
  if n = closure_tag then OFn else
  OConv ( FAPPLY  m  (n - block_tag)) ( MAP (bv_to_ov m) vs)))
/\
(bv_to_ov m (RefPtr n) = (OLoc n))`;

val _ = Defn.save_defn bv_to_ov_defn;

(* source to intermediate values *)

 val v_to_Cv_defn = Hol_defn "v_to_Cv" `

(v_to_Cv m (Litv l) = (CLitv l))
/\
(v_to_Cv m (Conv cn vs) =  
(CConv ( FAPPLY  m  cn) (vs_to_Cvs m vs)))
/\
(v_to_Cv m (Closure env vn e) =  
(let Cenv = (env_to_Cenv m env) in
  let m = (<| bvars := ( MAP FST env) ; cnmap := m |>) in
  let Ce = ( exp_to_Cexp (cbv m vn) e) in
  CRecClos Cenv [(NONE, (1,shift 1 1 Ce))] 0))
/\
(v_to_Cv m (Recclosure env defs vn) =  
(let Cenv = (env_to_Cenv m env) in
  let m = (<| bvars := ( MAP FST env) ; cnmap := m |>) in
  let fns = ( MAP (\p . 
  (case (p ) of ( (n,_,_) ) => n )) defs) in
  let m = (( m with<| bvars := fns ++ m.bvars |>)) in
  let Cdefs = ( defs_to_Cdefs m defs) in
  CRecClos Cenv Cdefs ( THE (find_index vn fns 0))))
/\
(v_to_Cv m (Loc n) = (CLoc n))
/\
(vs_to_Cvs m [] = ([]))
/\
(vs_to_Cvs m (v::vs) = (v_to_Cv m v :: vs_to_Cvs m vs))
/\
(env_to_Cenv m [] = ([]))
/\
(env_to_Cenv m ((_,v)::env) =  
((v_to_Cv m v) ::(env_to_Cenv m env)))`;

val _ = Defn.save_defn v_to_Cv_defn;

(* TODO: compile Raise and Handle properly *)
(* TODO: simple type system and checker? *)
(* TODO: map_Cexp? *)
(* TODO: use Pmap.peek instead of mem when it becomes available *)
(* TODO: collapse nested functions *)
(* TODO: collapse nested lets *)
(* TODO: Letfun introduction and reordering *)
(* TODO: let floating *)
(* TODO: removal of redundant expressions *)
(* TODO: simplification (e.g., constant folding) *)
(* TODO: avoid Shifts when possible *)
(* TODO: registers, register allocation, greedy shuffling? *)
(* TODO: bytecode optimizer: repeated Pops, unreachable code (e.g. after a Jump) *)
(* TODO: more efficient pattern-matching *)
(* TODO: store type information on CMat nodes (for pattern matching compilation)? *)
val _ = export_theory()

