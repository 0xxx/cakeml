(* The first intermediate language modLang. Removes modules, and introduces
 * special variable references for referring to top-level bindings.  Also
 * removes andalso and orelse and replaces them with if. 
 *
 * The AST of modLang differs from the source language by having two variable
 * reference forms, one to reference local bindings (still by name) and one to
 * reference global bindings (by index). At the top level, modules are gone.
 * However a Prompt is introduced to group declarations whose bindings should
 * all be installed by the REPL only if none of them encounters an exception
 * (one of the functions that modules perform in the source language).
 * Top-level lets and letrecs no longer bind names (or have patterns), and the
 * lets come with just a number indicating how many bindings to install in the
 * global environment.
 * 
 * The values of modLang differ in that the closures do not contain a module
 * environment.
 *
 * The semantics of modLang differ in that there is no module environment menv, nor
 * are top-level bindings added to the normal env, thus when a closure is
 * created, only locals bindings are put into it. There is a global environment
 * genv, which is just a list of the top-level bindings seen so far, with the
 * older bindings nearer the head. Global variable reference expressions simply
 * index into global environment. Top-level let rec declarations evaluate to
 * closures, rather than to recursive closures, since the recursion can be
 * handled through the genv. The expressions bound to top-level lets must
 * evaluate to a tuple with exactly as many things in it as the number of
 * bindings that the let will bind.
 *
 * The translator to modLang keeps two mappings, one mapping module paths to
 * indices into the genv, and the other mapping top-level non-module bindings
 * to genv indices. All variable references are replaced with global references
 * to the genv index if they are in the mappings. This includes top-level
 * letrec names which are all put into the mapping before translating any of
 * the let rec functions. This enables the semantics of let rec to just create
 * Closures rather than Recclosures.
 *
 * *)

open import Pervasives
open import Lib
open import Ast
open import SemanticPrimitives
open import List_extra
open import BigStep

type exp_i1 =
  | Raise_i1 of exp_i1
  | Handle_i1 of exp_i1 * list (pat * exp_i1)
  | Lit_i1 of lit
  | Con_i1 of maybe (id conN) * list exp_i1
  | Var_local_i1 of varN
  | Var_global_i1 of nat
  | Fun_i1 of varN * exp_i1
  | Uapp_i1 of uop * exp_i1
  | App_i1 of op * exp_i1 * exp_i1
  | If_i1 of exp_i1 * exp_i1 * exp_i1
  | Mat_i1 of exp_i1 * list (pat * exp_i1)
  | Let_i1 of maybe varN * exp_i1 * exp_i1
  | Letrec_i1 of list (varN * varN * exp_i1) * exp_i1

type dec_i1 =
    (* The nat is how many top-level variables this declaration binds *)
  | Dlet_i1 of nat * exp_i1
  | Dletrec_i1 of list (varN * varN * exp_i1)
  | Dtype_i1 of maybe modN * type_def
  | Dexn_i1 of maybe modN * conN * list t

(* A prompt is a list of declarations that must execute `atomically'; it
 * corresponds to a module body in the source language. If any of the
 * declarations results in an exception reaching the prompt's top level, none
 * of the declaration binding are installed. The module name is book-keeping
 * for the constructors *)
type prompt_i1 =
  | Prompt_i1 of maybe modN * list dec_i1

type v_i1 =
  | Litv_i1 of lit
  | Conv_i1 of maybe (conN * tid_or_exn) * list v_i1 
  | Closure_i1 of (envC * env varN v_i1) * varN * exp_i1
  | Recclosure_i1 of (envC * env varN v_i1) * list (varN * varN * exp_i1) * varN
  | Loc_i1 of nat

val exp_to_i1 : map modN (map varN nat) -> map varN nat -> exp -> exp_i1
val exps_to_i1 : map modN (map varN nat) -> map varN nat -> list exp -> list exp_i1
val pat_exp_to_i1 : map modN (map varN nat) -> map varN nat -> list (pat * exp) -> list (pat * exp_i1)
val funs_to_i1 : map modN (map varN nat) -> map varN nat -> list (varN * varN * exp) -> list (varN * varN * exp_i1)
let rec 
exp_to_i1 menv env (Raise e) = 
  Raise_i1 (exp_to_i1 menv env e)
and
exp_to_i1 menv env (Handle e pes) = 
  Handle_i1 (exp_to_i1 menv env e) (pat_exp_to_i1 menv env pes)
and
exp_to_i1 menv env (Lit l) = 
  Lit_i1 l 
and
exp_to_i1 menv env (Con cn es) = 
  Con_i1 cn (exps_to_i1 menv env es)
and
exp_to_i1 menv env (Var (Short x)) = 
  match Map.lookup x env with
    | Nothing -> Var_local_i1 x
    | Just n -> Var_global_i1 n
  end
and
exp_to_i1 menv env (Var (Long mn x)) =
  match Map.lookup mn menv with
    | Nothing -> Var_global_i1 0 (* Can't happen *)
    | Just env' ->
        match Map.lookup x env' with
          | Nothing -> Var_global_i1 0 (* Can't happen *)
          | Just n -> Var_global_i1 n
        end
  end
and
exp_to_i1 menv env (Fun x e) =
  Fun_i1 x (exp_to_i1 menv (Map.delete x env) e) 
and
exp_to_i1 menv env (Uapp uop e) =
  Uapp_i1 uop (exp_to_i1 menv env e)
and
exp_to_i1 menv env (App op e1 e2) =
  App_i1 op (exp_to_i1 menv env e1) (exp_to_i1 menv env e2)
and
exp_to_i1 menv env (Log lop e1 e2) =
  match lop with
    | And -> If_i1 (exp_to_i1 menv env e1) (exp_to_i1 menv env e2) (Lit_i1 (Bool false))
    | Or -> If_i1 (exp_to_i1 menv env e1) (Lit_i1 (Bool true)) (exp_to_i1 menv env e2)
  end
and
exp_to_i1 menv env (If e1 e2 e3) =
  If_i1 (exp_to_i1 menv env e1) (exp_to_i1 menv env e2) (exp_to_i1 menv env e3)
and
exp_to_i1 menv env (Mat e pes) =
  Mat_i1 (exp_to_i1 menv env e) (pat_exp_to_i1 menv env pes)
and
exp_to_i1 menv env (Let (Just x) e1 e2) =
  Let_i1 (Just x) (exp_to_i1 menv env e1) (exp_to_i1 menv (Map.delete x env) e2)
and
exp_to_i1 menv env (Let Nothing e1 e2) =
  Let_i1 Nothing (exp_to_i1 menv env e1) (exp_to_i1 menv env e2)
and
exp_to_i1 menv env (Letrec funs e) =
  let fun_names = List.map (fun (f,x,e) -> f) funs in
    Letrec_i1 (funs_to_i1 menv (List.foldr Map.delete env fun_names) funs) 
              (exp_to_i1 menv (List.foldr Map.delete env fun_names) e)
and
exps_to_i1 menv env [] = []
and
exps_to_i1 menv env (e::es) =
  exp_to_i1 menv env e :: exps_to_i1 menv env es
and
pat_exp_to_i1 menv env [] = []
and
pat_exp_to_i1 menv env ((p,e)::pes) =
  (p, exp_to_i1 menv (List.foldr Map.delete env (pat_bindings p [])) e) ::
  pat_exp_to_i1 menv env pes
and
funs_to_i1 menv env [] = []
and
funs_to_i1 menv env ((f,x,e)::funs) =
  (f,x,exp_to_i1 menv (Map.delete x env) e) :: funs_to_i1 menv env funs

val alloc_defs : nat -> list varN -> list (varN * nat)
let rec alloc_defs next [] = [] 
and alloc_defs next (x::xs) =
  (x,next) :: alloc_defs (next + 1) xs

declare termination_argument alloc_defs = automatic

val dec_to_i1 : nat -> maybe modN -> map modN (map varN nat) -> map varN nat -> dec -> nat * env varN nat * dec_i1
let dec_to_i1 next mn menv env d =
  match d with
    | Dlet p e ->
        let e' = exp_to_i1 menv env e in
        let xs = List.reverse (pat_bindings p []) in
        let l = List.length xs in
          (next + l, 
           alloc_defs next xs,
           Dlet_i1 l (Mat_i1 e' [(p, Con_i1 Nothing (List.map Var_local_i1 xs))]))
    | Dletrec funs ->
        let fun_names = List.reverse (List.map (fun (f,x,e) -> f) funs) in
        let env' = alloc_defs next fun_names in
          (next + List.length fun_names,
           env',
           Dletrec_i1 (funs_to_i1 menv (List.foldl (fun env (k,v) -> Map.insert k v env) env env') (List.reverse funs)))
    | Dtype type_def ->
        (next, [], Dtype_i1 mn type_def)
    | Dexn cn ts ->
        (next, [], Dexn_i1 mn cn ts)
  end

val decs_to_i1 : nat -> maybe modN -> map modN (map varN nat) -> map varN nat -> list dec -> nat * env varN nat * list dec_i1
let rec 
decs_to_i1 next mn menv env [] = (next, emp, [])
and
decs_to_i1 next mn menv env (d::ds) =
  let (next1, new_env1, d') = dec_to_i1 next mn menv env d in
  let (next2, new_env2, ds') = 
    decs_to_i1 next1 mn menv (List.foldl (fun env (k,v) -> Map.insert k v env) env new_env1) ds 
  in
    (next2, new_env1 ++ new_env2, d'::ds')

val top_to_i1 : nat -> map modN (map varN nat) -> map varN nat -> top -> nat * map modN (map varN nat) * map varN nat * prompt_i1
let top_to_i1 next menv env top =
  match top with
    | Tdec d ->
        let (next', new_env, d') = dec_to_i1 next Nothing menv env d in
          (next', menv, List.foldl (fun env (k,v) -> Map.insert k v env) env new_env, Prompt_i1 Nothing [d'])
    | Tmod mn specs ds ->
        let (next', new_env, ds') = decs_to_i1 next (Just mn) menv env ds in
          (next', Map.insert mn (List.foldl (fun env (k,v) -> Map.insert k v env) Map.empty new_env) menv, env, Prompt_i1 (Just mn) ds')
  end

val prog_to_i1 : nat -> map modN (map varN nat) -> map varN nat -> list top -> nat * map modN (map varN nat) * map varN nat * list prompt_i1
let rec 
prog_to_i1 next menv env [] = (next, menv, env, [])
and 
prog_to_i1 next menv env (p::ps) = 
  let (next', menv', env',p') = top_to_i1 next menv env p in
  let (next'', menv'', env'',ps') = prog_to_i1 next' menv' env' ps in
    (next'',menv'',env'',p'::ps')

declare termination_argument prog_to_i1 = automatic

type all_env_i1 = (list (maybe v_i1) * envC * env varN v_i1)

let all_env_i1_to_genv (genv,cenv,env) = genv
let all_env_i1_to_cenv (genv,cenv,env) = cenv
let all_env_i1_to_env (genv,cenv,env) = env
          
val build_conv_i1 : envC -> maybe (id conN) -> list v_i1 -> maybe v_i1
let build_conv_i1 envC cn vs =
  match cn with
    | Nothing -> 
        Just (Conv_i1 Nothing vs)
    | Just id -> 
        match lookup_con_id id envC with
          | Nothing -> Nothing
          | Just (len,t) -> Just (Conv_i1 (Just (id_to_n id, t)) vs)
        end
  end

val do_uapp_i1 : store v_i1 -> uop -> v_i1 -> maybe (store v_i1 * v_i1)
let do_uapp_i1 s uop v =
  match uop with
    | Opderef ->
        match v with
          | Loc_i1 n ->
              match store_lookup n s with
                | Just v -> Just (s,v)
                | Nothing -> Nothing
              end
          | _ -> Nothing
        end
    | Opref ->
        let (s',n) = store_alloc v s in
          Just (s', Loc_i1 n)
  end

val build_rec_env_i1 : list (varN * varN * exp_i1) -> (envC * env varN v_i1) -> env varN v_i1 -> env varN v_i1
let build_rec_env_i1 funs cl_env add_to_env =
  foldr 
    (fun (f,x,e) env' -> bind f (Recclosure_i1 cl_env funs f) env') 
    add_to_env 
    funs

val do_eq_i1 : v_i1 -> v_i1 -> eq_result
let rec 
do_eq_i1 (Litv_i1 l1) (Litv_i1 l2) = 
  Eq_val (l1 = l2)
and
do_eq_i1 (Loc_i1 l1) (Loc_i1 l2) = Eq_val (l1 = l2)
and
do_eq_i1 (Conv_i1 cn1 vs1) (Conv_i1 cn2 vs2) =
  if cn1 = cn2 && (List.length vs1 = List.length vs2) then
    do_eq_list_i1 vs1 vs2
  else
    Eq_val false
and
do_eq_i1 (Closure_i1 _ _ _) (Closure_i1 _ _ _) = Eq_closure
and
do_eq_i1 (Closure_i1 _ _ _) (Recclosure_i1 _ _ _) = Eq_closure
and
do_eq_i1 (Recclosure_i1 _ _ _) (Closure_i1 _ _ _) = Eq_closure
and
do_eq_i1 (Recclosure_i1 _ _ _) (Recclosure_i1 _ _ _) = Eq_closure
and
do_eq_i1 _ _ = Eq_type_error
and
do_eq_list_i1 [] [] = Eq_val true
and
do_eq_list_i1 (v1::vs1) (v2::vs2) = 
  match do_eq_i1 v1 v2 with
    | Eq_closure -> Eq_closure
    | Eq_type_error -> Eq_type_error
    | Eq_val r -> 
        if not r then
          Eq_val false
        else
          do_eq_list_i1 vs1 vs2
  end
and
do_eq_list_i1 _ _ = Eq_val false

val exn_env_i1 : list (maybe v_i1) -> all_env_i1
let exn_env_i1 genv = (genv, (emp, List.map (fun cn -> (cn, (0, TypeExn (Short cn)))) ["Bind"; "Div"; "Eq"]), emp)

val do_app_i1 : all_env_i1 -> store v_i1 -> op -> v_i1 -> v_i1 -> maybe (all_env_i1 * store v_i1 * exp_i1)
let do_app_i1 env' s op v1 v2 =
  match (op, v1, v2) with
    | (Opapp, Closure_i1 (cenv, env) n e, v) ->
        Just ((all_env_i1_to_genv env', cenv, bind n v env), s, e)
    | (Opapp, Recclosure_i1 (cenv, env) funs n, v) ->
        if allDistinct (List.map (fun (f,x,e) -> f) funs) then
          match find_recfun n funs with
            | Just (n,e) -> Just ((all_env_i1_to_genv env', cenv, bind n v (build_rec_env_i1 funs (cenv, env) env)), s, e)
            | Nothing -> Nothing
          end
        else
          Nothing
    | (Opn op, Litv_i1 (IntLit n1), Litv_i1 (IntLit n2)) ->
        if (op = Divide || (op = Modulo)) && (n2 = 0) then
          Just (exn_env_i1 (all_env_i1_to_genv env'), s, Raise_i1 (Con_i1 (Just (Short "Div")) []))
        else
          Just (env', s, Lit_i1 (IntLit (opn_lookup op n1 n2)))
    | (Opb op, Litv_i1 (IntLit n1), Litv_i1 (IntLit n2)) ->
        Just (env', s, Lit_i1 (Bool (opb_lookup op n1 n2)))
    | (Equality, v1, v2) ->
        match do_eq_i1 v1 v2 with
          | Eq_type_error -> Nothing
          | Eq_closure -> Just (exn_env_i1 (all_env_i1_to_genv env'), s, Raise_i1 (Con_i1 (Just (Short "Eq")) []))
          | Eq_val b -> Just (env', s, Lit_i1 (Bool b))
        end
    | (Opassign, (Loc_i1 lnum), v) ->
        match store_assign lnum v s with
        | Just st -> Just (env', st, Lit_i1 Unit)
        | Nothing -> Nothing
        end
    | _ -> Nothing
  end

val do_if_i1 : v_i1 -> exp_i1 -> exp_i1 -> maybe exp_i1
let do_if_i1 v e1 e2 =
  if v = Litv_i1 (Bool true) then
    Just e1
  else if v = Litv_i1 (Bool false) then
    Just e2
  else
    Nothing

val pmatch_i1 : envC -> store v_i1 -> pat -> v_i1 -> env varN v_i1 -> match_result (env varN v_i1)
let rec
pmatch_i1 envC s (Pvar x) v' env = Match (bind x v' env)
and
pmatch_i1 envC s (Plit l) (Litv_i1 l') env =
  if l = l' then
    Match env
  else if lit_same_type l l' then
    No_match
  else
    Match_type_error
and
pmatch_i1 envC s (Pcon (Just n) ps) (Conv_i1 (Just (n', t')) vs) env =
  match lookup_con_id n envC with
    | Just (l, t)->
        if same_tid t t' && List.length ps = l then
          if same_ctor (id_to_n n, t) (n',t') then
            pmatch_list_i1 envC s ps vs env
          else
            No_match
        else
          Match_type_error
    | _ -> Match_type_error
  end
and
pmatch_i1 envC s (Pcon Nothing ps) (Conv_i1 Nothing vs) env =
  if List.length ps = List.length vs then
    pmatch_list_i1 envC s ps vs env
  else
    Match_type_error
and
pmatch_i1 envC s (Pref p) (Loc_i1 lnum) env =
  match store_lookup lnum s with
    | Just v -> pmatch_i1 envC s p v env
    | Nothing -> Match_type_error
  end
and
pmatch_i1 envC _ _ _ env = Match_type_error
and
pmatch_list_i1 envC s [] [] env = Match env
and
pmatch_list_i1 envC s (p::ps) (v::vs) env =
  match pmatch_i1 envC s p v env with
    | No_match -> No_match
    | Match_type_error -> Match_type_error
    | Match env' -> pmatch_list_i1 envC s ps vs env'
  end
and
pmatch_list_i1 envC s _ _ env = Match_type_error

indreln [evaluate_i1 : bool -> all_env_i1 -> count_store v_i1 -> exp_i1 -> count_store v_i1 * result v_i1 v_i1 -> bool]
and [evaluate_list_i1 : bool -> all_env_i1 -> count_store v_i1 -> list exp_i1 -> count_store v_i1 * result (list v_i1) v_i1 -> bool]
and [evaluate_match_i1 : bool -> all_env_i1 -> count_store v_i1 -> v_i1 -> list (pat * exp_i1) -> v_i1 -> count_store v_i1 * result v_i1 v_i1 -> bool]

lit : forall ck env l s.
true
==>
evaluate_i1 ck env s (Lit_i1 l) (s, Rval (Litv_i1 l))

and

raise1 : forall ck env e s1 s2 v.
evaluate_i1 ck s1 env e (s2, Rval v)
==>
evaluate_i1 ck s1 env (Raise_i1 e) (s2, Rerr (Rraise v))

and

raise2 : forall ck env e s1 s2 err.
evaluate_i1 ck s1 env e (s2, Rerr err)
==>
evaluate_i1 ck s1 env (Raise_i1 e) (s2, Rerr err)

and

handle1 : forall ck s1 s2 env e v pes.
evaluate_i1 ck s1 env e (s2, Rval v)
==>
evaluate_i1 ck s1 env (Handle_i1 e pes) (s2, Rval v)

and

handle2 : forall ck s1 s2 env e pes v bv.
evaluate_i1 ck env s1 e (s2, Rerr (Rraise v)) &&
evaluate_match_i1 ck env s2 v pes v bv
==>
evaluate_i1 ck env s1 (Handle_i1 e pes) bv

and

handle3 : forall ck s1 s2 env e pes err.
evaluate_i1 ck env s1 e (s2, Rerr err) &&
(err = Rtimeout_error || (err = Rtype_error))
==>
evaluate_i1 ck env s1 (Handle_i1 e pes) (s2, Rerr err)

and

con1 : forall ck env cn es vs s s' v.
do_con_check (all_env_i1_to_cenv env) cn (List.length es) &&
build_conv_i1 (all_env_i1_to_cenv env) cn vs = Just v &&
evaluate_list_i1 ck env s es (s', Rval vs)
==>
evaluate_i1 ck env s (Con_i1 cn es) (s', Rval v)

and

con2 : forall ck env cn es s.
not (do_con_check (all_env_i1_to_cenv env) cn (List.length es))
==>
evaluate_i1 ck env s (Con_i1 cn es) (s, Rerr Rtype_error)

and

con3 : forall ck env cn es err s s'.
do_con_check (all_env_i1_to_cenv env) cn (List.length es) &&
evaluate_list_i1 ck env s es (s', Rerr err)
==>
evaluate_i1 ck env s (Con_i1 cn es) (s', Rerr err)

and

var1 : forall ck env n v s.
(lookup n (all_env_i1_to_env env) = Just v)
==>
evaluate_i1 ck env s (Var_local_i1 n) (s, Rval v)

and

var2 : forall ck env n s.
(lookup n (all_env_i1_to_env env) = Nothing)
==>
evaluate_i1 ck env s (Var_local_i1 n) (s, Rerr Rtype_error)

and

var3 : forall ck env n v s.
(List.length (all_env_i1_to_genv env) > n) &&
(List_extra.nth (all_env_i1_to_genv env) n = Just v)
==>
evaluate_i1 ck env s (Var_global_i1 n) (s, Rval v)

and

var4 : forall ck env n s.
(List.length (all_env_i1_to_genv env) > n) &&
(List_extra.nth (all_env_i1_to_genv env) n = Nothing)
==>
evaluate_i1 ck env s (Var_global_i1 n) (s, Rerr Rtype_error)

and

var5 : forall ck env n s.
not (List.length (all_env_i1_to_genv env) > n)
==>
evaluate_i1 ck env s (Var_global_i1 n) (s, Rerr Rtype_error)

and

fn : forall ck env n e s.
true
==>
evaluate_i1 ck env s (Fun_i1 n e) (s, Rval (Closure_i1 (all_env_i1_to_cenv env, all_env_i1_to_env env) n e))

and

uapp1 : forall ck env uop e v v' s1 s2 count s3.
evaluate_i1 ck env s1 e ((count,s2), Rval v) &&
(do_uapp_i1 s2 uop v = Just (s3,v'))
==>
evaluate_i1 ck env s1 (Uapp_i1 uop e) ((count,s3), Rval v')

and

uapp2 : forall ck env uop e v s1 s2 count.
evaluate_i1 ck env s1 e ((count,s2), Rval v) &&
(do_uapp_i1 s2 uop v = Nothing)
==>
evaluate_i1 ck env s1 (Uapp_i1 uop e) ((count,s2), Rerr Rtype_error)

and

uapp3 : forall ck env uop e err s s'.
evaluate_i1 ck env s e (s', Rerr err)
==>
evaluate_i1 ck env s (Uapp_i1 uop e) (s', Rerr err)

and

app1 : forall ck env op e1 e2 v1 v2 env' e3 bv s1 s2 s3 count s4.
evaluate_i1 ck env s1 e1 (s2, Rval v1) &&
evaluate_i1 ck env s2 e2 ((count,s3), Rval v2) &&
do_app_i1 env s3 op v1 v2 = Just (env', s4, e3) &&
((ck && (op = Opapp)) --> count <> 0) &&
evaluate_i1 ck env' ((if ck then dec_count op count else count),s4) e3 bv
==>
evaluate_i1 ck env s1 (App_i1 op e1 e2) bv

and

app2 : forall ck env op e1 e2 v1 v2 env' e3 s1 s2 s3 count s4.
evaluate_i1 ck env s1 e1 (s2, Rval v1) &&
evaluate_i1 ck env s2 e2 ((count,s3), Rval v2) &&
do_app_i1 env s3 op v1 v2 = Just (env', s4, e3) &&
count = 0 &&
op = Opapp &&
ck
==>
evaluate_i1 ck env s1 (App_i1 op e1 e2) ((0,s4), Rerr Rtimeout_error)

and

app3 : forall ck env op e1 e2 v1 v2 s1 s2 s3 count.
evaluate_i1 ck env s1 e1 (s2, Rval v1) &&
evaluate_i1 ck env s2 e2 ((count,s3), Rval v2) &&
do_app_i1 env s3 op v1 v2 = Nothing
==>
evaluate_i1 ck env s1 (App_i1 op e1 e2) ((count,s3), Rerr Rtype_error)

and

app4 : forall ck env op e1 e2 v1 err s1 s2 s3.
evaluate_i1 ck env s1 e1 (s2, Rval v1) &&
evaluate_i1 ck env s2 e2 (s3, Rerr err)
==>
evaluate_i1 ck env s1 (App_i1 op e1 e2) (s3, Rerr err)

and

app5 : forall ck env op e1 e2 err s s'.
evaluate_i1 ck env s e1 (s', Rerr err)
==>
evaluate_i1 ck env s (App_i1 op e1 e2) (s', Rerr err)

and

if1 : forall ck env e1 e2 e3 v e' bv s1 s2.
evaluate_i1 ck env s1 e1 (s2, Rval v) &&
do_if_i1 v e2 e3 = Just e' &&
evaluate_i1 ck env s2 e' bv
==>
evaluate_i1 ck env s1 (If_i1 e1 e2 e3) bv

and

if2 : forall ck env e1 e2 e3 v s1 s2.
evaluate_i1 ck env s1 e1 (s2, Rval v) &&
do_if_i1 v e2 e3 = Nothing
==>
evaluate_i1 ck env s1 (If_i1 e1 e2 e3) (s2, Rerr Rtype_error)

and

if3 : forall ck env e1 e2 e3 err s s'.
evaluate_i1 ck env s e1 (s', Rerr err)
==>
evaluate_i1 ck env s (If_i1 e1 e2 e3) (s', Rerr err)

and

mat1 : forall ck env e pes v bv s1 s2.
evaluate_i1 ck env s1 e (s2, Rval v) &&
evaluate_match_i1 ck env s2 v pes (Conv_i1 (Just ("Bind", TypeExn (Short "Bind"))) []) bv
==>
evaluate_i1 ck env s1 (Mat_i1 e pes) bv

and

mat2 : forall ck env e pes err s s'.
evaluate_i1 ck env s e (s', Rerr err)
==>
evaluate_i1 ck env s (Mat_i1 e pes) (s', Rerr err)

and

let1 : forall ck genv cenv env n e1 e2 v bv s1 s2.
evaluate_i1 ck (genv,cenv,env) s1 e1 (s2, Rval v) &&
evaluate_i1 ck (genv,cenv,opt_bind n v env) s2 e2 bv
==>
evaluate_i1 ck (genv,cenv,env) s1 (Let_i1 n e1 e2) bv

and

let2 : forall ck env n e1 e2 err s s'.
evaluate_i1 ck env s e1 (s', Rerr err)
==>
evaluate_i1 ck env s (Let_i1 n e1 e2) (s', Rerr err)

and

letrec1 : forall ck genv cenv env funs e bv s.
List.allDistinct (List.map (fun (x,y,z) -> x) funs) &&
evaluate_i1 ck (genv,cenv,build_rec_env_i1 funs (cenv,env) env) s e bv
==>
evaluate_i1 ck (genv,cenv,env) s (Letrec_i1 funs e) bv

and

letrec2 : forall ck env funs e s.
not (List.allDistinct (List.map (fun (x,y,z) -> x) funs))
==>
evaluate_i1 ck env s (Letrec_i1 funs e) (s, Rerr Rtype_error)

and

empty : forall ck env s.
true
==>
evaluate_list_i1 ck env s [] (s, Rval [])

and

cons1 : forall ck env e es v vs s1 s2 s3.
evaluate_i1 ck env s1 e (s2, Rval v) &&
evaluate_list_i1 ck env s2 es (s3, Rval vs)
==>
evaluate_list_i1 ck env s1 (e::es) (s3, Rval (v::vs))

and

cons2 : forall ck env e es err s s'.
evaluate_i1 ck env s e (s', Rerr err)
==>
evaluate_list_i1 ck env s (e::es) (s', Rerr err)

and

cons3 : forall ck env e es v err s1 s2 s3.
evaluate_i1 ck env s1 e (s2, Rval v) &&
evaluate_list_i1 ck env s2 es (s3, Rerr err)
==>
evaluate_list_i1 ck env s1 (e::es) (s3, Rerr err)

and

mat_empty : forall ck env v err_v s.
true
==>
evaluate_match_i1 ck env s v [] err_v (s, Rerr (Rraise err_v))

and

mat_cons1 : forall ck genv cenv env env' v p pes e bv err_v s count.
List.allDistinct (pat_bindings p []) &&
(pmatch_i1 cenv s p v env = Match env') &&
evaluate_i1 ck (genv,cenv,env') (count,s) e bv
==>
evaluate_match_i1 ck (genv,cenv,env) (count,s) v ((p,e)::pes) err_v bv

and

mat_cons2 : forall ck genv cenv env v p e pes bv s count err_v.
List.allDistinct (pat_bindings p []) &&
(pmatch_i1 cenv s p v env = No_match) &&
evaluate_match_i1 ck (genv,cenv,env) (count,s) v pes err_v bv
==>
evaluate_match_i1 ck (genv,cenv,env) (count,s) v ((p,e)::pes) err_v bv

and

mat_cons3 : forall ck genv cenv env v p e pes s count err_v.
(pmatch_i1 cenv s p v env = Match_type_error)
==>
evaluate_match_i1 ck (genv,cenv,env) (count,s) v ((p,e)::pes) err_v ((count,s), Rerr Rtype_error)

and

mat_cons4 : forall ck env v p e pes s err_v.
not (List.allDistinct (pat_bindings p []))
==>
evaluate_match_i1 ck env s v ((p,e)::pes) err_v (s, Rerr Rtype_error)

indreln [evaluate_dec_i1 : bool -> list (maybe v_i1) -> envC -> count_store v_i1 * set tid_or_exn -> dec_i1 -> (count_store v_i1 * set tid_or_exn) * result (flat_envC * list v_i1)  v_i1 -> bool]

dlet1 : forall ck genv cenv n e vs s1 s2 tdecs.
evaluate_i1 ck (genv,cenv,emp) s1 e (s2, Rval (Conv_i1 Nothing vs)) &&
List.length vs = n
==>
evaluate_dec_i1 ck genv cenv (s1,tdecs) (Dlet_i1 n e) ((s2,tdecs), Rval (emp, vs))

and

dlet3 : forall ck genv cenv n e vs s1 s2 tdecs.
evaluate_i1 ck (genv,cenv,emp) s1 e (s2, Rval (Conv_i1 Nothing vs)) &&
List.length vs <> n
==>
evaluate_dec_i1 ck genv cenv (s1,tdecs) (Dlet_i1 n e) ((s2,tdecs), Rerr Rtype_error)

and

dlet4 : forall ck genv cenv n e v s1 s2 tdecs.
evaluate_i1 ck (genv,cenv,emp) s1 e (s2, Rval v) &&
not (exists vs. v = Conv_i1 Nothing vs)
==>
evaluate_dec_i1 ck genv cenv (s1,tdecs) (Dlet_i1 n e) ((s2,tdecs), Rerr Rtype_error)

and

dlet5 : forall ck genv cenv n e err s s' tdecs.
evaluate_i1 ck (genv,cenv,emp) s e (s', Rerr err)
==>
evaluate_dec_i1 ck genv cenv (s,tdecs) (Dlet_i1 n e) ((s',tdecs), Rerr err)

and

dletrec1 : forall ck genv cenv funs s.
true
==>
evaluate_dec_i1 ck genv cenv s (Dletrec_i1 funs) (s, Rval (emp, List.map (fun (f,x,e) -> Closure_i1 (cenv,[]) x e) funs))

and

dtype1 : forall ck mn genv cenv tds s tdecs new_tdecs.
check_dup_ctors tds &&
new_tdecs = type_defs_to_new_tdecs mn tds &&
disjoint new_tdecs tdecs &&
List.allDistinct (List.map (fun (tvs,tn,ctors) -> tn) tds)
==>
evaluate_dec_i1 ck genv cenv (s,tdecs) (Dtype_i1 mn tds) ((s,new_tdecs union tdecs), Rval (build_tdefs mn tds, []))

and

dtype2 : forall ck mn genv cenv tds s tdecs.
not (check_dup_ctors tds) ||
not (disjoint (type_defs_to_new_tdecs mn tds) tdecs) ||
not (List.allDistinct (List.map (fun (tvs,tn,ctors) -> tn) tds))
==>
evaluate_dec_i1 ck genv cenv (s,tdecs) (Dtype_i1 mn tds) ((s,tdecs), Rerr Rtype_error)

and

dexn1 : forall ck mn genv cenv cn ts s tdecs.
not (TypeExn (mk_id mn cn) IN tdecs)
==>
evaluate_dec_i1 ck genv cenv (s,tdecs) (Dexn_i1 mn cn ts) ((s, {TypeExn (mk_id mn cn)} union tdecs), Rval (bind cn (List.length ts, TypeExn (mk_id mn cn)) emp, []))

and

dexn2 : forall ck mn genv cenv cn ts s tdecs.
TypeExn (mk_id mn cn) IN tdecs
==>
evaluate_dec_i1 ck genv cenv (s,tdecs) (Dexn_i1 mn cn ts) ((s,tdecs), Rerr Rtype_error)

indreln [evaluate_decs_i1 : bool -> list (maybe v_i1) -> envC -> count_store v_i1 * set tid_or_exn -> list dec_i1 -> (count_store v_i1 * set tid_or_exn) * flat_envC * list v_i1 * maybe (error_result v_i1) -> bool]

empty : forall ck genv cenv s.
true
==>
evaluate_decs_i1 ck genv cenv s [] (s, emp, [], Nothing)

and

cons1 : forall ck s1 s2 genv cenv d ds e.
evaluate_dec_i1 ck genv cenv s1 d (s2, Rerr e)
==>
evaluate_decs_i1 ck genv cenv s1 (d::ds) (s2, emp, [], Just e)

and

cons2 : forall ck s1 s2 s3 genv cenv d ds new_tds' new_tds new_env new_env' r.
evaluate_dec_i1 ck genv cenv s1 d (s2, Rval (new_tds,new_env)) &&
evaluate_decs_i1 ck (genv ++ List.map Just new_env) (merge_envC (emp,new_tds) cenv) s2 ds (s3, new_tds', new_env', r)
==>
evaluate_decs_i1 ck genv cenv s1 (d::ds) (s3, merge new_tds' new_tds, new_env ++ new_env', r)

val mod_cenv : maybe modN -> flat_envC -> envC
let mod_cenv mn cenv =
  match mn with
    | Nothing -> ([],cenv)
    | Just mn -> ([(mn,cenv)],[])
  end

val update_mod_state : maybe modN -> set modN -> set modN
let update_mod_state mn mods =
  match mn with
    | Nothing -> mods
    | Just mn -> {mn} union mods
  end

let rec
dec_to_dummy_env (Dlet_i1 n e) = n
and
dec_to_dummy_env (Dletrec_i1 funs) = List.length funs
and
dec_to_dummy_env _ = 0 

let rec
decs_to_dummy_env [] = 0
and
decs_to_dummy_env (d::ds) = decs_to_dummy_env ds + dec_to_dummy_env d

declare termination_argument decs_to_dummy_env = automatic

val decs_to_types_i1 : list dec_i1 -> list typeN
let decs_to_types_i1 ds =
   List.concat (List.map (fun d -> 
        match d with 
          | Dtype_i1 mn tds -> List.map (fun (tvs,tn,ctors) -> tn) tds
          | _ -> [] end)
     ds)

val no_dup_types_i1 : list dec_i1 -> bool
let no_dup_types_i1 ds =
  List.allDistinct (decs_to_types_i1 ds)

val prompt_mods_ok : maybe modN -> list dec_i1 -> bool
let prompt_mods_ok mn ds =
  (match mn with
     | Nothing -> List.length ds < 2
     | Just mn -> true
   end)
  &&
  (List.all (fun d ->
      match d with
        | Dtype_i1 mn' _ -> mn' = mn
        | Dexn_i1 mn' _ _ -> mn' = mn
        | _ -> true
      end)
    ds)

indreln [evaluate_prompt_i1 : bool -> list (maybe v_i1) -> envC -> count_store v_i1 * set tid_or_exn * set modN -> prompt_i1 -> (count_store v_i1 * set tid_or_exn * set modN) * envC * list (maybe v_i1) * maybe (error_result v_i1) -> bool]

prompt_val : forall ck genv cenv s1 tdecs1 mods ds s2 tdecs2 cenv' env mn.
(forall name. mn = Just name --> not (name IN mods)) &&
no_dup_types_i1 ds &&
prompt_mods_ok mn ds &&
evaluate_decs_i1 ck genv cenv (s1,tdecs1) ds ((s2,tdecs2),cenv',env,Nothing)
==>
evaluate_prompt_i1 ck genv cenv (s1,tdecs1,mods) (Prompt_i1 mn ds) ((s2,tdecs2,update_mod_state mn mods), mod_cenv mn cenv', List.map Just env, Nothing)

and

prompt_err1 : forall ck genv cenv s1 tdecs1 mods mn ds s2 tdecs2 cenv' env err.
(forall name. mn = Just name --> not (name IN mods)) &&
no_dup_types_i1 ds &&
evaluate_decs_i1 ck genv cenv (s1,tdecs1) ds ((s2,tdecs2),cenv',env,Just err)
==>
evaluate_prompt_i1 ck genv cenv (s1,tdecs1,mods) (Prompt_i1 mn ds) 
                                                  ((s2,tdecs2,update_mod_state mn mods),
                                                   mod_cenv mn cenv', 
                                                   List.map Just env ++ List.genlist (fun _ -> Nothing) (decs_to_dummy_env ds - List.length env),
                                                   Just err)

and

prompt_err2 : forall ck genv cenv s1 tdecs1 mods mn ds.
(not (no_dup_types_i1 ds) || not (prompt_mods_ok mn ds))
==>
evaluate_prompt_i1 ck genv cenv (s1,tdecs1,mods) (Prompt_i1 mn ds) ((s1,tdecs1,mods), ([],[]), [], Just Rtype_error)

and

prompt_err3 : forall ck genv cenv s1 tdecs1 mods mn ds.
(exists name. mn = Just name && name IN mods)
==>
evaluate_prompt_i1 ck genv cenv (s1,tdecs1,mods) (Prompt_i1 mn ds) ((s1,tdecs1,mods), ([],[]), [], Just Rtype_error)

indreln [evaluate_prog_i1 : bool -> list (maybe v_i1) -> envC -> count_store v_i1 * set tid_or_exn * set modN -> list prompt_i1 -> (count_store v_i1 * set tid_or_exn * set modN) * envC * list (maybe v_i1) * maybe (error_result v_i1) -> bool]

prog_empty : forall ck genv cenv s.
true
==>
evaluate_prog_i1 ck genv cenv s [] (s, ([],[]), [], Nothing)

and

prog_cons_var : forall ck genv cenv s1 prompt prompts s2 cenv2 env2 s3 cenv3 env3 r.
evaluate_prompt_i1 ck genv cenv s1 prompt (s2, cenv2, env2, Nothing) &&
evaluate_prog_i1 ck (genv++env2) (merge_envC cenv2 cenv) s2 prompts (s3, cenv3, env3, r)
==>
evaluate_prog_i1 ck genv cenv s1 (prompt::prompts) (s3, merge_envC cenv3 cenv2, env2++env3, r)

and

prog_cons_err : forall ck genv cenv s1 prompt prompts s2 cenv2 env2 err.
evaluate_prompt_i1 ck genv cenv s1 prompt (s2, cenv2, env2, Just err)
==>
evaluate_prog_i1 ck genv cenv s1 (prompt::prompts) (s2, cenv2, env2, Just err)

val no_dup_mods_i1 : list prompt_i1 -> bool
let no_dup_mods_i1 prompts =
  List.allDistinct (List.concat (List.map (fun prompt -> 
        match prompt with 
          | Prompt_i1 (Just mn) ds -> [mn]
          | _ -> [] end)
     prompts))
 
val no_dup_top_types_i1 : list prompt_i1 -> bool
let no_dup_top_types_i1 prompts =
  List.allDistinct (List.concat (List.map (fun prompt -> 
        match prompt with 
          | Prompt_i1 Nothing ds -> decs_to_types_i1 ds
          | _ -> [] end)
     prompts))

val evaluate_whole_prog_i1 : bool -> list (maybe v_i1) -> envC -> count_store v_i1 * set tid_or_exn * set modN -> list prompt_i1 -> (count_store v_i1 * set tid_or_exn * set modN) * envC * list (maybe v_i1) * maybe (error_result v_i1) -> bool
let evaluate_whole_prog_i1 ck genv cenv s1 prompts (s2, cenv2, env2, res) =
  if no_dup_mods_i1 prompts && no_dup_top_types_i1 prompts then
    evaluate_prog_i1 ck genv cenv s1 prompts (s2, cenv2, env2, res)
  else
    res = Just Rtype_error 
