(* Adds a default case to non-exhaustive patterns. Follows decLang.
 *
 * The AST of exhLang differs from decLang by removing the type annotation from
 * constructors.
 *
 * The values of exhLang differ from decLang in the same way as the
 * expressions.
 *
 * The semantics of exhLang differ in that pattern matches that fall off the end
 * raise a type error, and the mapping from types to constructor tags is
 * ommitted.
 *
 * The translation only detects the following patterns:
 *   - A single variable, (), or ref variable
 *   - A list of patterns, each of which is a constructor applied to variables.
 *
 *)

open import Pervasives
open import Lib
open import Ast
open import SemanticPrimitives
open import List_extra
open import BigStep
open import ConLang
open import DecLang
open import CompilerLib

type pat_exh =
  | Pvar_exh of varN
  | Plit_exh of lit
  | Pcon_exh of nat * list pat_exh
  | Pref_exh of pat_exh

type exp_exh =
  | Raise_exh of exp_exh
  | Handle_exh of exp_exh * list (pat_exh * exp_exh)
  | Lit_exh of lit
  | Con_exh of nat * list exp_exh
  | Var_local_exh of varN
  | Var_global_exh of nat
  | Fun_exh of varN * exp_exh
  | App_exh of op_i2 * list exp_exh
  | If_exh of exp_exh * exp_exh * exp_exh
  | Mat_exh of exp_exh * list (pat_exh * exp_exh)
  | Let_exh of maybe varN * exp_exh * exp_exh
  | Letrec_exh of list (varN * varN * exp_exh) * exp_exh
  | Extend_global_exh of nat

type v_exh =
  | Litv_exh of lit
  | Conv_exh of nat * list v_exh 
  | Closure_exh of env varN v_exh * varN * exp_exh
  | Recclosure_exh of env varN v_exh * list (varN * varN * exp_exh) * varN
  | Loc_exh of nat

val is_var : pat_i2 -> bool
let is_var p =
  match p with
    | Pvar_i2 _ -> true
    | _ -> false
  end

val get_tags : list pat_i2 -> maybe (list nat)
let rec get_tags [] = Just []
and get_tags (p::ps) =
  match p with
    | Pcon_i2 (tag,t) ps' ->
        if List.all is_var ps' then
          match get_tags ps with
            | Nothing -> Nothing
            | Just tags -> Just (tag::tags)
          end
        else
          Nothing
    | _ -> Nothing
  end

declare termination_argument get_tags = automatic

val exhaustive_match : exh_ctors_env -> list pat_i2 -> bool
let exhaustive_match exh ps =
  match ps with
    | [] -> false
    | [Pvar_i2 _] -> true
    | [Pref_i2 (Pvar_i2 _)] -> true
    | [Plit_i2 Unit] -> true
    | [Pcon_i2 (tag,Nothing) ps] -> List.all is_var ps
    | Pcon_i2 (tag,Just (TypeId t)) ps'::ps ->
        if List.all is_var ps' then
          match get_tags ps with
            | Nothing -> false
            | Just tags ->
                match Map.lookup t exh with
                  | Nothing -> false
                  | Just tags' ->
                    nat_set_from_list tags = tags'
                end
          end
        else
          false
    | _ -> false
  end


val add_default : bool -> bool -> list (pat_i2 * exp_i2) -> list (pat_i2 * exp_i2)
let add_default is_handle is_exh pes =
  if is_exh then
    pes
  else if is_handle then
    pes ++ [(Pvar_i2 "x", Raise_i2 (Var_local_i2 "x"))]
  else
    pes ++ [(Pvar_i2 "x", Raise_i2 (Con_i2 (bind_tag, Just (TypeId (Short "option"))) []))]

val pat_to_exh : pat_i2 -> pat_exh
let rec
pat_to_exh (Pvar_i2 x) = Pvar_exh x
and 
pat_to_exh (Plit_i2 l) = Plit_exh l
and 
pat_to_exh (Pcon_i2 (tag,t) ps) = 
  Pcon_exh tag (List.map pat_to_exh ps)
and 
pat_to_exh (Pref_i2 p) = Pref_exh (pat_to_exh p)

val exp_to_exh : exh_ctors_env -> exp_i2 -> exp_exh
val exps_to_exh : exh_ctors_env -> list exp_i2 -> list exp_exh
val pat_exp_to_exh : exh_ctors_env -> list (pat_i2 * exp_i2) -> list (pat_exh * exp_exh)
val funs_to_exh : exh_ctors_env -> list (varN * varN * exp_i2) -> list (varN * varN * exp_exh)
let rec 
exp_to_exh exh (Raise_i2 e) = 
  Raise_exh (exp_to_exh exh e)
and
exp_to_exh exh (Handle_i2 e pes) = 
  Handle_exh (exp_to_exh exh e) (pat_exp_to_exh exh (add_default true (exhaustive_match exh (List.map fst pes)) pes))
and
exp_to_exh exh (Lit_i2 l) = 
  Lit_exh l 
and
exp_to_exh exh (Con_i2 t es) = 
  Con_exh (fst t) (exps_to_exh exh es)
and
exp_to_exh exh (Var_local_i2 x) = Var_local_exh x
and
exp_to_exh exh (Var_global_i2 x) = Var_global_exh x
and
exp_to_exh exh (Fun_i2 x e) =
  Fun_exh x (exp_to_exh exh e) 
and
exp_to_exh exh (App_i2 op es) =
  App_exh op (exps_to_exh exh es)
and
exp_to_exh exh (If_i2 e1 e2 e3) =
  If_exh (exp_to_exh exh e1) (exp_to_exh exh e2) (exp_to_exh exh e3)
and
exp_to_exh exh (Mat_i2 e pes) =
  Mat_exh (exp_to_exh exh e) (pat_exp_to_exh exh (add_default false (exhaustive_match exh (List.map fst pes)) pes))
and
exp_to_exh exh (Let_i2 x e1 e2) =
  Let_exh x (exp_to_exh exh e1) (exp_to_exh exh e2)
and
exp_to_exh exh (Letrec_i2 funs e) =
  Letrec_exh (funs_to_exh exh funs) 
            (exp_to_exh exh e)
and
exp_to_exh exh (Extend_global_i2 n) =
  Extend_global_exh n
and
exps_to_exh exh [] = []
and
exps_to_exh exh (e::es) =
  exp_to_exh exh e :: exps_to_exh exh es
and
pat_exp_to_exh exh [] = []
and
pat_exp_to_exh exh ((p,e)::pes) =
  (pat_to_exh p, exp_to_exh exh e) :: pat_exp_to_exh exh pes
and
funs_to_exh exh [] = []
and
funs_to_exh exh ((f,x,e)::funs) =
  (f,x,exp_to_exh exh e) :: funs_to_exh exh funs

val pat_bindings_exh : pat_exh -> list varN -> list varN
let rec
pat_bindings_exh (Pvar_exh n) already_bound =
  n::already_bound
and
pat_bindings_exh (Plit_exh l) already_bound =
  already_bound
and
pat_bindings_exh (Pcon_exh _ ps) already_bound =
  pats_bindings_exh ps already_bound
and
pat_bindings_exh (Pref_exh p) already_bound =
  pat_bindings_exh p already_bound
and
pats_bindings_exh [] already_bound =
  already_bound
and
pats_bindings_exh (p::ps) already_bound =
  pats_bindings_exh ps (pat_bindings_exh p already_bound)

val pmatch_exh : store v_exh -> pat_exh -> v_exh -> env varN v_exh -> match_result (env varN v_exh)
let rec
pmatch_exh s (Pvar_exh x) v' env = Match (bind x v' env)
and
pmatch_exh s (Plit_exh l) (Litv_exh l') env =
  if l = l' then
    Match env
  else if lit_same_type l l' then
    No_match
  else
    Match_type_error
and
pmatch_exh s (Pcon_exh n ps) (Conv_exh n' vs) env =
  if n = n' then
    if List.length ps = List.length vs then
      pmatch_list_exh s ps vs env
    else
      Match_type_error
  else
    No_match
and
pmatch_exh s (Pref_exh p) (Loc_exh lnum) env =
  match store_lookup lnum s with
    | Just (Refv v) -> pmatch_exh s p v env
    | _ -> Match_type_error
  end
and
pmatch_exh _ _ _ env = Match_type_error
and
pmatch_list_exh s [] [] env = Match env
and
pmatch_list_exh s (p::ps) (v::vs) env =
  match pmatch_exh s p v env with
    | No_match -> No_match
    | Match_type_error -> Match_type_error
    | Match env' -> pmatch_list_exh s ps vs env'
  end
and
pmatch_list_exh s _ _ env = Match_type_error

val build_rec_env_exh : list (varN * varN * exp_exh) -> env varN v_exh -> env varN v_exh -> env varN v_exh
let build_rec_env_exh funs cl_env add_to_env =
  foldr 
    (fun (f,x,e) env' -> bind f (Recclosure_exh cl_env funs f) env') 
    add_to_env 
    funs

val do_eq_exh : v_exh -> v_exh -> eq_result
let rec
do_eq_exh (Litv_exh l1) (Litv_exh l2) =
  if lit_same_type l1 l2 then Eq_val (l1 = l2)
  else Eq_type_error
and
do_eq_exh (Loc_exh l1) (Loc_exh l2) = Eq_val (l1 = l2)
and
do_eq_exh (Conv_exh tag1 vs1) (Conv_exh tag2 vs2) =
  if tag1 = tag2 && (List.length vs1 = List.length vs2) then
    do_eq_list_exh vs1 vs2
  else
    Eq_val false
and
do_eq_exh (Closure_exh _ _ _) (Closure_exh _ _ _) = Eq_closure
and
do_eq_exh (Closure_exh _ _ _) (Recclosure_exh _ _ _) = Eq_closure
and
do_eq_exh (Recclosure_exh _ _ _) (Closure_exh _ _ _) = Eq_closure
and
do_eq_exh (Recclosure_exh _ _ _) (Recclosure_exh _ _ _) = Eq_closure
and
do_eq_exh _ _ = Eq_type_error
and
do_eq_list_exh [] [] = Eq_val true
and
do_eq_list_exh (v1::vs1) (v2::vs2) = 
  match do_eq_exh v1 v2 with
    | Eq_closure -> Eq_closure
    | Eq_type_error -> Eq_type_error
    | Eq_val r -> 
        if not r then
          Eq_val false
        else
          do_eq_list_exh vs1 vs2
  end
and
do_eq_list_exh _ _ = Eq_val false

val do_opapp_exh : list v_exh -> maybe (env varN v_exh * exp_exh)
let do_opapp_exh vs =
  match vs with
    | [Closure_exh env n e; v] ->
        Just (bind n v env, e)
    | [Recclosure_exh env funs n; v] ->
        if allDistinct (List.map (fun (f,x,e) -> f) funs) then
          match find_recfun n funs with
            | Just (n,e) -> Just (bind n v (build_rec_env_exh funs env env), e)
            | Nothing -> Nothing
          end
        else
          Nothing
    | _ -> Nothing
  end

val prim_exn_exh : nat -> v_exh
let prim_exn_exh tag = Conv_exh tag []

val do_app_exh : count_store_genv v_exh -> op_i2 -> list v_exh -> maybe (count_store_genv v_exh * result v_exh v_exh)
let do_app_exh ((count,s),genv) op vs =
  match (op, vs) with
    | (Op_i2 (Opn op), [Litv_exh (IntLit n1); Litv_exh (IntLit n2)]) ->
        if (op = Divide || (op = Modulo)) && (n2 = 0) then
          Just (((count,s),genv), Rerr (Rraise (prim_exn_exh div_tag)))
        else
          Just (((count,s),genv), Rval (Litv_exh (IntLit (opn_lookup op n1 n2))))
    | (Op_i2 (Opb op), [Litv_exh (IntLit n1); Litv_exh (IntLit n2)]) ->
        Just (((count,s),genv), Rval (Litv_exh (Bool (opb_lookup op n1 n2))))
    | (Op_i2 Equality, [v1; v2]) ->
        match do_eq_exh v1 v2 with
          | Eq_type_error -> Nothing
          | Eq_closure -> Just (((count,s),genv), Rerr (Rraise (prim_exn_exh eq_tag)))
          | Eq_val b -> Just (((count,s),genv), Rval (Litv_exh (Bool b)))
        end
    | (Op_i2 Opassign, [Loc_exh lnum; v]) ->
        match store_assign lnum (Refv v) s with
          | Just st -> Just (((count,st),genv), Rval (Litv_exh Unit))
          | Nothing -> Nothing
        end
    | (Op_i2 Opref, [v]) ->
        let (s',n) = store_alloc (Refv v) s in
          Just (((count,s'),genv), Rval (Loc_exh n))
    | (Op_i2 Opderef, [Loc_exh n]) ->
        match store_lookup n s with
          | Just (Refv v) -> Just (((count,s),genv),Rval v)
          | _ -> Nothing
        end
    | (Init_global_var_i2 idx, [v]) ->
        if idx < List.length genv then
          match List_extra.nth genv idx with
            | Nothing -> Just (((count,s), List.update genv idx (Just v)), (Rval (Litv_exh Unit)))
            | Just x -> Nothing
          end
        else
          Nothing
    | (Op_i2 Aalloc, [Litv_exh (IntLit n); Litv_exh (Word8 w)]) ->
        if n < 0 then
          Just (((count,s),genv), Rerr (Rraise (prim_exn_exh subscript_tag)))
        else
          let (s',lnum) =
            store_alloc (W8array (List.replicate (natFromInteger n) w)) s
          in 
            Just (((count,s'),genv), Rval (Loc_exh lnum))
    | (Op_i2 Asub, [Loc_exh lnum; Litv_exh (IntLit i)]) ->
        match store_lookup lnum s with
          | Just (W8array ws) ->
              if i < 0 then
                Just (((count,s),genv), Rerr (Rraise (prim_exn_exh subscript_tag)))
              else
                let n = natFromInteger i in
                  if n >= List.length ws then
                    Just (((count,s),genv), Rerr (Rraise (prim_exn_exh subscript_tag)))
                  else 
                    Just (((count,s),genv), Rval (Litv_exh (Word8 (List_extra.nth ws n))))
          | _ -> Nothing
        end
    | (Op_i2 Alength, [Loc_exh n]) ->
        match store_lookup n s with
          | Just (W8array ws) ->
              Just (((count,s),genv),Rval (Litv_exh(IntLit(integerFromNat(List.length ws)))))
          | _ -> Nothing
         end
    | (Op_i2 Aupdate, [Loc_exh lnum; Litv_exh(IntLit i); Litv_exh(Word8 w)]) ->
        match store_lookup lnum s with
        | Just (W8array ws) ->
            if i < 0 then
              Just (((count,s),genv), Rerr (Rraise (prim_exn_exh subscript_tag)))
            else 
              let n = natFromInteger i in
                if n >= List.length ws then
                  Just (((count,s),genv), Rerr (Rraise (prim_exn_exh subscript_tag)))
                else
                  match store_assign lnum (W8array (List.update ws n w)) s with
                    | Nothing -> Nothing
                    | Just s' -> Just (((count,s'),genv), Rval (Litv_exh Unit))
                  end
        | _ -> Nothing
      end
    | _ -> Nothing
  end

val do_if_exh : v_exh -> exp_exh -> exp_exh -> maybe exp_exh
let do_if_exh v e1 e2 =
  if v = Litv_exh (Bool true) then
    Just e1
  else if v = Litv_exh (Bool false) then
    Just e2
  else
    Nothing

indreln [evaluate_exh : bool -> env varN v_exh -> count_store_genv v_exh -> exp_exh -> count_store_genv v_exh * result v_exh v_exh -> bool]
and [evaluate_list_exh : bool -> env varN v_exh -> count_store_genv v_exh -> list exp_exh -> count_store_genv v_exh * result (list v_exh) v_exh -> bool]
and [evaluate_match_exh : bool -> env varN v_exh -> count_store_genv v_exh -> v_exh -> list (pat_exh * exp_exh) -> count_store_genv v_exh * result v_exh v_exh -> bool]

lit : forall ck env l s.
true
==>
evaluate_exh ck env s (Lit_exh l) (s, Rval (Litv_exh l))

and

raise1 : forall ck env e s1 s2 v.
evaluate_exh ck s1 env e (s2, Rval v)
==>
evaluate_exh ck s1 env (Raise_exh e) (s2, Rerr (Rraise v))

and

raise2 : forall ck env e s1 s2 err.
evaluate_exh ck s1 env e (s2, Rerr err)
==>
evaluate_exh ck s1 env (Raise_exh e) (s2, Rerr err)

and

handle1 : forall ck s1 s2 env e v pes.
evaluate_exh ck s1 env e (s2, Rval v)
==>
evaluate_exh ck s1 env (Handle_exh e pes) (s2, Rval v)

and

handle2 : forall ck s1 s2 env e pes v bv.
evaluate_exh ck env s1 e (s2, Rerr (Rraise v)) &&
evaluate_match_exh ck env s2 v pes bv
==>
evaluate_exh ck env s1 (Handle_exh e pes) bv

and

handle3 : forall ck s1 s2 env e pes err.
evaluate_exh ck env s1 e (s2, Rerr err) &&
(err = Rtimeout_error || (err = Rtype_error))
==>
evaluate_exh ck env s1 (Handle_exh e pes) (s2, Rerr err)

and

con1 : forall ck env tag es vs s s'.
evaluate_list_exh ck env s es (s', Rval vs)
==>
evaluate_exh ck env s (Con_exh tag es) (s', Rval (Conv_exh tag vs))

and

con3 : forall ck env tag es err s s'.
evaluate_list_exh ck env s es (s', Rerr err)
==>
evaluate_exh ck env s (Con_exh tag es) (s', Rerr err)

and

var1 : forall ck env n v s.
(lookup n env = Just v)
==>
evaluate_exh ck env s (Var_local_exh n) (s, Rval v)

and

var2 : forall ck env n s.
(lookup n env = Nothing)
==>
evaluate_exh ck env s (Var_local_exh n) (s, Rerr Rtype_error)

and

var3 : forall ck env n v s genv.
(List.length genv > n) &&
(List_extra.nth genv n = Just v)
==>
evaluate_exh ck env (s,genv) (Var_global_exh n) ((s,genv), Rval v)

and

var4 : forall ck env n s genv.
(List.length genv > n) &&
(List_extra.nth genv n = Nothing)
==>
evaluate_exh ck env (s,genv) (Var_global_exh n) ((s,genv), Rerr Rtype_error)

and

var5 : forall ck env n s genv.
not (List.length genv > n)
==>
evaluate_exh ck env (s,genv) (Var_global_exh n) ((s,genv), Rerr Rtype_error)

and

fn : forall ck env n e s.
true
==>
evaluate_exh ck env s (Fun_exh n e) (s, Rval (Closure_exh env n e))

and

app1 : forall ck genv env es vs env' e bv s1 s2 count genv'.
evaluate_list_exh ck env (s1,genv) es (((count,s2),genv'), Rval vs) &&
do_opapp_exh vs = Just (env', e) &&
(ck --> count <> 0) &&
evaluate_exh ck env' (((if ck then count-1 else count),s2),genv') e bv
==>
evaluate_exh ck env (s1,genv) (App_exh (Op_i2 Opapp) es) bv

and

app2 : forall ck env es vs env' e s1 s2 count genv.
evaluate_list_exh ck env s1 es (((count,s2), genv), Rval vs) &&
do_opapp_exh vs = Just (env', e) &&
count = 0 &&
ck
==>
evaluate_exh ck env s1 (App_exh (Op_i2 Opapp) es) (((0,s2),genv), Rerr Rtimeout_error)

and

app3 : forall ck env es vs s1 s2.
evaluate_list_exh ck env s1 es (s2, Rval vs) &&
do_opapp_exh vs = Nothing
==>
evaluate_exh ck env s1 (App_exh (Op_i2 Opapp) es) (s2, Rerr Rtype_error)

and

app4 : forall ck env s1 op es s2 vs s3 res.
evaluate_list_exh ck env s1 es (s2, Rval vs) &&
do_app_exh s2 op vs = Just (s3, res) &&
op <> Op_i2 Opapp
==>
evaluate_exh ck env s1 (App_exh op es) (s3, res)

and

app5 : forall ck env s1 op es s2 vs.
evaluate_list_exh ck env s1 es (s2, Rval vs) &&
do_app_exh s2 op vs = Nothing &&
op <> Op_i2 Opapp
==>
evaluate_exh ck env s1 (App_exh op es) (s2, Rerr Rtype_error)

and

app6 : forall ck env s1 op es s2 err.
evaluate_list_exh ck env s1 es (s2, Rerr err)
==>
evaluate_exh ck env s1 (App_exh op es) (s2, Rerr err)

and

if1 : forall ck env e1 e2 e3 v e' bv s1 s2.
evaluate_exh ck env s1 e1 (s2, Rval v) &&
do_if_exh v e2 e3 = Just e' &&
evaluate_exh ck env s2 e' bv
==>
evaluate_exh ck env s1 (If_exh e1 e2 e3) bv

and

if2 : forall ck env e1 e2 e3 v s1 s2.
evaluate_exh ck env s1 e1 (s2, Rval v) &&
do_if_exh v e2 e3 = Nothing
==>
evaluate_exh ck env s1 (If_exh e1 e2 e3) (s2, Rerr Rtype_error)

and

if3 : forall ck env e1 e2 e3 err s s'.
evaluate_exh ck env s e1 (s', Rerr err)
==>
evaluate_exh ck env s (If_exh e1 e2 e3) (s', Rerr err)

and

mat1 : forall ck env e pes v bv s1 s2.
evaluate_exh ck env s1 e (s2, Rval v) &&
evaluate_match_exh ck env s2 v pes bv
==>
evaluate_exh ck env s1 (Mat_exh e pes) bv

and

mat2 : forall ck env e pes err s s'.
evaluate_exh ck env s e (s', Rerr err)
==>
evaluate_exh ck env s (Mat_exh e pes) (s', Rerr err)

and

let1 : forall ck env n e1 e2 v bv s1 s2.
evaluate_exh ck env s1 e1 (s2, Rval v) &&
evaluate_exh ck (opt_bind n v env) s2 e2 bv
==>
evaluate_exh ck env s1 (Let_exh n e1 e2) bv

and

let2 : forall ck env n e1 e2 err s s'.
evaluate_exh ck env s e1 (s', Rerr err)
==>
evaluate_exh ck env s (Let_exh n e1 e2) (s', Rerr err)

and

letrec1 : forall ck env funs e bv s.
List.allDistinct (List.map (fun (x,y,z) -> x) funs) &&
evaluate_exh ck (build_rec_env_exh funs env env) s e bv
==>
evaluate_exh ck env s (Letrec_exh funs e) bv

and

letrec2 : forall ck env funs e s.
not (List.allDistinct (List.map (fun (x,y,z) -> x) funs))
==>
evaluate_exh ck env s (Letrec_exh funs e) (s, Rerr Rtype_error)

and

extend : forall ck env n s genv.
true
==>
evaluate_exh ck env (s,genv) (Extend_global_exh n) ((s,genv++List.genlist (fun x -> Nothing) n), Rval (Litv_exh Unit))

and

empty : forall ck env s.
true
==>
evaluate_list_exh ck env s [] (s, Rval [])

and

cons1 : forall ck env e es v vs s1 s2 s3.
evaluate_exh ck env s1 e (s2, Rval v) &&
evaluate_list_exh ck env s2 es (s3, Rval vs)
==>
evaluate_list_exh ck env s1 (e::es) (s3, Rval (v::vs))

and

cons2 : forall ck env e es err s s'.
evaluate_exh ck env s e (s', Rerr err)
==>
evaluate_list_exh ck env s (e::es) (s', Rerr err)

and

cons3 : forall ck env e es v err s1 s2 s3.
evaluate_exh ck env s1 e (s2, Rval v) &&
evaluate_list_exh ck env s2 es (s3, Rerr err)
==>
evaluate_list_exh ck env s1 (e::es) (s3, Rerr err)

and

mat_empty : forall ck env v s.
true
==>
evaluate_match_exh ck env s v [] (s, Rerr Rtype_error)

and

mat_cons1 : forall ck env env' v p pes e bv s count genv.
List.allDistinct (pat_bindings_exh p []) &&
pmatch_exh s p v env = Match env' &&
evaluate_exh ck env' ((count,s),genv) e bv
==>
evaluate_match_exh ck env ((count,s),genv) v ((p,e)::pes) bv

and

mat_cons2 : forall ck genv env v p e pes bv s count.
List.allDistinct (pat_bindings_exh p []) &&
pmatch_exh s p v env = No_match &&
evaluate_match_exh ck env ((count,s),genv) v pes bv
==>
evaluate_match_exh ck env ((count,s),genv) v ((p,e)::pes) bv

and

mat_cons3 : forall ck genv env v p e pes s count.
pmatch_exh s p v env = Match_type_error
==>
evaluate_match_exh ck env ((count,s),genv) v ((p,e)::pes) (((count,s),genv), Rerr Rtype_error)

and

mat_cons4 : forall ck env v p e pes s.
not (List.allDistinct (pat_bindings_exh p []))
==>
evaluate_match_exh ck env s v ((p,e)::pes) (s, Rerr Rtype_error)
