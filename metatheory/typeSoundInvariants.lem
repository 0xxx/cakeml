(* Type system for values, evaluation contexts, and the small-step sematnics'
 * states. The invariant that is used for type soundness. *)

open import Pervasives
open import Lib
open import Ast
open import SemanticPrimitives
open import SmallStep
open import TypeSystem
import List_extra

(* Store typing *)
type tenvS = env nat t

(* Global constructor type environments keyed by constructor name and type *)
type ctMap = Map.map (conN * tid_or_exn) (list tvarN * list t)

val flat_tenvC_ok : flat_tenvC -> bool
let flat_tenvC_ok tenvC =
  List.all (fun (cn,(tvs,ts,tn)) -> List.all (check_freevars 0 tvs) ts) tenvC

val tenvC_ok : tenvC -> bool
let tenvC_ok (mtenvC, tenvC) =
  List.all (fun (_,tenvC) -> flat_tenvC_ok tenvC) mtenvC &&
  flat_tenvC_ok tenvC

val ctMap_ok : ctMap -> bool
let ctMap_ok ctMap =
  Map.all (fun (cn,tn) (tvs,ts) -> List.all (check_freevars 0 tvs) ts) ctMap

(* Convert from a lexically scoped constructor environment to the global one *)
val flat_to_ctMap_list : flat_tenvC -> env (conN * tid_or_exn) (list tvarN * list t)
let flat_to_ctMap_list tenvC = 
  List.map (fun (cn,(tvs,ts,t)) -> ((cn,t),(tvs,ts))) tenvC

val to_ctMap_list : tenvC -> env (conN * tid_or_exn) (list tvarN * list t)
let to_ctMap_list tenvC = 
  flat_to_ctMap_list (snd tenvC) ++
  List.concat (List.map (fun (mn, tenvC) -> flat_to_ctMap_list tenvC) (fst tenvC))

val flat_to_ctMap : flat_tenvC -> ctMap
let flat_to_ctMap tenvC = Map.fromList (List.reverse (flat_to_ctMap_list tenvC))

val to_ctMap : tenvC -> ctMap
let to_ctMap tenvC = Map.fromList (List.reverse (to_ctMap_list tenvC))

(* Get the modules that are used by the constructors *)
val ctMap_to_mods : ctMap -> set (maybe modN)
let ctMap_to_mods ctMap =
  ({ Just mn | forall mn | exists cn tn. (cn,TypeId (Long mn tn)) IN (Map.domain ctMap) } union
   (if (exists cn tn. (cn,TypeId (Short tn)) IN (Map.domain ctMap)) then {Nothing} else {}) union
   { Just mn | forall mn | exists cn cn'. (cn,TypeExn (Long mn cn')) IN (Map.domain ctMap) } union
   (if (exists cn tn. (cn,TypeExn (Short tn)) IN (Map.domain ctMap)) then {Nothing} else {}))

(* Check that a constructor type environment is consistent with a runtime type
 * enviroment, using the full type keyed constructor type environment to ensure
 * that the correct types are used. *)
val consistent_con_env : ctMap -> envC -> tenvC -> bool
let consistent_con_env ctMap envC tenvC =
  tenvC_ok tenvC &&
  ctMap_ok ctMap &&
  (forall cn n t.
    lookup_con_id cn envC = Just (n, t)
    -->
    exists tvs ts.
      lookup_con_id cn tenvC = Just (tvs, ts, t) &&
      Map.lookup (id_to_n cn,t) ctMap = Just (tvs, ts) &&
      List.length ts = n)
  &&
  (forall cn.
    lookup_con_id cn envC = Nothing
    -->
    lookup_con_id cn tenvC = Nothing)

(* A value has a type *)
(* The number is how many deBruijn type variables are bound in the context. *)
val type_v : nat -> ctMap -> tenvS -> v -> t -> bool

(* A value environment has a corresponding type environment.  Since all of the
 * entries in the environment are values, and values have no free variables,
 * each entry in the environment can be typed in the empty environment (if at
 * all) *)
val type_env : ctMap -> tenvS -> envE -> tenvE -> bool

(* The type of the store *)
val type_s : ctMap -> tenvS -> store v -> bool

(* An evaluation context has the second type when its hole is filled with a
 * value of the first type. *)
(* The number is how many deBruijn type variables are bound in the context.
 * This is only used for constructor contexts, because the value restriction 
 * ensures that no other contexts can be created under a let binding. *)
val type_ctxt : nat -> tenvM -> ctMap -> tenvC -> tenvS -> tenvE -> ctxt_frame -> t -> t -> bool
val type_ctxts : nat -> ctMap -> tenvS -> list ctxt -> t -> t -> bool
val type_state : nat -> ctMap -> tenvS -> state -> t -> bool
val context_invariant : nat -> list ctxt -> nat -> bool

let rec 
tenv_ok Empty = true
and
tenv_ok (Bind_tvar n tenv) = tenv_ok tenv
and
tenv_ok (Bind_name x tvs t tenv) =
  check_freevars (tvs + num_tvs tenv) [] t && tenv_ok tenv

declare termination_argument tenv_ok = automatic

let tenvM_ok tenvM = List.all (fun (mn,tenv) -> tenv_ok (bind_var_list2 tenv Empty)) tenvM

indreln
[type_v : nat -> ctMap -> tenvS -> v -> t -> bool]
and
[type_vs : nat -> ctMap -> tenvS -> list v -> list t -> bool]
and
[type_env : ctMap -> tenvS -> envE -> tenvE -> bool]
and
[consistent_mod_env : tenvS -> ctMap -> envM -> tenvM -> bool]

lit_bool : forall tvs cenv senv b.
true
==>
type_v tvs cenv senv (Litv (Bool b)) Tbool

and

lit_int : forall tvs cenv senv n.
true
==>
type_v tvs cenv senv (Litv (IntLit n)) Tint

and

lit_string : forall tvs cenv senv s.
true
==>
type_v tvs cenv senv (Litv (StrLit s)) Tstring

and

lit_unit : forall tvs cenv senv.
true
==>
type_v tvs cenv senv (Litv Unit) Tunit

and

conv_some : forall tvs cenv senv cn vs tvs' tn ts' ts.
List.all (check_freevars tvs []) ts' &&
List.length tvs' = List.length ts' &&
type_vs tvs cenv senv vs (List.map (type_subst (ZIP tvs' ts')) ts) &&
Map.lookup (cn, tn) cenv = Just (tvs',ts)
==>
type_v tvs cenv senv (Conv (Just (cn,tn)) vs) (Tapp ts' (tid_exn_to_tc tn))

and

conv_none : forall tvs cenv senv vs ts.
type_vs tvs cenv senv vs ts
==>
type_v tvs cenv senv (Conv Nothing vs) (Tapp ts TC_tup)

and

closure : forall tvs menv tenvC ctMap senv envC envM env tenv n e t1 t2.
consistent_con_env ctMap envC tenvC &&
tenvM_ok menv &&
consistent_mod_env senv ctMap envM menv &&
type_env ctMap senv env tenv &&
check_freevars tvs [] t1 &&
type_e menv tenvC (bind_tenv n 0 t1 (bind_tvar tvs tenv)) e t2
==>
type_v tvs ctMap senv (Closure (envM, envC, env) n e) (Tfn t1 t2)

and

recclosure : forall tvs menv tenvC ctMap senv envM envC env funs n t tenv tenv'.
consistent_con_env ctMap envC tenvC &&
tenvM_ok menv &&
consistent_mod_env senv ctMap envM menv &&
type_env ctMap senv env tenv &&
type_funs menv tenvC (bind_var_list 0 tenv' (bind_tvar tvs tenv)) funs tenv' &&
lookup n tenv' = Just t
==>
type_v tvs ctMap senv (Recclosure (envM, envC, env) funs n) t

and

loc : forall tvs cenv senv n t.
check_freevars 0 [] t &&
(lookup n senv = Just t)
==>
type_v tvs cenv senv (Loc n) (Tref t)

and

empty : forall tvs cenv senv.
true
==>
type_vs tvs cenv senv [] []

and

cons : forall tvs cenv senv v vs t ts.
type_v tvs cenv senv v t &&
type_vs tvs cenv senv vs ts
==>
type_vs tvs cenv senv (v::vs) (t::ts)

and

empty : forall cenv senv.
true
==>
type_env cenv senv emp Empty

and

bind : forall cenv senv n v env t tenv tvs.
type_v tvs cenv senv v t &&
type_env cenv senv env tenv
==>
type_env cenv senv (bind n v env) (bind_tenv n tvs t tenv)

and 

empty : forall tenvS tenvC.
true
==>
consistent_mod_env tenvS tenvC [] []

and

cons : forall tenvS tenvC mn env menv mn' tenv tenvM.
(mn = mn') &&
not (List.elem mn (List.map fst tenvM)) &&
type_env tenvC tenvS env (bind_var_list2 tenv Empty) &&
consistent_mod_env tenvS tenvC menv tenvM
==>
consistent_mod_env tenvS tenvC ((mn,env)::menv) ((mn',tenv)::tenvM)

let type_s cenv senv s =
  forall l. 
    ((exists t. lookup l senv = Just t) = (exists v. store_lookup l s = Just v)) &&
    forall t v. ((lookup l senv = Just t) && (store_lookup l s = Just v)) --> type_v 0 cenv senv v t

indreln 
[context_invariant : nat -> list ctxt -> nat -> bool]

empty : forall n.
true
==>
context_invariant n [] n

and

raise : forall dec_tvs c env.
context_invariant dec_tvs c 0
==>
context_invariant dec_tvs ((Craise (),env) :: c) 0

and

handle : forall dec_tvs c pes env.
context_invariant dec_tvs c 0
==>
context_invariant dec_tvs ((Chandle () pes,env) :: c) 0

and

app1 : forall dec_tvs c op e env.
context_invariant dec_tvs c 0
==>
context_invariant dec_tvs ((Capp1 op () e,env) :: c) 0

and

app2 : forall dec_tvs c op v env.
context_invariant dec_tvs c 0
==>
context_invariant dec_tvs ((Capp2 op v (),env) :: c) 0

and

log : forall dec_tvs c l e env.
context_invariant dec_tvs c 0
==>
context_invariant dec_tvs ((Clog l () e,env) :: c) 0

and

if_ : forall dec_tvs c e1 e2 env.
context_invariant dec_tvs c 0
==>
context_invariant dec_tvs ((Cif () e1 e2,env) :: c) 0

and

mat : forall dec_tvs c pes env err_v.
context_invariant dec_tvs c 0
==>
context_invariant dec_tvs ((Cmat () pes err_v,env) :: c) 0

and

lt : forall dec_tvs c tvs x e env.
context_invariant dec_tvs c 0
==>
context_invariant dec_tvs ((Clet x () e,env) :: c) tvs

and

con : forall dec_tvs c cn vs es tvs env.
context_invariant dec_tvs c tvs &&
(tvs <> 0 --> List.all is_value es)
==>
context_invariant dec_tvs ((Ccon cn vs () es,env) :: c) tvs

and

uapp : forall dec_tvs c op env.
context_invariant dec_tvs c 0
==>
context_invariant dec_tvs ((Cuapp op (),env) :: c) 0

indreln
[type_ctxt : nat -> tenvM -> ctMap -> tenvC -> tenvS -> tenvE -> ctxt_frame -> t -> t -> bool]

raise : forall tvs menv all_cenv cenv senv tenv t.
check_freevars tvs [] t
 ==>
type_ctxt tvs menv all_cenv cenv senv tenv (Craise ()) Texn t

and

handle : forall tvs menv all_cenv cenv senv tenv pes t.
(forall ((p,e) MEM pes). exists tenv'.
   List.allDistinct (pat_bindings p []) &&
   type_p (num_tvs tenv) cenv p Texn tenv' &&
   type_e menv cenv (bind_var_list 0 tenv' tenv) e t)
==>
type_ctxt tvs menv all_cenv cenv senv tenv (Chandle () pes) t t

and

uapp : forall tvs menv all_cenv cenv senv tenv uop t1 t2.
check_freevars tvs [] t1 &&
check_freevars tvs [] t2 &&
type_uop uop t1 t2
==>
type_ctxt tvs menv all_cenv cenv senv tenv (Cuapp uop ()) t1 t2

and

app1 : forall tvs menv all_cenv cenv senv tenv e op t1 t2 t3.
check_freevars tvs [] t1 &&
check_freevars tvs [] t3 &&
type_e menv cenv tenv e t2 &&
type_op op t1 t2 t3
==>
type_ctxt tvs menv all_cenv cenv senv tenv (Capp1 op () e) t1 t3

and

app2 : forall tvs menv all_cenv cenv senv tenv op v t1 t2 t3.
check_freevars tvs [] t2 &&
check_freevars tvs [] t3 &&
type_v 0 all_cenv senv v t1 &&
type_op op t1 t2 t3
==>
type_ctxt tvs menv all_cenv cenv senv tenv (Capp2 op v ()) t2 t3

and

log : forall tvs menv all_cenv cenv senv tenv op e.
type_e menv cenv tenv e Tbool
==>
type_ctxt tvs menv all_cenv cenv senv tenv (Clog op () e) Tbool Tbool

and

if_ : forall tvs menv all_cenv cenv senv tenv e1 e2 t.
type_e menv cenv tenv e1 t &&
type_e menv cenv tenv e2 t
==>
type_ctxt tvs menv all_cenv cenv senv tenv (Cif () e1 e2) Tbool t

and

mat : forall tvs menv all_cenv cenv senv tenv t1 t2 pes err_v.
((pes = []) --> (check_freevars tvs [] t1 && check_freevars 0 [] t2)) &&
(forall ((p,e) MEM pes) . exists tenv'.
   List.allDistinct (pat_bindings p []) &&
   type_p tvs cenv p t1 tenv' &&
   type_e menv cenv (bind_var_list 0 tenv' tenv) e t2) &&
type_v 0 all_cenv senv err_v Texn
==>
type_ctxt tvs menv all_cenv cenv senv tenv (Cmat () pes err_v) t1 t2

and

lt : forall tvs menv all_cenv cenv senv tenv e t1 t2 n.
check_freevars tvs [] t1 &&
type_e menv cenv (bind_tenv n tvs t1 tenv) e t2
==>
type_ctxt tvs menv all_cenv cenv senv tenv (Clet n () e) t1 t2

and

con_some : forall tvs menv all_cenv cenv senv tenv cn vs es ts1 ts2 t tn ts' tvs'.
List.all (check_freevars tvs []) ts' &&
List.length tvs' = List.length ts' &&
type_vs tvs all_cenv senv (List.reverse vs)
        (List.map (type_subst (ZIP tvs' ts')) ts1) &&
type_es menv cenv (bind_tvar tvs tenv) es (List.map (type_subst (ZIP tvs' ts')) ts2) &&
lookup_con_id cn cenv = Just (tvs', ts1++[t]++ts2, tn)
==>
type_ctxt tvs menv all_cenv cenv senv tenv (Ccon (Just cn) vs () es) (type_subst (ZIP tvs' ts') t)
          (Tapp ts' (tid_exn_to_tc tn))

and

con_none : forall tvs menv all_cenv cenv senv tenv vs es t ts1 ts2.
check_freevars tvs [] t &&
type_vs tvs all_cenv senv (List.reverse vs) ts1 &&
type_es menv cenv (bind_tvar tvs tenv) es ts2
==>
type_ctxt tvs menv all_cenv cenv senv tenv (Ccon Nothing vs () es) t (Tapp (ts1++[t]++ts2) TC_tup)

let poly_context cs = 
  match cs with
    | (Ccon cn vs () es,env) :: cs -> List.all is_value es
    | (Clet x () e,env) :: cs -> true
    | [] -> true
    | _ -> false
  end

let is_ccon c = 
  match c with
    | Ccon cn vs () es -> true
    | _ -> false
  end

indreln
[type_ctxts : nat -> ctMap -> tenvS -> list ctxt -> t -> t -> bool]

empty : forall tvs tenvC senv t.
check_freevars tvs [] t
==>
type_ctxts tvs tenvC senv [] t t

and

cons : forall tvs tenvM tenvC ctMap senv c envM envC env cs tenv t1 t2 t3.
type_env ctMap senv env tenv &&
consistent_con_env ctMap envC tenvC &&
tenvM_ok tenvM &&
consistent_mod_env senv ctMap envM tenvM &&
type_ctxt tvs tenvM ctMap tenvC senv tenv c t1 t2 &&
type_ctxts (if is_ccon c && poly_context cs then tvs else 0) ctMap senv cs t2 t3
==>
type_ctxts tvs ctMap senv ((c,(envM,envC,env))::cs) t1 t3

indreln
[type_state : nat -> ctMap -> tenvS -> state -> t -> bool]

exp : forall dec_tvs tenvM tenvC ctMap senv envM envC s env e c t1 t2 tenv tvs.
context_invariant dec_tvs c tvs &&
consistent_con_env ctMap envC tenvC &&
tenvM_ok tenvM &&
consistent_mod_env senv ctMap envM tenvM &&
type_ctxts tvs ctMap senv c t1 t2 &&
type_env ctMap senv env tenv &&
type_s ctMap senv s &&
type_e tenvM tenvC (bind_tvar tvs tenv) e t1 &&
((tvs <> 0) --> is_value e)
==>
type_state dec_tvs ctMap senv ((envM, envC, env), s, Exp e, c) t2

and

vl : forall dec_tvs ctMap senv envM envC s env v c t1 t2 tvs.
context_invariant dec_tvs c tvs &&
type_ctxts tvs ctMap senv c t1 t2 &&
type_s ctMap senv s &&
type_v tvs ctMap senv v t1
==>
type_state dec_tvs ctMap senv ((envM, envC, env), s, Val v, c) t2

(* The first argument has strictly more bindings than the second. *)
val weakM_def : tenvM -> tenvM -> bool
let weakM tenvM tenvM' =
  forall mn tenv'.
    (lookup mn tenvM' = Just tenv')
    -->
    (exists tenv. (lookup mn tenvM = Just tenv) && weakE tenv tenv')

val weakC_def : tenvC -> tenvC -> bool
let weakC tenvC tenvC' =
  flat_weakC (snd tenvC) (snd tenvC') &&
  forall mn flat_tenvC'.
    lookup mn (fst tenvC') = Just flat_tenvC'
    -->
    exists flat_tenvC. lookup mn (fst tenvC) = Just flat_tenvC && flat_weakC flat_tenvC flat_tenvC'

(* The global constructor type environment has the primitive exceptions in it *)
val ctMap_has_exns : ctMap -> bool
let ctMap_has_exns ctMap =
  (Map.lookup ("Bind", TypeExn (Short "Bind")) ctMap = Just ([],[])) &&
  (Map.lookup ("Div", TypeExn (Short "Div")) ctMap = Just ([],[])) &&
  (Map.lookup ("Eq", TypeExn (Short "Eq")) ctMap = Just ([],[]))

(* The constructors that are missing from the second map are all declared in
 * modules. *)
val weakenCT_only_mods : ctMap -> ctMap -> bool
let  weakenCT_only_mods ctMap1 ctMap2 =
    (forall id tvs ts tn. 
       (Map.lookup (id, TypeId (Short tn)) ctMap1 = Just (tvs, ts)) -->
       (Map.lookup (id, TypeId (Short tn)) ctMap2 = Just (tvs, ts))) &&
    (forall id tvs ts cn. 
       (Map.lookup (id, TypeExn (Short cn)) ctMap1 = Just (tvs, ts)) --> 
       (Map.lookup (id, TypeExn (Short cn)) ctMap2 = Just (tvs, ts)))

(* For using the type soundess theorem, we have to know there are good
 * constructor and module type environments that don't have bits hidden by a
 * signature. *)
let type_sound_invariants (tenvM,tenvC,tenv,envM,envC,envE,store) =
  exists tenvS tenvM_no_sig tenvC_no_sig. 
    tenvM_ok tenvM_no_sig && 
    ctMap_has_exns (to_ctMap tenvC_no_sig) &&
    tenvM_ok tenvM &&
    ctMap_to_mods (to_ctMap tenvC_no_sig) subset Set.fromList (List.map Just (List.map fst tenvM_no_sig)) union {Nothing} &&
    List.map fst tenvM_no_sig = List.map fst tenvM &&
    List.map fst tenvM_no_sig = List.map fst (fst tenvC_no_sig) &&
    consistent_mod_env tenvS (to_ctMap tenvC_no_sig) envM tenvM_no_sig &&
    consistent_con_env (to_ctMap tenvC_no_sig) envC tenvC_no_sig &&
    type_env (to_ctMap tenvC_no_sig) tenvS envE tenv &&
    type_s (to_ctMap tenvC_no_sig) tenvS store &&
    weakM tenvM_no_sig tenvM &&
    weakC tenvC_no_sig tenvC &&
    weakenCT_only_mods (to_ctMap tenvC_no_sig) (to_ctMap tenvC)
