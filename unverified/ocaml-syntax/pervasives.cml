(* Name format:
   Letter-like names stay as they are. Symbol-like names are transcribed
   symbol-for-symbol into words separated by underscores. All names here are
   letter-like and not infix. `mod` was changed to `modulo` to avoid built-in
   `mod`. *)
(* Reference:
   http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html *)

structure Pervasives = struct
  fun equals x y = x = y;
  (*fun lt_gt x y = x <> y;*) (* Defined below *)
  fun lt x y = x < y;
  fun gt x y = x > y;
  fun lt_equals x y = x <= y;
  fun gt_equals x y = x >= y;
  fun compare x y =
    if x = y then
      0
    else if x < y then
      ~1
    else
      1;
  fun min x y = if x <= y then x else y;
  fun max x y = if x >= y then x else y;

  fun not x = case x of
      false => true
    | true => false;
  fun amp_amp x y = x andalso y
  fun bar_bar x y = x orelse y
  val amp = amp_amp;
  val or = bar_bar;

  fun lt_gt x y = not (x = y);

  fun bar_gt x f = f x;
  fun at_at f x = f x;

  fun tilde_minus x = ~x;
  fun tilde_plus x = x;
  fun succ x = 1 + x;
  fun pred x = x - 1;
  fun plus x y = x + y;
  fun minus x y = x - y;
  fun star x y = x * y;
  (* OCaml:         |  CakeML:
     # ~-5 / 3;;    |  ~5 div 3;
     - : int = -1   |  val it:<int> = ~2
     # ~-5 mod 3;;  |  ~5 mod 3;
     - : int = -2   |  val it:<int> = 1
   *)
  fun slash x y = if x < 0 then ~(~x div y) else x div y;
  fun modulo x y = x - y * slash x y
  fun abs x = if x < 0 then ~x else x;

  fun ignore x = ();
end;
